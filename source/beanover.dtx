% \iffalse meta-comment
% !TEX program  = pdfLaTeX
%
%% File: beanover.dtx
%
% Run this file with pdfTeX, then pdfLaTeX
%
% Copyright (C) 2022 Jérôme Laurens
%
% This file may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either
% version 1.3c of this license or (at your option) any later
% version. The latest version of this license is in:
%
%     http://www.latex-project.org/lppl.txt
%
% and version 1.3c or later is part of all distributions of
% LaTeX version 2020/01/01 or later.
%
%<*internal>
\iffalse
%</internal>
%<*readme>
----------------------------------------------------------------
beanover --- beamer named overlay ranges
E-mail: jerome.laurens@u-bourgogne.fr
Released under the LaTeX Project Public License v1.3c or later
See https://www.latex-project.org/lppl.txt
----------------------------------------------------------------

This package allows the management of multiple time lines in |beamer| documents.
Time lines are very handy both during edition and to manage complex and variable overlay specifications.
%</readme>
%<*internal>
\fi
\def\nameofplainTeX{plain}
\ifx\fmtname\nameofplainTeX\else
  \expandafter\begingroup
\fi
%</internal>
%<*install>
\input docstrip.tex
\keepsilent
\askforoverwritefalse
\preamble
----------------------------------------------------------------
beanover --- beamer named overlay ranges
E-mail: jerome.laurens@u-bourgogne.fr
Released under the LaTeX Project Public License v1.3c or later
See https://www.latex-project.org/lppl.txt
----------------------------------------------------------------

\endpreamble
\postamble

Copyright (C) 2022 by Jérôme LAURENS <jerome.laurens@u-bourgogne.fr>

This work may be distributed and/or modified under the
conditions of the LaTeX Project Public License (LPPL), either
version 1.3c of this license or (at your option) any later
version.  The latest version of this license is in the file:

https://www.latex-project.org/lppl.txt

This work is "maintained" (as per LPPL maintenance status) by
Jérôme LAURENS.

This work consists of the file  beanover.dtx
and the derived files           beanover.ins,
                                beanover.pdf and
                                beanover.sty.

\endpostamble
\usedir{tex/latex/beanover}
\generate{
  \file{\jobname.sty}{\from{\jobname.dtx}{package}}
}
%</install>
%<install>\endbatchfile
%<*internal>
\usedir{source/latex/beanover}
\generate{
  \file{\jobname.ins}{\from{\jobname.dtx}{install}}
}
\nopreamble\nopostamble
\usedir{doc/latex/beanover}
\generate{
  \file{README.txt}{\from{\jobname.dtx}{readme}}
}
\ifx\fmtname\nameofplainTeX
  \expandafter\endbatchfile
\else
  \expandafter\endgroup
\fi
%</internal>
%<*package>
\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{beanover}[2009/10/06 v1.0 description text]
%</package>
%<*driver>
% !TeX encoding = UTF-8
% !TeX program = lualatex
% ! TeX proot = ...
\documentclass{l3doc}
\usepackage{hyperref}
\usepackage{multirow}
\usepackage{tcolorbox}
\tcbuselibrary{minted}
\EnableCrossrefs
\CodelineIndex
\RecordChanges
\GetFileInfo{beanover.sty}
\title{\pkg{beamer} named overlay ranges with \pkg{beanover}}
\author{Jérôme Laurens}
\def\fileversion{version 2022.4}
\def\filedate{2022/10/01}
\date{\fileversion \qquad \filedate}
\begin{document}
\maketitle
\changes{v1.0}{2009/10/06}{First public release}
\begin{abstract}
This package allows the management of multiple slide ranges in |beamer| documents.
Slide ranges are very handy both during edition and to manage complex and variable overlay specifications.
\end{abstract}
%
\tableofcontents
%
\begin{documentation}
%
\section{Minimal example}
%
The document below is a contrived example to show how the |beamer|
overlay specifications have been extended.

\begin{tcblisting} {
  listing only,
  listing file = example1.tex,
  minted options={
    fontsize=\small,
    breaklines,
    linenos,
    numbersep=0.5\baselineskip,
  },
  minted style = autumn,
}
\documentclass {beamer}
\RequirePackage {beanover}
\begin{document}
\begin{frame}
  {\Large Frame \insertframenumber}
  {\Large Slide \insertslidenumber}
\Beanover{
  A = 1:2,
  B = A.next:3,
  C = B.next,
}
\visible<?(A.1)> {Only on slide 1}\\
\visible<?(B.1)-?(B.last)> {Only on slide 3 to 5}\\
\visible<?(C.1)> {Only on slide 6}\\
\visible<?(A.2)> {Only on slide 2}\\
\visible<?(B.2)-?(B.last)> {Only on slide 4 to 5}\\
\visible<?(C.2)> {Only on slide 7}\\
\visible<?(A.3)-> {From slide 3}\\
\visible<?(B.3)-?(B.last)> {Only on slide 5}\\
\visible<?(C.3)> {Only on slide 8}\\
\end{frame}
\end{document}
\end{tcblisting}
%
On line 8, we declare a slide range named `A', starting at slide 1 and with length 2.
On line 12, the new overlay specification \texttt{?(A.1)} stands for 1,
on line 15, \texttt{?(A.2)} stands for 2
and on line 18, \texttt{?(A.3)} stands for 3.
%
On line 9, we declare a second slide range named `B',
starting after the 2 slides of `A' namely 3.
Its length is 3 meaning that its last side has number 5,
thus each \texttt{?(B.last)} is replaced by 5.
The next slide after time line `B' has number 6
which is also the first slide of the third time line
due to line 10.
\section{What is a named slide range?}
Within a frame, there are different slides that appear in turn.
The main slide range covers all the slide numbers, from one to the total amount of slides.
In general, a slide range is a range of positive integers identified by a unique name.
The main practical interest is that time lines may be defined relative to one another.
Moreover we can specify overlay specifications based on time lines.
%
\section{Defining named slide ranges}
%
\begin{function}{\Beanover}
  \begin{syntax}
    \cs{Beanover}\marg{key--value list}
  \end{syntax}
\end{function}
The keys are the slide ranges names, they must contain no spaces nor dots.
When the same key is used multiple times, only the last is taken into account.
The possible values are \meta{start}, \meta{start}:\meta{length}, \meta{start}::\meta{end} or \meta{start}! where \meta{start}, \meta{end} and \meta{length} are algebraic expression involving any named overlay specification when an integer.
%
\section{Named overlay specifications}
%
The named overlay specifications are detailled in the tables below together with
their replacement meaning value as beamer standard overlay specification.

%
\begin{center}
\begin{tabular}{>{ \ttfamily \bfseries }l|>{ \ttfamily }l}
\hline
\bfseries \textrm{syntax} & \bfseries \textrm{meaning} 
\\\hline
\multicolumn{2}{c}{\ttfamily \meta{name} = \{\(i\), \(i+1\), \(i+2\),...\}}
\\\hline
\meta{name} & \(i\)\\
\meta{name}.1 & \(i\)\\
\meta{name}.2 & \(i+1\) \\
\meta{name}.\meta{integer} & \(i+ \meta{integer} - 1\) \\
\hline
\end{tabular}
\end{center}
In the frame example below, we use the \cs{BeanoverEval} command for the demonstration.
It is mainly used for debugging and testing purposes.

\begin{tcblisting} {
  listing only,
}
 \begin{frame} {Frame \insertframenumber} {Slide \insertslidenumber}
 \Beanover{
   A = 3,
 }
 \ttfamily
 \BeanoverEval(A)   ==3,
 \BeanoverEval(A.1) ==3,
 \BeanoverEval(A.2) ==4,
 \BeanoverEval(A.-1)==1,
 \end{frame}
 \end{tcblisting}
%
For finite time lines, we also have
\begin{center}
\begin{tabular}{>{ \ttfamily \bfseries }l|>{ \ttfamily }l|l|l}
\hline
\bfseries \textrm{syntax} & \bfseries \textrm{meaning} & \bfseries \textrm{output}
\\\hline
\multicolumn{2}{c|}{\ttfamily \meta{name} = \{\(i\), \(i+1\),..., \(j\)\}}
\\\hline
\meta{name}.length & \(j-i+1\) & A.length & 6\\
\meta{name}.last & \(j\) & A.last & 8\\
\meta{name}.next & \(j+1\) & A.next & 9\\
\meta{name}.range & \(i\) ''-'' \(j\) & A.range & 3-8\\
\hline
\end{tabular}
\end{center}
\begin{tcblisting} {
  listing only,
}
 \begin{frame} {Frame \insertframenumber} {Slide \insertslidenumber}
 \Beanover{
   A = 3:6,
 }
 \ttfamily
 \BeanoverEval(A.length) == 6,
 \BeanoverEval(A.1)      == 3,
 \BeanoverEval(A.2)      == 4,
 \BeanoverEval(A.-1)     == 1,
 \end{frame}
 \end{tcblisting}
%
Using these specification on unfinite time lines is unsupported.
%
Finally each time line has a dedicated cursor \texttt{\meta{name}.n} that we can use and increment.
\begin{description}
\item[\ttfamily\meta{name}.n]: use the position of the cursor 
\item[\ttfamily\meta{name}.n+=\meta{integer}]: advance the cursor by \meta{integer} and use the new position
\item[\ttfamily++\meta{name}.n]: advance the cursor by 1 and use the new position
\end{description}
%
\section{\texttt{?(...)} expressions}
\pkg{beamer} defines \meta{overlay specifications} included between pointed brackets. Before they are processed by the \pkg{beamer} class,
the \pkg{beanover} package scans the \meta{overlay specifications} for any occurrence of `\texttt{?(\meta{queries})}'. Each of them is then evaluated and replaced by its static counterpart.
The overall result is finally forwarded to \pkg{beamer}.

The \meta{queries} argument is a comma separated list of individual \meta{query}'s.
Each \meta{query} may be one of `\texttt{\meta{start}}', `\texttt{\meta{start}:\meta{length}}' or `\texttt{\meta{start}::\meta{last}}', where \meta{start}, \meta{length} and \meta{end} both denote algebraic expressions possibly involving 
named overlay specifications.
For example \texttt{?(A.next)}, \texttt{?(A.last+1)}, \texttt{?(A.1+A.length)} give the same result as soon as the slide range named `|A|' has been defined with a length.
\end{documentation}
  \DocInput{beanover.dtx}
\end{document}
%</driver>
% \fi
%
%\StopEventually{^^A
%  \PrintChanges
%  \PrintIndex
%}
%
%    \begin{macrocode}
%<*package>
%    \end{macrocode}
%
% \section{Implementation}
%
% Identify the internal prefix (\LaTeX3 \pkg{DocStrip} convention).
%    \begin{macrocode}
%<@@=beanover>
%    \end{macrocode}
%
% \subsection{Package declarations}
%
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[2020/01/01]
\ProvidesExplPackage
  {beanover}
  {2022/10/05}
  {0.2}
  {Named overlay specifications for beamer}
%    \end{macrocode}
%
% \begin{implementation}
%
% \subsection{Overlay specification}
% \subsubsection{In slide range definitions}
% \begin{variable} {\g_@@_prop}
% \meta{key}--\meta{value} property list to store the slide ranges.
% The keys are \texttt{\meta{name}}, \texttt{\meta{name}.l} where
% \meta{name} is a slide range identifier
%    \begin{macrocode}
\prop_new:N \g_@@_prop
%    \end{macrocode}
% \end{variable}
% Utility message.
%    \begin{macrocode}
\msg_new:nnn { beanover } { :n } { #1 }
%    \end{macrocode}
%
% \subsubsection{Defining side ranges}
% \begin{function}{\Beanover}
%   \begin{syntax}
%     \cs{Beanover} \marg{key--value list}
%   \end{syntax}
%   The keys are the slide range names.
%    \begin{macrocode}
\NewDocumentCommand \Beanover { m } {
  \group_begin:
  \keyval_parse:NNn \_@@_error:n \_@@_parse:nn { #1 }
  \group_end:
  \ignorespaces
}
%    \end{macrocode}
% We do not accept key only items, they are managed by \cs{_@@_error:n}.
% \meta{key--value} items are parsed by \cs{_@@_parse:nn}.
% \end{function}
% \begin{function}{\_@@_error:n}
% Prints an error message when a key only item is used.
%    \begin{macrocode}
\cs_new:Npn \_@@_error:n #1 {
  \msg_fatal:nnn { beanover } { :n } { Missing~value~for~#1 }
}
%    \end{macrocode}
% \end{function}
% \begin{function}{\_@@_parse:nn}
%   \begin{syntax}
%     \cs{_@@_parse:nn} \marg{name} \marg{definition}
%   \end{syntax}
% Auxiliary function called within a group.
% \meta{name} is the slide range name, \meta{definition} is the definition.
% Local variables |\l_tmpa_seq| and |\l_tmpb_seq|.
% \begin{variable}{\c_@@_range_regex}
% Capture groups:
% \begin{description}
% \item [2:] the start of the slide range
% \item [3:] the second colon
% \item [4:] the length or the end of the range
% \end{description}
%    \begin{macrocode}
\regex_const:Nn \c_@@_range_regex {
  \A \s* ([^:]+?) \s* (?: \: (\:)? \s * ( .*? ) \s* )? \Z
}
%    \end{macrocode}
% \end{variable}
%
% \end{function}
%    \begin{macrocode}
\cs_new:Npn \_@@_parse:nn #1 #2 {
  \regex_extract_once:NnNTF \c_@@_key_regex { #1 } \l_tmpa_seq {
%    \end{macrocode}
% We got a valid key.
%    \begin{macrocode}
    \exp_args:Nx
    \tl_if_empty:nTF { \seq_item:Nn \l_tmpa_seq 2 } {
      \regex_extract_once:NnNTF \c_@@_range_regex { #2 } \l_tmpb_seq {
        \exp_args:Nx
        \tl_if_empty:nTF { \seq_item:Nn \l_tmpb_seq 3 } {
%    \end{macrocode}
% This is not a \texttt{\meta{start}::\meta{end}} value.
%    \begin{macrocode}
          \exp_args:Neee   
          \_@@_l:nnn
            { #1 }
            { \seq_item:Nn \l_tmpb_seq { 2 } }
            { \seq_item:Nn \l_tmpb_seq { 4 } }
        } {
          \exp_args:Neee   
          \_@@_n:nnn
            { #1 }
            { \seq_item:Nn \l_tmpb_seq { 2 } }
            { \seq_item:Nn \l_tmpb_seq { 4 } }
        }
      } {
        \msg_error:nnn { beanover } { :n } { Invalid~declaration:~#2 }
      }
    } {
%    \end{macrocode}
% This is an alias.
%    \begin{macrocode}
      \prop_gput:Nnn \g_@@_prop { #1 } { #2 }
    }
  } {
    \msg_error:nnn { beanover } { :n } { Invalid~declaration:~#1 }
  }
}
%    \end{macrocode}
% \begin{function}{\_@@_l:nnn}
%   \begin{syntax}
%     \cs{__beanover:nnn_l} \marg{name} \marg{start} \marg{length}
%   \end{syntax}
% Auxiliary function called within a group.
% The length defaults to 1.
%    \begin{macrocode}
\cs_new:Npn \_@@_l:nnn #1 #2 #3 {
  \prop_gput:Nnn \g_@@_prop { #1.1 } { #2 }
  \prop_gput:Nnn \g_@@_prop { #1.l } { #3 }
}
%    \end{macrocode}%
% \end{function}
%
% \begin{function}{\_@@_n:nnn}
%   \begin{syntax}
%     \cs{_@@_n:nnn} \marg{name} \marg{start} \marg{end}
%   \end{syntax}
% Auxiliary function called within a group.
% The \meta{end} defaults to \marg{start}.
%    \begin{macrocode}
\cs_new:Npn \_@@_n:nnn #1 #2 #3 {
  \prop_gput:Nnn \g_@@_prop { #1.1 } { #2 }
  \tl_if_empty:nF { #3 } {
    \prop_gput:Nnn \g_@@_prop { #1.l } { #3 - #1.0 }
  }
}
%    \end{macrocode}
% \end{function}
%
% \subsubsection{Scanning named overlay specifications}
% Patch some beamer command to support |?(...)| instructions in overlay specifications.
% \begin{variable}{\l_@@_scan_tl}
%   Storage for the translated overlay specification, where |?(...)| instructions are replaced by their static counterparts.
%    \begin{macrocode}
\tl_new:N \l_@@_scan_tl
%    \end{macrocode}
% \end{variable}
% Save the original macro \cs{beamer@masterdecode} and then override it
% to properly preprocess the argument.
%    \begin{macrocode}
\cs_set_eq:NN \_@@_beamer@masterdecode \beamer@masterdecode
\cs_set:Npn \beamer@masterdecode #1 {
  \group_begin:
  \tl_clear:N \l_@@_scan_tl
  \_@@_scan:Nn \l_@@_scan_tl { #1 }
  \exp_args:NNV
  \group_end:
  \_@@_beamer@masterdecode \l_@@_scan_tl
}
%    \end{macrocode}
% \begin{function}{\_@@_scan:n}
% \begin{syntax}
% \cs{_@@_scan:Nn} \meta{tl variable} \marg{named overlay expression}
% \end{syntax}
% Scan the \meta{named overlay expression} argument and feed the \meta{tl variable} replacing |?(...)| instructions with their static counterpart.
% A group is created to use local variables:
% \begin{description}
%   \item[\cs{l_@@_eval_tl}:] is the returned token list that will be appended to \meta{tl variable} before ``exiting''.
% \end{description}
% \begin{variable}{\l_@@_depth_int}
% Store the depth level in parenthesis grouping used when finding
%     the proper closing parenthesis balancing the opening parenthesis that
%     follows immediately a question mark in a \texttt{?(...)} instruction.
%    \begin{macrocode}
\int_new:N \l_@@_depth_int
%    \end{macrocode}
% \end{variable}
% \begin{variable}{\l_@@_query_tl}
% Storage for the overlay query expression to be evaluated.
%    \begin{macrocode}
\tl_new:N \l_@@_query_tl
%    \end{macrocode}
% \end{variable}
% \begin{variable}{\l_@@_token_seq}
% The \meta{overlay expression} is split into the sequence of its tokens.
%    \begin{macrocode}
\seq_new:N \l_@@_token_seq
%    \end{macrocode}
% \end{variable}
% \begin{variable}{\l_@@_ask_bool}
% Whether a loop may continue.
% Controls the continuation of the main loop that scans
%     the tokens of the \meta{named overlay expression} looking for a question mark.
%    \begin{macrocode}
\bool_new:N \l_@@_ask_bool
%    \end{macrocode}
% \end{variable}
% \begin{variable}{\l_@@_query_bool}
% Whether a loop may continue. 
% Controls the continuation of the secondary loop that scans
%     the tokens of the \meta{overlay expression} looking for an opening
%     parenthesis follow the question mark.
%     It then controls the loop looking for the balanced closing parenthesis.
%    \begin{macrocode}
\bool_new:N \l_@@_query_bool
%    \end{macrocode}
% \end{variable}
% \begin{variable}{\l_@@_token_tl}
% Whether a loop may continue.
%    \begin{macrocode}
\tl_new:N \l_@@_token_tl
%    \end{macrocode}
% \end{variable}
% \end{function}
%    \begin{macrocode}
\cs_new:Npn \_@@_scan:Nn #1 #2 {
  \group_begin:
%    \end{macrocode}
% The integer variable are used for readonly data.
%    \begin{macrocode}
  \tl_clear:N \l_@@_eval_tl
  \int_zero:N \l_@@_depth_int
%    \end{macrocode}
% Explode the \meta{named overlay expression} into a list of tokens:
%    \begin{macrocode}
  \regex_split:nnN {} { #2 } \l_@@_token_seq
%    \end{macrocode}
% Continue the top level loop to scan for a `?':
%    \begin{macrocode}
  \bool_set_true:N \l_@@_ask_bool
  \bool_while_do:Nn \l_@@_ask_bool {
    \seq_pop_left:NN \l_@@_token_seq \l_@@_token_tl
    \quark_if_no_value:NTF \l_@@_token_tl {
%    \end{macrocode}
% We reached the end of the sequence (and the token list),
% we end the loop here.
%    \begin{macrocode}
      \bool_set_false:N \l_@@_ask_bool
    } {
%    \end{macrocode}
% \cs{l_@@_token_tl} contains a `normal' token.
%    \begin{macrocode}
      \tl_if_eq:NnTF \l_@@_token_tl { ? } {
%    \end{macrocode}
% We found a `?', we first gobble tokens until the next `(', ---)
% whatever they may be. In general, no tokens should be silently ignored.
%    \begin{macrocode}
        \bool_set_true:N \l_@@_query_bool
        \bool_while_do:Nn \l_@@_query_bool {
%    \end{macrocode}
% Get next token.
%    \begin{macrocode}
          \seq_pop_left:NN \l_@@_token_seq \l_@@_token_tl
          \quark_if_no_value:NTF \l_@@_token_tl {
%    \end{macrocode}
% No opening parenthesis found, raise.
%    \begin{macrocode}
            \msg_fatal:nnx { beanover } { :n } {Missing~'('%---)
              ~after~a~?:~#2}
          } {
            \tl_if_eq:NnT \l_@@_token_tl { ( %)
            } {
%    \end{macrocode}
% We found the `|(|` after the `|?|'.^^A---)
% Increment the parenthesis depth to 1 (on first passage).
%    \begin{macrocode}
              \int_incr:N \l_@@_depth_int
%    \end{macrocode}
% Record the forthcomming content in the \cs{l_@@_query_tl} variable,^^A(---
% up to the next balancing `|)|`.
%    \begin{macrocode}
              \tl_clear:N \l_@@_query_tl
              \bool_while_do:Nn \l_@@_query_bool {
%    \end{macrocode}
% Get next token.
%    \begin{macrocode}
                \seq_pop_left:NN \l_@@_token_seq \l_@@_token_tl
                \quark_if_no_value:NTF \l_@@_token_tl {
%    \end{macrocode}
% We reached the end of the sequence and the token list with no closing ^^A(---
% `|)|'.
% We raise and end both bool while loops.
% As recovery we feed \cs{l_@@_query_tl} with the missing ^^A(---
% `|)|'.
% |\l_@@_depth_int| is 0 whenever |\l_@@_query_bool| is false.
%    \begin{macrocode}
                  \msg_error:nnx { beanover } { :n } {Missing~%(---
                    `)':~#2 }
                  \int_do_while:nNnn \l_@@_depth_int > 1 {
                    \int_decr:N \l_@@_depth_int
                    \tl_put_right:Nn \l_@@_query_tl {%(---
                    )}
                  }
                  \int_zero:N \l_@@_depth_int
                  \bool_set_false:N \l_@@_query_bool
                  \bool_set_false:N \l_@@_ask_bool
                } {
                  \tl_if_eq:NnTF \l_@@_token_tl { ( %---)
                  } {
%    \end{macrocode}
% We found a `|(|', ^^A---)
% increment the depth and append the token to \cs{l_@@_query_tl}.
%    \begin{macrocode}
\int_incr:N \l_@@_depth_int
\tl_put_right:NV \l_@@_query_tl \l_@@_token_tl
                  } {
%    \end{macrocode}
% This is not a `('.^^A---)
%    \begin{macrocode}
                    \tl_if_eq:NnTF \l_@@_token_tl { %(
                      )
                    } {
%    \end{macrocode}
% We found a  ^^A(---
% `)', decrement the depth.
%    \begin{macrocode}
                      \int_decr:N \l_@@_depth_int
                      \int_compare:nNnTF \l_@@_depth_int = 0 {
%    \end{macrocode}
% The depth level has reached 0: we found our balancing parenthesis
% of the |?(...)| instruction.
% We can append the evaluated slide ranges token list to \cs{l_@@_eval_tl}
% and stop the inner loop.
%    \begin{macrocode}
  \exp_args:NNNx
  \_@@_eval:NNn \c_false_bool \l_@@_eval_tl {
    \l_@@_query_tl
  }
  \bool_set_false:N \l_@@_query_bool
                      } {
%    \end{macrocode}
% The depth has not yet reached level 0.^^A(---
% We append the `|)|' to \cs{l_@@_query_tl} because it is not the
% end of sequence marker.
%    \begin{macrocode}
\tl_put_right:NV \l_@@_query_tl \l_@@_token_tl
                      }
%    \end{macrocode}
% Above ends the code for a positive depth.
%    \begin{macrocode}
                    } {
%    \end{macrocode}
% The scanned token is not a `(' nor a `)',
% we append it as is to \cs{l_@@_query_tl}.
%    \begin{macrocode}
\tl_put_right:NV \l_@@_query_tl \l_@@_token_tl
                    }
                  }
                }
%    \end{macrocode}
% Above ends the code for Not a  `('^^A---)
%    \begin{macrocode}
              }
            }
%    \end{macrocode}
% Above ends the code for: Found the `(' after the `?' ^^A---)
%    \begin{macrocode}
          }
%    \end{macrocode}
% Above ends the code for not a no value quark.
%    \begin{macrocode}
        }
%    \end{macrocode}
% Above ends the code for the bool while loop to find the `(' after the `?'.^^A---)
%
% If we reached the end of the token list, then end both the current loop and its containing loop.
%    \begin{macrocode}
        \quark_if_no_value:NT \l_@@_token_tl {
          \bool_set_false:N \l_@@_query_bool
          \bool_set_false:N \l_@@_ask_bool
        }
      } {
%    \end{macrocode}
% This is not a `?', append the token to right of \cs{l_@@_eval_tl} and continue.
%    \begin{macrocode}
        \tl_put_right:NV \l_@@_eval_tl \l_@@_token_tl
      }
%    \end{macrocode}
% Above ends the code for the bool while loop to find a `(' after the `?' ^^A---)
%    \begin{macrocode}
    }
  }
%    \end{macrocode}
% Above ends the outer bool while loop to find `?' characters.
% We can append our result to \meta{tl variable}
%    \begin{macrocode}
  \exp_args:NNNV
  \group_end:
  \tl_put_right:Nn #1 \l_@@_eval_tl
}
%    \end{macrocode}
% Each new frame has its own slide ranges set,
% we clear the property list on entering a new frame environment.
%    \begin{macrocode}
\AddToHook
  { env/beamer@framepauses/before }
  { \prop_gclear:N \g_@@_prop }
%    \end{macrocode}
%
% \subsubsection{Evaluation}
% \begin{function}{\BeanoverEval}
%   \begin{syntax}
%     \cs{BeanoverEval} \oarg{tl variable} \marg{overlay queries}
%   \end{syntax}
% \meta{overlay queries} is the argument of |?(...)| instructions.
% This is a comma separated list of single \meta{overlay query}'s.
%
% This function evaluates the \meta{overlay queries} and store the result in the \meta{tl variable} when provided
% or leave the result in the input stream. Forwards to \cs{_@@_eval:NNn}
% within a group. \cs{l_@@_eval_tl} is used to store the result.
% \end{function}
% \begin{variable}{\l_@@_eval_tl}
% Storage for the evaluated result.
%    \begin{macrocode}
\tl_new:N \l_@@_eval_tl
%    \end{macrocode}
% \end{variable}
%    \begin{macrocode}
\NewExpandableDocumentCommand \BeanoverEval { s o m } {
  \group_begin:
  \tl_clear:N \l_@@_eval_tl
  \exp_args:Nx \_@@_eval:NNn {
      \IfBooleanTF { #1 } { \c_true_bool } { \c_false_bool }
    }
    \l_@@_eval_tl { #3 }
  \IfValueTF { #2 } {
    \exp_args:NNNV
    \group_end:
    \tl_set:Nn #2 \l_@@_eval_tl
  } {
    \exp_args:NV
    \group_end: \l_@@_eval_tl
  }
}
%    \end{macrocode}
%
% \begin{function}{\_@@_eval:NNn}
% \begin{syntax}
% \cs{_@@_eval:NNn} \meta{bool variable} \meta{tl variable} \marg{overlay queries}
% \end{syntax}
% Evaluates the \meta{overlay queries},
% replacing all the named overlay specifications and integer expressions
% by their static counterparts, then append the result to
% the right of the \meta{tl variable}.
% If the \meta{bool variable} is true then
% the cursor is not available (more explanation required).
% This is executed within a local group.
% Below are local variables and constants.
% \begin{variable}{\l_@@_query_seq}
% Storage for a sequence of queries.
%    \begin{macrocode}
\seq_new:N \l_@@_query_seq
%    \end{macrocode}
% \end{variable}
% \begin{variable}{\l_@@_eval_seq}
% Storage of the evaluated result.
%    \begin{macrocode}
\seq_new:N \l_@@_eval_seq
%    \end{macrocode}
% \end{variable}
% \begin{variable}{\c_@@_comma_regex}
% Used to parse slide range overlay specifications.
%    \begin{macrocode}
\regex_const:Nn \c_@@_comma_regex { \s* ,  \s* }
%    \end{macrocode}
% \end{variable}
% \end{function}
%    \begin{macrocode}
\cs_new:Npn \_@@_eval:NNn #1 #2 #3 {
  \group_begin:
  \tl_clear:N \l_@@_eval_tl
  \____@@_eval:NNn #1 \l_@@_eval_tl { #3 }
%    \end{macrocode}
% In this last step, we evaluate the integer expression and put
% the result in a variable which content will be copied after the group is closed.
% We authorize comma separated expressions and colon range expressions as well.
% We first split the expression around commas, into \cs{l_@@_query_seq}.
%    \begin{macrocode}
  \exp_args:NNV
  \regex_split:NnN \c_@@_comma_regex \l_@@_eval_tl
    \l_@@_query_seq
%    \end{macrocode}
% Then each component is evaluated and the result is stored in \cs{l_@@_eval_seq}
% that we must clear before use.
%    \begin{macrocode}
  \seq_clear:N \l_@@_eval_seq
  \seq_map_tokens:Nn \l_@@_query_seq {
    \_@@_query:NNn #1 \l_@@_eval_seq
  }
%    \end{macrocode}
% We have managed all the comma separated components, we collect them back
% and append them to \meta{tl variable}.
%    \begin{macrocode}
  \tl_set:Nx \l_@@_eval_tl { \seq_use:Nn \l_@@_eval_seq , }
  \exp_args:NNNV
  \group_end:
  \tl_put_right:Nn #2 \l_@@_eval_tl
}
%    \end{macrocode}
%
% \begin{function}{\_@@_query:NNn}
% \begin{syntax}
% \cs{_@@_query:NNn} \meta{bool variable} \meta{seq variable} \marg{overlay query}
% \end{syntax}
% Evaluates the single \meta{overlay query},
% which is expected to contain no comma,
% replacing all the named overlay specifications and integer expressions
% by their static counterparts, then append the result to
% the right of the \meta{seq variable}.
% If the \meta{bool variable} is true then
% the cursor is not available.
% This is executed within a local group.
% Below are local variables and constants.
% \begin{variable}{\l_@@_match_seq}
% Storage for the match.
%    \begin{macrocode}
\seq_new:N \l_@@_match_seq
%    \end{macrocode}
% \end{variable}
% \begin{variable}{\l_@@_a_tl}
% Storage for the start of a range.
%    \begin{macrocode}
\tl_new:N \l_@@_a_tl
%    \end{macrocode}
% \end{variable}
% \begin{variable}{\l_@@_b_tl}
% Storage for the end of a range, or its length.
%    \begin{macrocode}
\tl_new:N \l_@@_b_tl
%    \end{macrocode}
% \end{variable}
% \begin{variable}{\g_@@_colon_regex}
% Used to parse slide range overlay specifications.
% Next are the capture groups.
% \begin{description}
%   \item [2:] \meta{start}
%   \item [3:] Second colon
%   \item [4:] \meta{end} or \meta{length}
% \end{description}
%    \begin{macrocode}
\regex_const:Nn \c_@@_colon_regex {
  \A \s*( [^\:]*? ) \s* \: \s* (\:)? \s* ( [^\:]*? ) \s* \Z
}
%    \end{macrocode}
% \end{variable}
% \end{function}
%    \begin{macrocode}
\cs_new:Npn \_@@_query:NNn #1 #2 #3 {
  \regex_extract_once:NnNTF \c_@@_colon_regex {
    #3
  } \l_@@_match_seq {
%    \end{macrocode}
% We captured colon syntax ranges: one of \texttt{\meta{start}:\meta{length}} 
% or \texttt{\meta{start}::\meta{last}}.
% We recover the \meta{start} and \meta{end} or \meta{length} respectively
% in \cs{l_@@_a_tl} and \cs{l_@@_b_tl}.
%    \begin{macrocode}
    \tl_set:Nx \l_@@_a_tl  { \seq_item:Nn \l_@@_match_seq 2 }
    \tl_set:Nx \l_@@_b_tl  { \seq_item:Nn \l_@@_match_seq 4 }
    \exp_args:Nx
    \tl_if_empty:nTF { \seq_item:Nn \l_@@_match_seq 3 } {
%    \end{macrocode}
%
% This is a \texttt{\meta{start}:\meta{length}} range,
%    \begin{macrocode}
      \tl_if_empty:VT \l_@@_a_tl {
%    \end{macrocode}
% raise when \meta{start} is void because we cannot evaluate the last index
% without knowing the first.
%    \begin{macrocode}
        \msg_error:nnn { beanover } { :n } { Missing~range~start:~#1 }
        \tl_set:Nn \l_@@_a_tl 1
      }
%    \end{macrocode}
% When not provided, \meta{length} defaults to $\infty$.
% If there is a \meta{length}, evaluate it.
%    \begin{macrocode}
      \tl_if_empty:VF \l_@@_b_tl {
        \tl_set:Nx \l_@@_b_tl { \fp_to_int:n {
          \l_@@_a_tl + \l_@@_b_tl - 1
      } }
    }
  } {
%    \end{macrocode}
%
% This is a \texttt{\meta{start}::\meta{end}} range,
% with optional \meta{start} and \meta{end}.
% If there is \meta{start}, evaluate it,
%    \begin{macrocode}
    \tl_if_empty:VF \l_@@_a_tl {
      \tl_set:Nx \l_@@_a_tl {
        \exp_args:NV \fp_to_int:n \l_@@_a_tl
      }
    }
%    \end{macrocode}
% and if there is an \meta{end}, evaluate it as well.
%    \begin{macrocode}
      \tl_if_empty:VF \l_@@_b_tl {
        \tl_set:Nx \l_@@_b_tl {
          \exp_args:NV \fp_to_int:n \l_@@_b_tl 
        }
      }
    }
%    \end{macrocode}
% We can store the range.
   \begin{macrocode}
    \exp_args:NNx
    \seq_put_right:Nn \l_@@_eval_seq {
      \l_@@_a_tl - \l_@@_b_tl
    }
  } {
%    \end{macrocode}
% This is not a colon syntax range: we just evaluate the component and store the result,
% if any.
%    \begin{macrocode}
    \tl_if_empty:nF { #3 } {
      \exp_args:NNx
      \seq_put_right:Nn \l_@@_eval_seq { \fp_to_int:n { #3 } }
    }
  }
}
%    \end{macrocode}
%
%
%
%
%
%
% \begin{function}{\____@@_eval:NNn}
% \begin{syntax}
% \cs{____@@_eval:NNn} \meta{bool variable} \meta{tl variable} \marg{integer expression}
% \end{syntax}
% Evaluates the \meta{integer expression},
% replacing all the named specifications by their
% counterpart then put the result to
% the right of the \meta{tl variable}.
% If the \meta{boolean variable} is true then
% the cursor is not available.
% Executed within a group.
% Local variables: 
% \cs{l_@@_eval_tl} fo the content of \meta{tl variable}
% \begin{variable}{\l_@@_split_seq}
% The sequence of queries and non queries.
%    \begin{macrocode}
\seq_new:N \l_@@_split_seq
%    \end{macrocode}
% \end{variable}
% \begin{variable}{\l_@@_split_int}
%  Is the index of the non queries, before all the catched groups.
%    \begin{macrocode}
\int_new:N \l_@@_split_int
%    \end{macrocode}
% \end{variable}
% \begin{variable}{\l_@@_name_tl}
%    Storage for \cs{l_@@_split_seq} items that represent names.
%    \begin{macrocode}
\tl_new:N \l_@@_name_tl
%    \end{macrocode}
% \end{variable}
% \begin{variable}{\l_@@_static_tl}
%    Storage for the static values of named slide ranges.
%    \begin{macrocode}
\tl_new:N \l_@@_static_tl
%    \end{macrocode}
% \end{variable}
% \begin{variable}{\l_@@_group_tl}
%    Storage for capture groups.
%    \begin{macrocode}
\tl_new:N \l_@@_group_tl
%    \end{macrocode}
% \end{variable}
% \begin{variable}{\c_@@_int_regex}
% A decimal integer with an eventual sign.
%    \begin{macrocode}
\regex_const:Nn \c_@@_int_regex {
  (?:[-+]\s*)?[0-9]+
}
%    \end{macrocode}
% \end{variable}
% \end{function}
% \begin{variable}{\c_@@_key_regex}
% The name of a slide range consists of an alphabetical character
% eventually followed by any alphanumerical character.
% A leading underscore may be used for aliases. Under development.
%    \begin{macrocode}
\regex_const:Nn \c_@@_id_regex {
  [[:alpha:]][[:alnum:]_]*
}
%    \end{macrocode}
%    \begin{macrocode}
\regex_const:Nn \c_@@_key_regex {
  \A (_)? \ur{c_@@_id_regex} \Z
}
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}{\c_@@_split_regex}
% Used to parse slide ranges overlay specifications.
% Next are the capture groups.
% Group numbers are 1 based because it is used in splitting contex
% where only capture groups are considered.
% \end{variable}
%    \begin{macrocode}
\regex_const:Nn \c_@@_split_regex {
  ( ? :
%    \end{macrocode}
% \begin{description}
%   \item [1:] optional prefix increment \texttt{++}
%    \begin{macrocode}
    ( \+\+ )? \s*
%    \end{macrocode}
%   \item [2:] \meta{name}
%    \begin{macrocode}
    ( \ur{c_@@_id_regex} ) \s*
    ( ? :
%    \end{macrocode}
%   \item [3:] the integer after \texttt{+=}
%    \begin{macrocode}
      \+= \s* ( \ur{c_@@_int_regex} )
      | ( ? : \. \s* ( ? :
%    \end{macrocode}
%   \item [4:]  \texttt{length}
%    \begin{macrocode}
          (l)ength\b
%    \end{macrocode}
%   \item [5:]  \texttt{range}
%    \begin{macrocode}
        | (r)ange\b
%    \end{macrocode}
%   \item [6:]  \texttt{last}
%    \begin{macrocode}
        | (l)ast\b
%    \end{macrocode}
%   \item [7:]  \texttt{next}
%    \begin{macrocode}
        | (n)ext\b
%    \end{macrocode}
%   \item [8:] the integer after the dot
%    \begin{macrocode}
        | ( \ur{c_@@_int_regex} )
%    \end{macrocode}
%   \item [9:] \texttt{reset}
%    \begin{macrocode}
        | (r)eset\b
%    \end{macrocode}
%   \item [10:] Unknown attribute:
%    \begin{macrocode}
        | (\S*)
    ) \s* ) ) ? )
%    \end{macrocode}
%   \item [11:] Alias
%    \begin{macrocode}
    | ( _ \ur{c_@@_id_regex} )
%    \end{macrocode}
% \end{description}
%    \begin{macrocode}
}
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_new:Npn \____@@_eval:NNn #1 #2 #3 {
  \group_begin:
  \regex_split:NnN \c_@@_split_regex { #3 } \l_@@_split_seq
  \int_set:Nn \l_@@_split_int { 1 }
  \tl_set:Nx \l_@@_eval_tl {
    \seq_item:Nn \l_@@_split_seq { \l_@@_split_int }
  }
%    \end{macrocode}
% The |++| prefix should not be given when postfix attributes are.
% \begin{function}{\_@@_tmpa:n}
% \begin{syntax}
% \cs{_@@_tmpa:n} \marg{code}
% \end{syntax}
% \end{function}
% Helper function defined locally. Execute the \meta{code} if the \texttt{++}
% prefix is not catched, ``raises'' an exception otherwise.
%    \begin{macrocode}
  \cs_set:Npn \_@@_tmpa:n ##1 {
    \exp_args:Nx
    \tl_if_empty:nTF {
      \seq_item:Nn \l_@@_split_seq { \l_@@_split_int + 1 }
    } {
      ##1
    } {
      \msg_fatal:nnn { beanover } { :n } {
        Unexpected~beanover~specification~(prefix):~ #3
      }
    }
  }
%    \end{macrocode}
% \begin{function}{\__beanover:nTF}
% \begin{syntax}
% \cs{__beanover:nTF} \marg{capture group number} \marg{empty code} \marg{non empty code}
% \end{syntax}
% Helper function to locally set the |\l_@@_group_tl| variable
% to the captured group \meta{capture group number}
% and branch.
% \end{function}
%    \begin{macrocode}
  \cs_set:Npn \__beanover:nTF ##1 ##2 ##3 {
    \tl_set:Nx \l_@@_group_tl {
      \seq_item:Nn \l_@@_split_seq { \l_@@_split_int + ##1 }
    }
    \tl_if_empty:NTF \l_@@_group_tl { ##2 } { ##3 }
  }
%    \end{macrocode}
% Main loop.
%    \begin{macrocode}
  \int_while_do:nNnn { \l_@@_split_int } < {
    \seq_count:N \l_@@_split_seq
  } {
%    \end{macrocode}
% We first manage the aliases.
%    \begin{macrocode}
    \tl_set:Nx \l_@@_name_tl {
      \seq_item:Nn \l_@@_split_seq { \l_@@_split_int + 11 }
    }
    \tl_if_empty:NTF \l_@@_name_tl {
      \tl_set:Nx \l_@@_name_tl {
        \seq_item:Nn \l_@@_split_seq { \l_@@_split_int + 2 }
      }
      \__beanover:nTF { 3 } { % +=
        \__beanover:nTF { 4 } { % length
          \__beanover:nTF { 5 } { % range
            \__beanover:nTF { 6 } { % last
              \__beanover:nTF { 7 } { % next
                \__beanover:nTF { 8 } { % .123
                  \__beanover:nTF { 9 } { % .reset
                    \__beanover:nTF { 10 } { % .ERROR
%    \end{macrocode}
% Case \texttt{\meta{name}}
%    \begin{macrocode}
\__beanover:nTF { 1 } { % ++
%    \end{macrocode}
% Case \texttt{++\meta{name}}
%    \begin{macrocode}
  \_@@_tmpa:n {
    \bool_if:NT #1 {
      \msg_fatal:nnn { beanover } { :n } {
        No~\l_@@_name_tl~cursor~available~inside~\cs{Beanover}:~#3
      }
    }
    \exp_args:NNV
    \_@@_cursor:Nn \l_@@_static_tl \l_@@_name_tl
  }
} {
%    \end{macrocode}
% Case \texttt{++\meta{name}}
%    \begin{macrocode}
  \bool_if:NT #1 {
    \msg_fatal:nnn { beanover } { :n } {
      No~\l_@@_name_tl~cursor~available~inside~\cs{Beanover}:~#3
    }
  }
  \exp_args:NNV \_@@_incr:Nnn \l_@@_eval_tl \l_@@_name_tl 1
}
                      } {
%    \end{macrocode}
% Case \texttt{\meta{name}.UNKNOWN}
%    \begin{macrocode}
\msg_fatal:nnn { beanover } { :n } { Unknwon~attribute:~#3 }
                      }
                    } {
%    \end{macrocode}
% Case \texttt{\meta{name}.reset}
%    \begin{macrocode}
\bool_if:NT #1 {
  \msg_fatal:nnn { beanover } { :n } {
    No~\l_@@_name_tl~cursor~available~inside~\cs{Beanover}:~#3
  }
}
\exp_args:NnV
\_@@_reset:nn { 0 } \l_@@_name_tl
\__beanover:nTF { 1 } { % ++
%    \end{macrocode}
%
% Case \texttt{\meta{name}}
%    \begin{macrocode}
%^^A  \typeout{DEBUG~NAME~1}
  \exp_args:NNV
  \_@@_cursor:Nn \l_@@_eval_tl \l_@@_name_tl
%^^A  \typeout{DEBUG~NAME~LAST}
} {
%    \end{macrocode}
% Case \texttt{++\meta{name}}
%    \begin{macrocode}
  \exp_args:NNV \_@@_incr:Nnn \l_@@_eval_tl \l_@@_name_tl 1
}
                    }
                  } {
%    \end{macrocode}
% Case \texttt{\meta{name}.\meta{integer}}
%    \begin{macrocode}
\_@@_tmpa:n {
  \group_begin:
  \tl_clear:N \l_@@_eval_tl
  \exp_args:NNV \_@@_start:Nn \l_@@_eval_tl \l_@@_name_tl
  \tl_put_right:Nn \l_@@_eval_tl { + ( \l_@@_group_tl ) - 1 }
  \exp_args:NNNx
  \group_end:
  \tl_put_right:Nn \l_@@_eval_tl {
    \fp_to_int:n \l_@@_eval_tl
  }
}
                  }
                } {
%    \end{macrocode}
% Case \texttt{\meta{name}.next}
%    \begin{macrocode}
\_@@_tmpa:n {
  \exp_args:NNV \_@@_next:Nn \l_@@_eval_tl \l_@@_name_tl
}
                }
              } {
%    \end{macrocode}
% Case \texttt{\meta{name}.last}
%    \begin{macrocode}
\_@@_tmpa:n {
  \exp_args:NNV \_@@_last:Nn \l_@@_eval_tl \l_@@_name_tl
}  
              }
            } {
%    \end{macrocode}
% Case \texttt{\meta{name}.range}
%    \begin{macrocode}
\_@@_tmpa:n {
  \bool_if:NT #1 {
    \msg_fatal:nnn { beanover } { :n } {
      No~#3.range available:~
        \seq_item:Nn \l_@@_split_seq { \l_@@_split_int + 1 }
    }
  }
  \exp_args:NNV \_@@_start:Nn \l_@@_eval_tl \l_@@_name_tl
  \tl_put_right:Nn \l_@@_eval_tl { :: }
  \exp_args:NNV \_@@_last:Nn \l_@@_eval_tl \l_@@_name_tl
}
          }
        } {
%    \end{macrocode}
% Case \texttt{\meta{name}.length}
%    \begin{macrocode}
\_@@_tmpa:n {
  \exp_args:NNV \_@@_length:Nn \l_@@_eval_tl \l_@@_name_tl
}
        }
      } {
%    \end{macrocode}
% Case \texttt{\meta{name}+=\meta{integer}}
%    \begin{macrocode}
\bool_if:NT #1 {
  \msg_fatal:nnn { beanover } { :n } {
    No~\g_tmpb_tl~cursor~available~inside~\cs{Beanover}:~#3
  }
}
\exp_args:NNVV
\_@@_incr:Nnn \l_@@_eval_tl
  \l_@@_name_tl \l_@@_group_tl
      }
    } {
%    \end{macrocode}
% This was an alias, go recursive.
%    \begin{macrocode}
      \exp_args:NNV
      \prop_if_in:NnTF \g_@@_prop \l_@@_name_tl {
        \tl_set:Nx \g_tmpb_tl {
          \exp_args:NNV
          \prop_item:Nn \g_@@_prop \l_@@_name_tl
        }
        \tl_if_empty:NT \g_tmpb_tl {
          \tl_set:Nn \g_tmpb_tl { :: }
        }
      } {
        \exp_args:Nnnx
        \msg_error:nnn { beanover } { :n } {
          Unknown~ alias:~\tl_use:N \g_tmpb_tl\space(in~#3)
        }
        \tl_set:Nn \l_@@_name_tl { :: }              
      }
      \exp_args:NNNx
      \____@@_eval:NNn \c_false_bool \l_@@_eval_tl \g_tmpb_tl
    }
    \int_add:Nn \l_@@_split_int { 12 }
    \tl_put_right:Nx \l_@@_eval_tl {
      \seq_item:Nn \l_@@_split_seq { \l_@@_split_int }
    }
  }
  \exp_args:NNNV
  \group_end:
  \tl_put_right:Nn #2 \l_@@_eval_tl
}
%    \end{macrocode}
%
% \begin{function}{\_@@_start:Nn}
% \begin{syntax}
% \cs{_@@_start:Nn} \meta{tl variable} \marg{name}
% \end{syntax}
% Append the start of the \meta{name} slide range
% to the \meta{tl variable}
% with \cs{____@@_eval:NNn}.
% Cache the result.
%    \begin{macrocode}
\cs_new:Npn \_@@_start:Nn #1 #2 {
  \prop_if_in:NnTF \g_@@_prop { #2.A } {
    \tl_put_right:Nx #1 {
      \prop_item:Nn \g_@@_prop { #2.A }
    }
  } {
    \group_begin:
    \tl_clear:N \l_@@_eval_tl
    \prop_if_in:NnTF \g_@@_prop { #2.0 } {
      \exp_args:NNNx
      \_@@_eval:NNn \c_true_bool \l_@@_eval_tl {
        \prop_item:Nn \g_@@_prop { #2.0 } + 0
      }
    } {
      \exp_args:NNNx
      \_@@_eval:NNn \c_false_bool \l_@@_eval_tl {
        \prop_item:Nn \g_@@_prop { #2.1 } + 0 
      }
    }
    \prop_gput:NnV \g_@@_prop { #2.A }\l_@@_eval_tl
    \exp_args:NNNV
    \group_end:
    \tl_put_right:Nn #1 \l_@@_eval_tl
  }
}
%    \end{macrocode}
% \end{function}
% \begin{function}[TF]{\_@@_length:n}
%   \begin{syntax}
%     \cs{_@@_length:nTF} \marg{name} \Arg{true code} \Arg{false code}
%   \end{syntax}
%   Tests whether the \meta{name} slide range has a length.
% \end{function}
%    \begin{macrocode}
\prg_new_protected_conditional:Npnn \_@@_length:n #1 { TF } {
  \prop_has_item:NnTF \g_@@_prop { #1 } {
    \prg_return_true
  } {
    \prg_return_false
  }
}
%    \end{macrocode}
% \begin{function}{\_@@_length:Nn}
% \begin{syntax}
% \cs{_@@_length:Nn} \meta{tl variable} \marg{name}
% \end{syntax}
% Append the length of the \meta{name} slide range to \meta{tl variable}
% \end{function}
%    \begin{macrocode}
\cs_new:Npn \_@@_length:Nn #1 #2 {
  \prop_if_in:NnTF \g_@@_prop { #2.L } {
    \tl_put_right:Nx #1 { \prop_item:Nn \g_@@_prop { #2.L } }
  } {
    \_@@_length:nTF { #2 } {
      \group_begin:
      \tl_clear:N \l_@@_eval_tl
      \exp_args:NNNx
      \_@@_eval:NNn \c_true_bool \l_@@_eval_tl {
        \prop_item:Nn \g_@@_prop { #2.l } + 0
      }
      \tl_set:Nx \l_@@_eval_tl {
        \exp_args:NV \fp_to_int:n \l_@@_eval_tl
      }
      \prop_gput:NnV \g_@@_prop { #2.L } \l_@@_eval_tl
      \exp_args:NNNV
      \group_end:
      \tl_put_right:Nn #1 \l_@@_eval_tl
    } {
      \msg_error:nnn { beanover } { :n } { No~length~given:~#2 }
      \tl_put_right:Nn #1 { 0 }
    }
  }
}
%    \end{macrocode}
% \begin{function}{\_@@_next:Nn}
% \begin{syntax}
% \cs{_@@_next:Nn} \meta{tl variable} \marg{name}
% \end{syntax}
% Append the index after the \meta{name} slide range to the \meta{tl variable}.
% \end{function}
%    \begin{macrocode}
\cs_new:Npn \_@@_next:Nn #1 #2 {
  \prop_if_in:NnTF \g_@@_prop { #2.N } {
    \tl_put_right:Nx #1 {
      \prop_item:Nn \g_@@_prop { #2.N }
    }
  } {
    \_@@_length:nTF { #2 } {
      \group_begin:
      \tl_clear:N \l_@@_eval_tl
      \_@@_start:Nn \l_@@_eval_tl { #2 }
      \tl_put_right:Nn \l_@@_eval_tl { + }
      \_@@_length:Nn \l_@@_eval_tl { #2 }
      \exp_args:NNNV
      \_@@_eval:NNn \c_true_bool \l_@@_eval_tl \l_@@_eval_tl
      \tl_set:Nx \l_@@_eval_tl {
        \exp_args:NV \fp_to_int:n \l_@@_eval_tl
      }
      \prop_gput:NnV \g_@@_prop { #2.N } \l_@@_eval_tl
      \exp_args:NNNV
      \group_end:
      \tl_put_right:Nn #1 \l_@@_eval_tl
    } {
      \msg_error:nnn { beanover } { :n } { No~length~given:~#2 }
      \_@@_start:Nn #1 { #2 }
    }
  }
}
%    \end{macrocode}
% \begin{function}{\_@@_last:Nn}
% \begin{syntax}
% \cs{_@@_last:Nn} \meta{tl variable} \marg{name}
% \end{syntax}
% \end{function}
%    \begin{macrocode}
\cs_new:Npn \_@@_last:Nn #1 #2 {
  \prop_if_in:NnTF \g_@@_prop { #2.Z } {
    \tl_put_right:Nx #1 {
      \prop_item:Nn \g_@@_prop { #2.Z }
    }
  } {
    \_@@_length:nTF { #2 } {
      \group_begin:
      \tl_clear:N \l_@@_eval_tl
      \_@@_next:Nn \l_@@_eval_tl { #2 }
      \tl_put_right:Nn \l_@@_eval_tl { - 1 }
      \tl_set:Nx \l_@@_eval_tl {
        \exp_args:NV \fp_to_int:n \l_@@_eval_tl
      }
      \prop_gput:NnV \g_@@_prop { #2.Z } \l_@@_eval_tl
      \exp_args:NNNV
      \group_end:
      \tl_put_right:Nn #1 \l_@@_eval_tl
    } {
      \msg_error:nnn { beanover } { :n } { No~length~given:~#2 }
      \_@@_start:Nn #1 { #2 }
    }
  }
}
%    \end{macrocode}
% \begin{function}{\_@@_cursor:Nn}
% \begin{syntax}
% \cs{_@@_cursor:Nn} \meta{tl variable} \marg{name}
% \end{syntax}
% Append the value of the cursor associated to the \marg{name} slide range
% to the right of \meta{tl variable}.
% \end{function}
%    \begin{macrocode}
\cs_new:Npn \_@@_cursor:Nn #1 #2 {
  \group_begin:
  \prop_get:NnNTF \g_@@_prop { #2 } \l_@@_eval_tl {
    \tl_clear:N \l_@@_a_tl
    \_@@_start:Nn \l_@@_a_tl {#2}
    \int_compare:nNnT { \l_@@_eval_tl } < { \l_@@_a_tl } {
      \tl_set_eq:NN \l_@@_eval_tl \l_@@_a_tl
    }    
%    \end{macrocode}
% Not too low.
%    \begin{macrocode}
  } {
    \tl_clear:N \l_@@_eval_tl
    \_@@_start:Nn \l_@@_eval_tl {#2}
    \prop_gput:NnV \g_@@_prop { #2 } \l_@@_eval_tl
  }
%    \end{macrocode}
% If there is a length, use it to bound the result from above.
%    \begin{macrocode}
  \_@@_length:nTF { #2 } {
    \tl_clear:N \l_@@_a_tl
    \_@@_last:Nn \l_@@_a_tl {#2}
    \int_compare:nNnF { \l_@@_eval_tl } > {
      \l_@@_a_tl
    } {
      \tl_set_eq:NN \l_@@_eval_tl \l_@@_a_tl
    }
  }
  \exp_args:NNNV
  \group_end:
  \tl_put_right:Nn #1 \l_@@_eval_tl
}
%    \end{macrocode}
% \begin{function}{\_@@_incr:Nnn}
% \begin{syntax}
% \cs{_@@_incr:Nnn} \meta{tl variable} \marg{name} \marg{offset}
% \end{syntax}
% \end{function}
% Increment the cursor position accordingly.
% The result must lay in the declared range.
%    \begin{macrocode}
\cs_new:Npn \_@@_incr:Nnn #1 #2 #3 {
  \group_begin:
  \tl_clear:N \l_@@_eval_tl
  \_@@_cursor:Nn \l_@@_eval_tl { #2 }
  \exp_args:NNx
  \_@@_eval:Nn \l_@@_eval_tl { \l_@@_eval_tl + ( #3 ) }
  \prop_gput:NnV \g_@@_prop {#2} \l_@@_eval_tl
  \exp_args:NNNV
  \group_end:
  \tl_put_right:Nn #1 \l_@@_eval_tl
}
%    \end{macrocode}
%
% \subsubsection{Reseting slide ranges}
% \begin{function}{\BeanoverReset}
%   \begin{syntax}
%     \cs{BeanoverReset} \marg{Slide range name}
%   \end{syntax}
%    \begin{macrocode}
\NewDocumentCommand \BeanoverReset { O{0} m } {
  \_@@_reset:nn { #1 } { #2 }
  \ignorespaces
}
%    \end{macrocode}
% Forwards to \cs{_@@_reset:nn}.
% \end{function}
%
% \begin{function}{\_@@_reset:nn}
% \begin{syntax}
% \cs{_@@_reset:nn} \marg{start value} \marg{slide range name}
% \end{syntax}
% \end{function}
% Reset the cursor to its start value.
%    \begin{macrocode}
\cs_new:Npn \_@@_reset:nn #1 #2 {
  \prop_if_in:NnTF \g_@@_prop { #2.A } {
    \prop_gremove:Nn \g_@@_prop { #2.A }
    \prop_gremove:Nn \g_@@_prop { #2 }
    \prop_gput:Nnn \g_@@_prop { #2.0 } { #1 }
  } {
    \prop_if_in:NnT \g_@@_prop { #2.1 } {
      \prop_gremove:Nn \g_@@_prop { #2 }
      \prop_gput:Nnn \g_@@_prop { #2.0 } { #1 }
    }
  }
}
%    \end{macrocode}
%
%    \begin{macrocode}
\makeatother
\ExplSyntaxOff
%    \end{macrocode}
% \end{implementation}
%
%    \begin{macrocode}
%</package>
%    \end{macrocode}
%
% \StopEventually{\setlength\IndexMin{200pt}  \PrintIndex }
%
%\Finale
%
