% \iffalse meta-comment
% !TEX program  = LuaLaTeX
% !TEX encoding = UTF-8
%
%% File: beanoves.dtx
%
% Run this file twice with LuaLaTeX
%
% Copyright (C) 2022 Jérôme Laurens
%
% This file may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either
% version 1.3c of this license or (at your option) any later
% version. The latest version of this license is in:
%
%     http://www.latex-project.org/lppl.txt
%
% and version 1.3c or later is part of all distributions of
% LaTeX version 2020/01/01 or later.
%
%<*internal>
\iffalse
%</internal>
%<*readme>
----------------------------------------------------------------
beanoves --- beamer named overlay specifications
E-mail: jerome.laurens@u-bourgogne.fr
Released under the LaTeX Project Public License v1.3c or later
See https://www.latex-project.org/lppl.txt
----------------------------------------------------------------

This package allows the management of multiple time lines in |beamer| documents.
Time lines are very handy both during edition and to manage complex and variable overlay specifications.
%</readme>
%<*internal>
\fi
\def\nameofplainTeX{plain}
\ifx\fmtname\nameofplainTeX\else
  \expandafter\begingroup
\fi
%</internal>
%<*install>
\input docstrip.tex
\keepsilent
\askforoverwritefalse
\preamble
\endpreamble
\postamble

beanoves --- beamer named overlay ranges

Copyright (C) 2022 by Jérôme LAURENS <jerome.laurens@u-bourgogne.fr>

This work may be distributed and/or modified under the
conditions of the LaTeX Project Public License (LPPL), either
version 1.3c of this license or (at your option) any later
version.  The latest version of this license is in the file:

https://www.latex-project.org/lppl.txt

This work is "maintained" (as per LPPL maintenance status) by
Jérôme LAURENS.

This work consists of the file  beanoves.dtx
and the derived files           beanoves.ins,
                                beanoves.pdf,
                                beanoves.sty and
                                beanoves-debug.sty.

\endpostamble
\generate{
  \file{\jobname-debug.sty}{\from{\jobname.dtx}{package,debug}}
}
\usedir{tex/latex/beanoves}
\generate{
  \file{\jobname.sty}{\from{\jobname.dtx}{package,gubed,tset}}
}
%</install>
%<install>\endbatchfile
%<*internal>
\usedir{source/latex/beanoves}
\generate{
  \file{\jobname.ins}{\from{\jobname.dtx}{install}}
}
\nopreamble\nopostamble
\usedir{doc/latex/beanoves}
\generate{
  \file{README.txt}{\from{\jobname.dtx}{readme}}
}
\ifx\fmtname\nameofplainTeX
  \expandafter\endbatchfile
\else
  \expandafter\endgroup
\fi
%</internal>
%<*driver>
% !TeX encoding = UTF-8
% !TeX program = lualatex
% ! TeX proot = ...
\PassOptionsToPackage{enable-debug}{expl3}
\documentclass{l3doc}
\RequirePackage{hyperref}
\RequirePackage{multirow}
\RequirePackage{tcolorbox}
\RequirePackage{unicode}
\RequirePackage{unicode-math}
\RequirePackage{emoji}
\tcbuselibrary{minted}
\RequirePackage{beanoves-debug}
\EnableCrossrefs
\CodelineIndex
\RecordChanges
\title{\pkg{beamer} named overlay specification with \pkg{beanoves}}
\author{Jérôme Laurens}
\GetFileInfo{\jobname-debug.sty}
\date{\fileversion \qquad \filedate}
\begin{document}
\maketitle
\changes{v1.0}{2009/10/06}{First public release}
\begin{abstract}
This package allows the management of multiple slide lists in |beamer| documents.
Slide lists are very handy both during edition and to manage complex and variable \pkg{beamer} overlay specifications.
\end{abstract}
%
\tableofcontents
%
\begin{documentation}
%
\section{Minimal example}
%
The document below is a contrived example to show how the |beamer|
overlay specifications have been extended.

\begin{tcblisting} {
  listing only,
  listing file = example1.tex,
  minted options={
    fontsize=\small,
    breaklines,
    linenos,
    numbersep=0.5\baselineskip,
  },
  minted style = autumn,
}
\documentclass {beamer}
\RequirePackage {beanoves}
\begin{document}
\Beanoves {
      A = 1:2,
      B = A.next:3,
      C = B.next,
    }
\begin{frame}
  {\Large Frame \insertframenumber}
  {\Large Slide \insertslidenumber}
\visible<?(A.1)> {Only on slide 1}\\
\visible<?(B.1)-?(B.last)> {Only on slide 3 to 5}\\
\visible<?(C.1)> {Only on slide 6}\\
\visible<?(A.2)> {Only on slide 2}\\
\visible<?(B.2::B.last)> {Only on slide 4 to 5}\\
\visible<?(C.2)> {Only on slide 7}\\
\visible<?(A.3)-> {From slide 3}\\
\visible<?(B.3::B.last)> {Only on slide 5}\\
\visible<?(C.3)> {Only on slide 8}\\
\end{frame}
\end{document}
\end{tcblisting}
%
On line 4, we use the |\Beanoves| command to declare named slide ranges.
On line 5, we declare a slide range named `A', starting at slide 1 and with length 2.
On line 12, the extended \emph{named overlay specification} \texttt{?(A.1)} stands for 1,
on line 15, \texttt{?(A.2)} stands for 2
whereas on line 18, \texttt{?(A.3)} stands for 3.
%
On line 6, we declare a second slide range named `B',
starting after the 2 slides of `A' namely 3.
Its length is 3 meaning that its last slide number is 5,
thus each \texttt{?(B.last)} is replaced by 5.
The next slide number after slide range `B' is 6
which is also the start of the third slide range
due to line 7.
\section{Named slide lists}
\subsection{Presentation}
Within a \pkg{beamer} frame, there are different slides that appear in turn.
The main slide list is a range of integers covering all the slide numbers, from one to the total amount of slides.
In general, a slide list is a range of positive integers identified by a unique name.
The main practical interest is that such lists may be defined relative to one another, we can even have lists of slide ranges.
Finally, we can use these lists to organize \pkg{beamer} overlay specifications logically.
%
\subsection{Defining named slide lists}
In order to define named slide lists, we can either use the |\Beanoves| command below before a \pkg{beamer} frame environment, or use the |beanoves| option of this environment.
The value of the |beanoves| option is similar to the argument of the |\Beanoves| commands, but the latter takes precedence on the former.
This behaviour may be useful to input the very same source code into different frames and have different combinations of slides.
%
\begin{function}{beanoves}
  \begin{syntax}
    beanoves = \{
    \phantom{xx}\meta{name_1}=\meta{spec_1},
    \phantom{xx}\meta{name_2}=\meta{spec_2},
    \phantom{xx}...,
    \phantom{xx}\meta{name_n}=\meta{spec_n},
    \}
  \end{syntax}
\end{function}
\begin{function}{\Beanoves}
  \begin{syntax}
    \cs{Beanoves}\{
    \phantom{xx}\meta{name_1}=\meta{spec_1},
    \phantom{xx}\meta{name_2}=\meta{spec_2},
    \phantom{xx}...,
    \phantom{xx}\meta{name_n}=\meta{spec_n},
    \}
  \end{syntax}
\end{function}
The keys \meta{name_i} are the slide lists names, they are case sensitive and must contain no spaces nor `|/|' character.
In order to avoid name conflicts with floating point functions, it is suggested to let them contain at least an uppercase letter ot an underscore.
When the same key is used multiple times, only the last one is taken into account.
Possible values for \meta{spec_i} are the \emph{slide range specifiers} \meta{first},
\meta{first}:\meta{length}, \meta{first}::\meta{last}, :\meta{length}::\meta{last}
where \meta{first}, \meta{length} and \meta{last} are algebraic expression
possibly involving any integer valued named overlay specifications defined below.

Also possible values are \emph{slide list specifiers} which are comma separated list of \emph{slide range specifiers} and \emph{slide list specifier} between square brackets.
The definition
\\[0.2ex]
\hphantom{xx}\meta{name}|=[|\meta{spec_1}|,|\meta{spec_2}|,...,|\meta{spec_n}|]|,
\\[0.2ex]
is a convenient shortcut for
\\[0.2ex]
\hphantom{xx}\meta{name}|.1=|\meta{spec_1}|,|
\\\hphantom{xx}\meta{name}|.2=|\meta{spec_2}|,|
\\\hphantom{xx}|...,|
\\\hphantom{xx}\meta{name}|.|\textit{n}|=|\meta{spec_n}.
\\[0.2ex]
The rules above can apply individually to each
\\[0.2ex]
\hphantom{xx}\meta{name}|.|\rlap{\textit{i}}\phantom{|i|}|=|\meta{spec_i}.
\\[0.2ex]
Moreover we can go deeper: the definition
\\[0.2ex]
\hphantom{xx}\meta{name}|=[[|\meta{spec_{1.1}}|,| \meta{spec_{1.2}}|],[[|\meta{spec_{2.1}}|,| \meta{spec_{2.2}}|]]|
\\[0.2ex]
happens to be a convenient shortcut for
\\[0.2ex]
\hphantom{xx}\meta{name}|.1.1=|\meta{spec_{1.1}}|,|
\\\hphantom{xx}\meta{name}|.1.2=|\meta{spec_{1.2}}|,|
\\\hphantom{xx}\meta{name}|.2.1=|\meta{spec_{2.1}}|,|
\\\hphantom{xx}\meta{name}|.2.2=|\meta{spec_{2.2}}
\\[0.2ex]
and so on.
%
\section{Named overlay specifications}
%
\subsection{Named slide ranges}
When \emph{slide range specifications} are used, the named overlay specifications are detailled in the tables below together with
their replacement meaning value as \pkg{beamer} standard overlay specification.
%
\begin{center}
\begin{tabular}{>{ \ttfamily \bfseries }l|>{ \ttfamily }l}
\hline
\multicolumn{2}{c}{\ttfamily \meta{name} == [\(i\), \(i+1\), \(i+2\),...]}
\\\hline
\bfseries \textrm{syntax} & \bfseries \textrm{meaning} 
\\\hline
\meta{name}.1 & \(i\)\\
\meta{name}.2 & \(i+1\) \\
\meta{name}.\meta{integer} & \(i+ \meta{integer} - 1\) \\
\hline
\end{tabular}
\end{center}
In the frame example below, we use the \cs{BeanovesEval} command for the demonstration.
It is mainly used for debugging and testing purposes.

\begin{tcblisting} {
  listing only,
  minted options={
    fontsize=\small,
    breaklines,
    linenos,
    numbersep=0.5\baselineskip,
  },
  minted style = autumn,
}
\Beanoves {
    A = 3:6,
  }
\begin{frame} {Frame \insertframenumber} {Slide \insertslidenumber}
\ttfamily
\BeanovesEval(A.1) ==3,
\BeanovesEval(A.2) ==4,
\BeanovesEval(A.-1)==1,
\end{frame}
\end{tcblisting}
%
When the slide range has been given a length or an end,
like in the frame example below, we also have
\begin{center}
\begin{tabular}{>{ \ttfamily \bfseries }l|>{ \ttfamily }l|l|l}
\hline
\multicolumn{4}{c|}{\ttfamily \meta{name} == [\(i\), \(i+1\),..., \(j\)]}
\\\hline
\bfseries \textrm{syntax} & \bfseries \textrm{meaning} & \bfseries \textrm{example} & \bfseries \textrm{output}
\\\hline
\meta{name}.length & \(j-i+1\) & A.length & 6\\
\meta{name}.last & \(j\) & A.last & 8\\
\meta{name}.next & \(j+1\) & A.next & 9\\
\meta{name}.range & \(i\) ''-'' \(j\) & A.range & 3-8\\
\hline
\end{tabular}
\end{center}
\begin{tcblisting} {
  listing only,
  minted options={
    fontsize=\small,
    breaklines,
    linenos,
    numbersep=0.5\baselineskip,
  },
  minted style = autumn,
}
\Beanoves {
    A = 3:6, % or equivalently A = 3::8 or A = :6::8,

  }
\begin{frame} {Frame \insertframenumber} {Slide \insertslidenumber}
\ttfamily
\BeanovesEval(A.1)      == 3,
\BeanovesEval(A.length) == 6,
\BeanovesEval(A.last)   == 8,
\BeanovesEval(A.next)   == 9,
\BeanovesEval(A.range)  == 3-8,
\end{frame}
\end{tcblisting}
%
Using these specifications on unfinite named slide ranges is unsupported.
%
Finally each named slide range has a dedicated counter \texttt{\meta{name}.n}
which is some kind of variable that can be used and incremented\footnote{This is actually an experimental feature.}.
\begin{description}
\item[\ttfamily\meta{name}.n]: use the position of the counter 
\item[\ttfamily\meta{name}.n+=\meta{integer}]: advance the counter by \meta{integer} and use the new position
\item[\ttfamily++\meta{name}.n]: advance the counter by 1 and use the new position
\end{description}
Notice that ``|.n|'' can generally be omitted.
%
\subsection{Named slide lists}
After the definition
\\[0.2ex]
\hphantom{xx}\meta{name}|=[|\meta{spec_1}|,|\meta{spec_2}|,...,|\meta{spec_n}|]|
\\[0.2ex]
the rules of the previous section apply recursively to each individual
declaration
\\[0.2ex]\hphantom{xx}\meta{name}|.|\rlap{\textit{i}}\hphantom{|i|}|=|\meta{spec_i}.
%
\section{\texttt{?(...)} query expressions}
This is the key feature of the \pkg{beanoves} package, extending \pkg{beamer} \emph{overlay specifications} included between pointed brackets. Before the \emph{overlay specifications} are processed by the \pkg{beamer} class,
the \pkg{beanoves} package scans them for any occurrence of `\texttt{?(\meta{queries})}'. Each one is then evaluated and replaced by its static counterpart.
The overall result is finally forwarded to the \pkg{beamer} class.

The \meta{queries} argument is a comma separated list of individual \meta{query}'s of next table.
Sometimes, using \texttt{\meta{name}.range} is not allowed as it would lead to
an algeabraic difference instead of a range.
\begin{center}
\begin{tabular}{>{ \ttfamily \bfseries }l|>{ \ttfamily }l|>{ \ttfamily }l}
\hline
\bfseries \textrm{query} & \bfseries \textrm{static value} & \bfseries \textrm{limitation}
\\\hline
|:| & -\\
|::| & -\\
\meta{first expr} & \meta{first}\\
\meta{first expr}|:| & \meta{first} - & \textrm{no }\meta{name}.range \\
\meta{first expr}|::| & \meta{first} - & \textrm{no }\meta{name}.range \\
\meta{first expr}|:|\meta{length expr} & \meta{first} - \meta{last} & \textrm{no }\meta{name}.range \\
\meta{first expr}|::|\meta{end expr} & \meta{first} - \meta{last}  & \textrm{no }\meta{name}.range \\
\hline
\end{tabular}
\end{center}
Here \meta{first expr}, \meta{length expr} and \meta{end expr}
both denote algebraic expressions possibly involving named overlay specifications and counters.
As integers, they respectively evaluate to \meta{first}, \meta{length} and \meta{last}.

For example both \texttt{?(A.next)}, \texttt{?(A.last+1)}, \texttt{?(A.1+A.length)} give the same result as soon as the slide range named `|A|' has been properly defined with a starting value and a length.

Notice that nesting \texttt{?(...)} expressions is not supported.


\end{documentation}
\DocInput{beanoves.dtx}
\end{document}
%</driver>
% \fi
%
%\StopEventually{^^A
%  \PrintChanges
%  \PrintIndex
%}
%
% \begin{implementation}
% \NewDocumentEnvironment {gobble} { s+b } {
%   \IfBooleanTF{#1}{}{\vspace{-0.5em}}
% } {}
%    \begin{gobble}*
%<*package>
%    \end{gobble}
%
% \section{Implementation}
%
% Identify the internal prefix (\LaTeX3 \pkg{DocStrip} convention).
%    \begin{macrocode}
%<@@=bnvs>
%    \end{macrocode}
%
% \subsection{Package declarations}
%
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[2020/01/01]
\ProvidesExplPackage
%    \end{macrocode}
% \begin{gobble}
%<*!debug>
% \end{gobble}
%    \begin{macrocode}
  {beanoves}
%    \end{macrocode}
% \begin{gobble}
%</!debug>
%<*!gubed>
  {beanoves-debug}
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
  {2022/10/28}
  {1.0}
  {Named overlay specifications for beamer}
%    \end{macrocode}
%
% \subsection{logging}
%
% Utility message.
%    \begin{macrocode}
\msg_new:nnn { beanoves } { :n } { #1 }
\msg_new:nnn { beanoves } { :nn } { #1~(#2) }
%    \end{macrocode}
% \subsection{Debugging and testing facilities}
% Typesetting file |beanoves.dtx| creates both \pkg{beanoves}
% and \pkg{beanoves-debug} style files. The former is intended for everyday
% use whereas the latter contains supplemental debugging and testing
% facilities which are intentionally left undocumented. 
% \begin{gobble}*
%<*!gubed>
\cs_set:Npn \__bnvs_DEBUG_:nn #1 #2 {
  \msg_term:nnn { beanoves } { :n } { #1~#2 }
}
\cs_new:Npn \__bnvs_DEBUG_on: {
  \cs_set:Npn \__bnvs_DEBUG:n {
    \exp_args:Nx
    \__bnvs_DEBUG_:nn
    { ▃▃ \prg_replicate:nn {\l__bnvs_group_int} {▁▃} \space }
  }
}
\cs_new:Npn \__bnvs_DEBUG_off: {
  \cs_set_eq:NN \__bnvs_DEBUG:n \use_none:n
}
\__bnvs_DEBUG_off:
\cs_generate_variant:Nn \__bnvs_DEBUG:n { x, V }
\int_zero_new:N \l__bnvs_group_int
\cs_set:Npn \__bnvs_group_begin: {
  \group_begin:
  \int_incr:N \l__bnvs_group_int
}
\cs_set_eq:NN \__bnvs_group_end: \group_end:
\cs_new:Npn \__bnvs_DEBUG_a:nn #1 #2 {
  \__bnvs_DEBUG:x { #1~#2 }
}
\cs_new:Npn \__bnvs_DEBUG:nn #1 {
  \exp_args:Nx
  \__bnvs_DEBUG_a:nn
  { ▄▄ \prg_replicate:nn {\l__bnvs_group_int + 1} {#1} }
}
\cs_generate_variant:Nn \__bnvs_DEBUG:nn { nx, nV }
%</!gubed>
%<*!debug>
\cs_set_eq:NN \__bnvs_group_begin: \group_begin:
%</!debug>
% \end{gobble}
%
% \ExplSyntaxOn
% \keys_define:nn { beanoves.test } {
%   banner .tl_set:N = \l_banner_tl,
%   debug .code:n = \__bnvs_DEBUG_on:,
% }
% \ProvideDocumentEnvironment {Failure} {} {} {}
% \NewDocumentEnvironment{test}{} {
%   \color{red}\bfseries\ExplSyntaxOn
%   \debug_on:n { check-declarations }
%   \__bnvs_gclear:
%   \int_gset:Nn \g__bnvs_call_int { 128 }
%   \tl_set:Nn \l__bnvs_id_current_tl { ?! }
%   \begin{test1}
% } {
%   \end{test1}
%   \__bnvs_gclear:\ExplSyntaxOff\ignorespacesafterend
% }
% \cs_new:Npn \myCurrentTestFile {
%   \tl_if_empty:VF \CurrentFilePath { \CurrentFilePath / }
%   \CurrentFile
% }
% \NewDocumentEnvironment{test1}{o} {
%   \__bnvs_DEBUG_off:
%   \tl_set:Nn \l_banner_tl { ? }
%   \IfValueT {#1} { \keys_set_known:nn {beanoves.test} {#1} }
%   {
%     \__bnvs_DEBUG_on:
%     \__bnvs_DEBUG:n {▶︎▶︎▶︎▶︎▶︎▶︎▶︎▶︎▶︎▶︎}
%     \__bnvs_DEBUG:x {TEST~\l_banner_tl\space file:~\myCurrentTestFile, line:~\the\inputlineno}
%   }
%   \cs_set:Npn \banner:n ##1 {
%     \__bnvs_call_greset:
%      {
%   \__bnvs_DEBUG_on:
%   \__bnvs_DEBUG:x { ▶︎▶︎▶︎▶︎▶︎~TEST~##1~/~line:~\the\inputlineno}
%   } }
%   \RenewDocumentEnvironment{Failure}{}
%     {\begin{list}{\llap{\emoji{no-entry}\hspace{1em}}}{%
%        \setlength{\itemindent}{0pt}%
%        \setlength{\leftmargin}{0pt}%
%        \setlength{\labelwidth}{0pt}%
%        \addtolength{\topsep}{-0.5\parskip}%
%        \listparindent \parindent
%        \setlength{\parsep}{\parskip}}}
%     {\end{list}}
%   \cs_set_eq:NN \test_extract:nnnn \__bnvs_test_extract:nnnn
%   \cs_set_eq:NN \test_extract:Nnnn \__bnvs_test_extract:Nnnn
%   \cs_set_eq:NN \test_split:Nnnn \__bnvs_test_split:Nnnn
%   \cs_set_eq:NN \assert_equal:nnn \__bnvs_assert_equal:nnn
%   \cs_set_eq:NN \test_fail:n \__bnvs_test_fail:n
%   \cs_generate_variant:Nn \assert_equal:nnn { xxn }
%   \cs_set:Npn \log_g_prop: {
%     \prop_map_inline:Nn \g__bnvs_prop {
%       \__bnvs_DEBUG:n { ####1 -> ####2 }
%     }
%   }
%   \cs_set:Npn \Test_resolve:nnnnnn ##1 ##2 ##3 ##4 ##5 ##6 {
%     \banner:n { ##6 }
%     \tl_if_empty:nF { ##1 } {
%       \Beanoves { ##1 }
%       \log_g_prop:
%     }
%     \__bnvs_group_begin:
%     \tl_set_eq:NN \l__bnvs_id_tl \l__bnvs_id_current_tl
%     \tl_set:Nx \l__bnvs_name_tl { \l__bnvs_id_tl ##2 }
%     \seq_set_split:Nnn \l__bnvs_path_seq {.} { ##3 }
%     \seq_remove_all:Nn \l__bnvs_path_seq { }
%     \__bnvs_resolve:NNNTF \l__bnvs_id_tl \l__bnvs_name_tl \l__bnvs_path_seq {
%       \assert_equal:xxn { \l__bnvs_id_tl } { ?! } { ##6-id }
%       \assert_equal:xxn { \l__bnvs_name_tl } { ?!##4 } { ##6-name }
%       \assert_equal:xxn { \seq_use:Nn \l__bnvs_path_seq . } { ##5 } { ##6-path }
%     } {
%       \test_fail:n { ##6-CALL }
%     }
%     \__bnvs_gclear:
%     \__bnvs_group_end:
%   }
%   \cs_set:Npn \Test_resolve_n:nnnnnn ##1 ##2 ##3 ##4 ##5 ##6 {
%     \banner:n { ##6 }
%     \tl_if_empty:nF { ##1 } {
%       \Beanoves { ##1 }
%       \log_g_prop:
%     }
%     \__bnvs_group_begin:
%     \tl_set_eq:NN \l__bnvs_id_tl \l__bnvs_id_current_tl
%     \tl_set:Nx \l__bnvs_name_tl { \l__bnvs_id_tl ##2 }
%     \seq_set_split:Nnn \l__bnvs_path_seq {.} { ##3 }
%     \seq_remove_all:Nn \l__bnvs_path_seq { }
%     \__bnvs_resolve_n:NNNTF \l__bnvs_id_tl \l__bnvs_name_tl \l__bnvs_path_seq {
%       \assert_equal:xxn { \l__bnvs_id_tl } { ?! } { ##6-id }
%       \assert_equal:xxn { \l__bnvs_name_tl } { ?!##4 } { ##6-name }
%       \assert_equal:xxn { \seq_use:Nn \l__bnvs_path_seq . } { ##5 } { ##6-path }
%     } {
%       \test_fail:n { ##6-CALL }
%     }
%     \__bnvs_group_end:
%     \__bnvs_gclear:
%   }
%   \cs_set:Npn \Test_raw:nnnn ##1 ##2 ##3 ##4 {
%     \banner:n{##4~/~##2}
%     \tl_if_empty:nF { ##2 } {
%       \Beanoves { X = ##2 }
%       \log_g_prop:
%     }
%     \__bnvs_group_begin:
%     \tl_clear:N \l__bnvs_ans_tl
%     \cs_if_exist:cTF { __bnvs_raw_##1:nNTF } {
%       \use:c { __bnvs_raw_##1:nNTF } { ?!X } \l__bnvs_ans_tl {
%         \assert_equal:xxn { \l__bnvs_ans_tl } { ##3 } { ##4-b }
%       } {
%         \test_fail:n { ##4-a }
%       }
%     } {
%       \test_fail:n { ##4-BAD~##1 }
%     }
%     \__bnvs_group_end:
%   }
%   \cs_set:Npn \Test:nnnn ##1 ##2 ##3 ##4 {
%   \banner:n { ##4~/~##2 }
%     \tl_if_empty:nF { ##2 } {
%       \Beanoves { X = ##2 }
%       \log_g_prop:
%     }
%     \__bnvs_group_begin:
%     \tl_clear:N \l__bnvs_ans_tl
%     \cs_if_exist:cTF { __bnvs_if_##1:nNTF } {
%       \use:c { __bnvs_if_##1:nNTF } { ?!X } \l__bnvs_ans_tl {
%         \assert_equal:xxn { \l__bnvs_ans_tl } { ##3 } { ##4-a }
%         \tl_clear:N \l__bnvs_ans_tl
%         \cs_if_exist:cTF { __bnvs_##1:nN } {
%           \use:c { __bnvs_##1:nN } { ?!X } \l__bnvs_ans_tl
%           \assert_equal:xxn { \l__bnvs_ans_tl } { ##3 } { ##4-b }
%         } {
%           \test_fail:n { ##4-BAD~##1 }
%         }
%       } {
%         \test_fail:n { ##4-c }
%       }
%     } {
%       \cs_if_exist:cTF { __bnvs_##1:nNTF } {
%         \use:c { __bnvs_##1:nNTF } { ?!X } \l__bnvs_ans_tl {
%           \assert_equal:xxn { \l__bnvs_ans_tl } { ##3 } { ##4-a }
%           \tl_clear:N \l__bnvs_ans_tl
%           \cs_if_exist:cTF { __bnvs_##1:nN } {
%             \use:c { __bnvs_##1:nN } { ?!X } \l__bnvs_ans_tl
%             \assert_equal:xxn { \l__bnvs_ans_tl } { ##3 } { ##4-b }
%           } {
%             \test_fail:n { ##4-BAD~##1 }
%           }
%         } {
%           \test_fail:n { ##4-c }
%         }
%       } {
%         \test_fail:n { ##4-BAD~##1 }
%       }
%     }
%     \__bnvs_group_end:
%   }
%   \cs_set:Npn \Test_index:nnnn ##1 ##2 ##3 ##4 {
%     \banner:n {##4}
%     \tl_if_empty:nF { ##1 } {
%       \Beanoves { X = ##1 }
%       \log_g_prop:
%     }
%     \__bnvs_group_begin:
%     \tl_clear:N \l__bnvs_ans_tl
%     \__bnvs_if_index:nnNTF { ?!X } { ##2 } \l__bnvs_ans_tl {
%       \assert_equal:xxn { \l__bnvs_ans_tl } { ##3 } { ##4-a }
%     } {
%       \assert_fail:n { ##4-b }
%     }
%     \__bnvs_group_end:
%   }
%   \cs_set:Npn \Test_free_counter:nnn ##1 ##2 ##3 {
%     \banner:n { ##3~/~##1/ }
%     \tl_if_empty:nF { ##1 } {
%       \Beanoves { X = ##1 }
%       \log_g_prop:
%     }
%     \__bnvs_group_begin:
%     \tl_clear:N \l__bnvs_ans_tl
%     \__bnvs_if_free_counter:nNTF { ?!X } \l__bnvs_ans_tl {
%       \assert_equal:xxn { \l__bnvs_ans_tl } { ##2 } { ##3-a }
%     } {
%       \test_fail:n { ##3-b }
%     }
%     \__bnvs_group_end:
%   }
%   \cs_set:Npn \Test_counter:nnn ##1 ##2 ##3 {
%     \banner:n { ##3~/~##1 }
%     \__bnvs_parse:Nnn \__bnvs_range:nVVV { X } { ##1 }
%     \__bnvs_group_begin:
%     \tl_clear:N \l__bnvs_ans_tl
%     \__bnvs_if_counter:nNTF { ?!X } \l__bnvs_ans_tl {
%       \assert_equal:xxn { \l__bnvs_ans_tl } { ##2 } { ##3-b }
%     } {
%       \test_fail:n { ##3-a }
%     }
%     \__bnvs_group_end:
%   }
%   \cs_set:Npn \Test_incr:nnnn ##1 ##2 ##3 ##4 {
%     \banner:n { ##3~/~##1+##2 }
%     \tl_if_empty:nF { ##1 } {
%       \Beanoves { X = ##1 }
%       \log_g_prop:
%     }
%     \__bnvs_group_begin:
%     \tl_clear:N \l__bnvs_ans_tl
%     \__bnvs_if_free_counter:nNTF { ?!X } \l__bnvs_ans_tl {
%       \tl_clear:N \l__bnvs_ans_tl
%       \__bnvs_if_incr:nnNTF { ?!X } { ##2 } \l__bnvs_ans_tl {
%         \assert_equal:xxn { \l__bnvs_ans_tl } { ##3 } { ##4-b }
%       } {
%         \test_fail:n { ##4-c }
%       }
%     } {
%       \test_fail:n { ##4-d }
%     }
%     \__bnvs_group_end:
%   }
%   \cs_set:Npn \Test_range:nnn ##1 ##2 ##3 {
%     \banner:n { ##3~/~##1 }
%     \tl_if_empty:nF { ##1 } {
%       \Beanoves { X = ##1 }
%       \log_g_prop:
%     }
%     \__bnvs_group_begin:
%     \tl_clear:N \l__bnvs_ans_tl
%     \__bnvs_if_range:nNTF { ?!X } \l__bnvs_ans_tl {
%       \assert_equal:xxn { \l__bnvs_ans_tl } { ##2 } { ##3-a }
%     } {
%       \test_fail:n { ##3-b }
%     }
%     \__bnvs_group_end:
%   }
%   \cs_set:Npn \Test_append:nnnn ##1 ##2 ##3 ##4 {
%     \banner:n { ##4~/~X=##1=>##2==##3~/ }
%     \tl_if_empty:nF { ##1 } {
%       \Beanoves { X = ##1 }
%       \log_g_prop:
%     }
%     \__bnvs_group_begin:
%     \tl_clear:N \l__bnvs_ans_tl
%     \__bnvs_if_append:nNTF { ##2 } \l__bnvs_ans_tl {
%       \assert_equal:xxn { \l__bnvs_ans_tl } { ##3 } { ##4-a }
%     } {
%       \test_fail:n { ##4-b }
%     }
%     \__bnvs_group_end:
%   }
%   \cs_set:Npn \Test_regex:nnnn ##1 {
%     \tl_if_exist:cTF { c__bnvs_##1_regex } {
%       \__bnvs_test_extract:cnnn { c__bnvs_##1_regex }
%     } {
%       \test_fail:n { Bad~name:~##1}
%       \use_none:nnn
%     }
%   }
%   \cs_set:Npn \Test_query:nnnn ##1 ##2 ##3 ##4 {
%     \banner:n { ##4~/##1=>##2==##3~/ }
%     \Beanoves { ##1 }
%     \tl_clear:N \l_tmpa_tl
%     \tl_set:Nn \l_tmpb_tl { FAILURE }
%     \__bnvs_if_eval_query:nNTF { ##2 } \l_tmpa_tl {
%       \assert_equal:xxn { \l_tmpa_tl } { ##3 } {
%         Test~\cs{__bnvs_eval_query:nN}:~##4-a
%       }
%     } {
%       \test_fail:n { ##4-CALL }
%     }
%   }
%   \cs_set:Npn \reset:n ##1 {
%     \__bnvs_group_begin:
%     \__bnvs_DEBUG_off:
%     \tl_if_empty:nF { ##1 } {
%       \prop_gclear:N \g__bnvs_prop
%     }
%     \Beanoves { FIRST = 222, LENGTH = 445, LAST = 666 }
%     \__bnvs_group_end:
%   }
% } { {
%     \__bnvs_DEBUG_on:
%     \__bnvs_DEBUG:x { TEST~\l_banner_tl...~DONE}
%     \__bnvs_DEBUG:n {◀︎◀︎◀︎◀︎◀︎◀︎◀︎◀︎◀︎◀}
%   }
% }
% \cs_set:Npn \__bnvs_test_extract:nnnn #1 #2 #3 #4 {
%   \__bnvs_group_begin:
%   \tl_if_empty:nT { #3 } {
%     \regex_extract_once:nnNT { #1 } { #2 } \l__bnvs_match_seq {
%       \test_fail:n { #4-a }
%     }
%   } {
%     \regex_extract_once:nnNTF { #1 } { #2 } \l__bnvs_match_seq {
%       \tl_set:Nx \l__bnvs_a_tl { \seq_use:Nn \l__bnvs_match_seq , }
%       \seq_set_from_clist:Nn \l__bnvs_split_seq { #3 }
%       \tl_set:Nx \l__bnvs_b_tl { \seq_use:Nn \l__bnvs_split_seq , }
%       \assert_equal:xxn { \l__bnvs_a_tl } { \l__bnvs_b_tl } { #4-seq }
%     } {
%       \test_fail:n { #4-a }
%     }
%   }
%   \__bnvs_group_end:
% }
% \cs_set:Npn \__bnvs_test_extract:Nnnn #1 #2 #3 #4 {
%   \__bnvs_group_begin:
%   \regex_extract_once:NnNTF #1 { #2 } \l__bnvs_match_seq {
%     \tl_set:Nx \l__bnvs_a_tl { \seq_use:Nn \l__bnvs_match_seq , }
%     \seq_set_from_clist:Nn \l__bnvs_match_seq { #3 }
%     \tl_set:Nx \l__bnvs_b_tl { \seq_use:Nn \l__bnvs_match_seq , }
%     \assert_equal:xxn { \l__bnvs_a_tl } { \l__bnvs_b_tl } { #4-seq }
%   } {
%     \tl_if_empty:nF { #3 } {
%       \test_fail:n { #4-a }
%     }
%   }
%   \__bnvs_group_end:
% }
% \cs_generate_variant:Nn
%   \__bnvs_test_extract:Nnnn { cnnn }
% \cs_set:Npn \__bnvs_test_split:Nnnn #1 #2 #3 #4 {
%   \__bnvs_group_begin:
%   \regex_split:NnNTF #1 { #2 } \l__bnvs_split_seq {
%     \tl_set:Nx \l__bnvs_a_tl { \seq_use:Nn \l__bnvs_split_seq , }
%     \seq_set_from_clist:Nn \l__bnvs_split_seq { #3 }
%     \tl_set:Nx \l__bnvs_b_tl { \seq_use:Nn \l__bnvs_split_seq , }
%     \assert_equal:xxn { \l__bnvs_a_tl } { \l__bnvs_b_tl } { #4-seq }
%   } {
%     \tl_if_empty:nF { #3 } {
%       \test_fail:n { #4-a }
%     }
%   }
%   \__bnvs_group_end:
% }
% \cs_generate_variant:Nn \msg_error:nnnn { nnnx }
% \cs_set:Npn \__bnvs_assert_equal:nnn #1 #2 #3 {
%   \tl_if_eq:nnF { #1 } { #2 } {
%     \msg_error:nnnx { beanoves } { :nn } { FAILED~`#1'!=`#2' } { \myCurrentTestFile :\the\inputlineno :#3}
%     \begin{Failure}
%     \item FAILURE~`#1'!=`#2'~(\myCurrentTestFile :\the\inputlineno)
%     \item #3
%     \end{Failure}
%   }
% }
% \cs_set:Npn \__bnvs_test_fail:n #1 {
%   \msg_error:nnnx { beanoves } { :nn } { FAILURE } { \myCurrentTestFile :\the\inputlineno :#1~(\int_use:N \g__bnvs_call_int)}
%   \begin{Failure}
%   \item FAILURE~unexpected~branch~(\myCurrentTestFile :\the\inputlineno)
%   \item #1
%   \end{Failure}
% }
% \cs_generate_variant:Nn \__bnvs_assert_equal:nnn { xxn }
% \ExplSyntaxOff
%
% \NewDocumentEnvironment{myList}{}
%   {\begin{list}{•}{%
%      \setlength{\itemindent}{0pt}%
%      \setlength{\leftmargin}{0pt}%
%      \setlength{\labelwidth}{-1\parindent}%
%      \addtolength{\topsep}{-0.5\parskip}%
%      \listparindent \parindent
%      \setlength{\parsep}{\parskip}}}
%   {\end{list}}
% \ExplSyntaxOn
% \cs_set:Npn \myDebug #1 {
%   \begin{list}{\llap{\emoji{no-entry}\quad}}{%
%      \setlength{\itemindent}{0pt}%
%      \setlength{\leftmargin}{0pt}%
%      \setlength{\labelwidth}{-1\parindent}%
%      \addtolength{\topsep}{-0.5\parskip}%
%      \listparindent \parindent
%      \setlength{\parsep}{\parskip}}
%   \clist_map_inline:nn { #1 } {
%     \item \exp_args:Nx \use:n { ##1 }
%   }
%   \end{list}
% }
% \ExplSyntaxOff
%
% \subsection{Local variables}
% We make heavy use of local variables and function scopes.
% Many functions are executed within a \TeX\ group,
% which ensures no name collision with the caller stack.
% In that case, variables need not follow exactly the \LaTeX3\ naming convention:
% we do not specialize with the module name.
% On execution, next initialization instructions declare the variables as side effect.
%    \begin{macrocode}
\tl_new:N \l__bnvs_id_current_tl
\tl_new:N \l__bnvs_a_tl
\tl_new:N \l__bnvs_b_tl
\tl_new:N \l__bnvs_c_tl
\tl_new:N \l__bnvs_id_tl
\tl_new:N \l__bnvs_ans_tl
\tl_new:N \l__bnvs_name_tl
\tl_new:N \l__bnvs_path_tl
\tl_new:N \l__bnvs_group_tl
\tl_new:N \l__bnvs_query_tl
\tl_new:N \l__bnvs_token_tl
\int_new:N \g__bnvs_call_int
\int_new:N \l__bnvs_depth_int
\seq_new:N \l__bnvs_a_seq
\seq_new:N \l__bnvs_b_seq
\seq_new:N \l__bnvs_ans_seq
\seq_new:N \l__bnvs_match_seq
\seq_new:N \l__bnvs_split_seq
\seq_new:N \l__bnvs_path_seq
\seq_new:N \l__bnvs_query_seq
\seq_new:N \l__bnvs_token_seq
\bool_new:N \l__bnvs_no_counter_bool
\bool_new:N \l__bnvs_no_range_bool
\bool_new:N \l__bnvs_in_frame_bool
\bool_set_false:N \l__bnvs_in_frame_bool
%    \end{macrocode}
% \subsection{Infinite loop management}
% Unending recursivity is managed here.
% \begin{variable} {\g__bnvs_call_int}
% Some functions calls, as well as some loop bodies, decrement this counter.
% When this counter reaches 0, an error is raised or
% a computation is aborted.
% \end{variable}
%    \begin{macrocode}
\int_const:Nn \c__bnvs_max_call_int { 2048 }
%    \end{macrocode}
% \begin{function}{\__bnvs_call_greset:}
% \begin{syntax}
% \cs{__bnvs_call_greset:}
% \end{syntax}
% Reset globally the call stack counter to its maximum value.
%    \begin{macrocode}
	\cs_set:Npn  \__bnvs_call_greset: {
  \int_gset:Nn \g__bnvs_call_int { \c__bnvs_max_call_int }
}
%    \end{macrocode}
% \end{function}
% \begin{function}[TF]{\__bnvs_call:}
% \begin{syntax}
% \cs{__bnvs_call_do:TF} \marg{ true code } \marg{ false code }
% \end{syntax}
% Decrement the \cs{g__bnvs_call_int} counter globally and
% execute \meta{ true code } if we have not reached 0,
% \meta{ false code } otherwise.
%    \begin{macrocode}
\prg_new_conditional:Npnn  \__bnvs_call: { T, F, TF } {
  \int_gdecr:N \g__bnvs_call_int
  \int_compare:nNnTF \g__bnvs_call_int > 0 {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
%    \end{macrocode}
% \end{function}
% 
%
% \subsection{Overlay specification}
% \subsubsection{In slide range definitions}
% \begin{variable} {\g__bnvs_prop}
% \meta{key}--\meta{value} property list to store the named slide lists.
% The basic keys are, assuming \meta{id}!\meta{name} is a fully qualified slide list name,
% \begin{description}
% \item [\texttt{\meta{id}!\meta{name}/A}] for the first index
% \item [\texttt{\meta{id}!\meta{name}/L}] for the length when provided
% \item [\texttt{\meta{id}!\meta{name}/Z}] for the last index when provided
% \item [\texttt{\meta{id}!\meta{name}/C}] for the counter value, when used
% \item [\texttt{\meta{id}!\meta{name}/C0}] for initial value of the counter (when reset)
% \end{description}
% Other keys are eventually used to cache results when some attributes
% are defined from other slide ranges. They are characterized by a `|//|'.
% \begin{description}
% \item [\texttt{\meta{id}!\meta{name}//A}] for the cached static value of the first index
% \item [\texttt{\meta{id}!\meta{name}//Z}] for the cached static value of the last index
% \item [\texttt{\meta{id}!\meta{name}//L}] for the cached static value of the length
% \item [\texttt{\meta{id}!\meta{name}//N}] for the cached static value of the next index
% \end{description}
% The implementation is private, in particular, keys may change in future versions.
%    \begin{macrocode}
\prop_new:N \g__bnvs_prop
%    \end{macrocode}
% \end{variable}
% \begin{function}{\__bnvs_gput:nn,\__bnvs_gput:nV,\__bnvs_gprovide:nn,\__bnvs_gprovide:nV,\__bnvs_item:n,\__bnvs_get:nN,\__bnvs_gremove:n,\__bnvs_gclear:n,\__bnvs_gclear_cache:n,\__bnvs_gclear:}
% \begin{syntax}
% \cs{__bnvs_gput:nn} \marg{key} \marg{value}
% \cs{__bnvs_gprovide:nn} \marg{key} \marg{value}
% \cs{__bnvs_item:n} \marg{key}
% \cs{__bnvs_get:n} \marg{key} \meta{tl variable}
% \cs{__bnvs_gremove:n} \marg{key}
% \cs{__bnvs_gclear:n} \marg{key}
% \cs{__bnvs_gclear_cache:n} \marg{key}
% \cs{__bnvs_gclear:}
% \end{syntax}
% Convenient shortcuts to manage the storage, it makes the code more concise and readable.
% This is a wrapper over \LaTeX3 eponym functions,
% except \cs{__bnvs_gprovide:nn} which meaning is straightforward.
%    \begin{macrocode}
\cs_new:Npn \__bnvs_gput:nn #1 #2 {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x {\string\__bnvs_gput:nn/key:#1/value:#2/}
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
  \prop_gput:Nnn \g__bnvs_prop { #1 } { #2 }
}
\cs_new:Npn \__bnvs_gprovide:nn #1 #2 {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x {\string\__bnvs_gprovide:nn/key:#1/value:#2/}
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
  \prop_if_in:NnF \g__bnvs_prop { #1 } {
    \prop_gput:Nnn \g__bnvs_prop { #1 } { #2 }
  }
}
\cs_new:Npn \__bnvs_item:n {
  \prop_item:Nn \g__bnvs_prop
}
\cs_new:Npn \__bnvs_get:nN {
  \prop_get:NnN \g__bnvs_prop
}
\cs_new:Npn \__bnvs_gremove:n {
  \prop_gremove:Nn \g__bnvs_prop
}
\cs_new:Npn \__bnvs_gclear:n #1 {
  \clist_map_inline:nn { A, L, Z, C, C0, /, /A, /L, /Z, /N } {
    \__bnvs_gremove:n { #1 / ##1 }
  }
}
\cs_new:Npn \__bnvs_gclear_cache:n #1 {
  \clist_map_inline:nn { /A, /L, /Z, /N } {
    \__bnvs_gremove:n { #1 / ##1 }
  }
}
\cs_new:Npn \__bnvs_gclear: {
  \prop_gclear:N \g__bnvs_prop
}
\cs_generate_variant:Nn \__bnvs_gput:nn { nV }
\cs_generate_variant:Nn \__bnvs_gprovide:nn { nV }
%    \end{macrocode}
% \end{function}
% \begin{function}[pTF]{\__bnvs_if_in:n,\__bnvs_if_in:V}
% \begin{syntax}
% \cs{__bnvs_if_in_p:n} \marg{key}
% \cs{__bnvs_if_in:nTF} \marg{key} \Arg{true code} \Arg{false code}
% \end{syntax}
% Convenient shortcuts to test for the existence of some key, it makes the code more concise and readable.
% \end{function}
%    \begin{macrocode}
\prg_new_conditional:Npnn \__bnvs_if_in:n #1 { p, T, F, TF } {
  \prop_if_in:NnTF \g__bnvs_prop { #1 } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\prg_generate_conditional_variant:Nnn \__bnvs_if_in:n {V} { p, T, F, TF }
%    \end{macrocode}
% \begin{function}[TF]{\__bnvs_get:nN, \__bnvs_get:nnN}
% \begin{syntax}
% \cs{__bnvs_get:nNTF} \marg{key} \meta{tl variable} \Arg{true code} \Arg{false code}
% \cs{__bnvs_get:nnNTF} \marg{id} \marg{key} \meta{tl variable} \Arg{true code} \Arg{false code}
% \end{syntax}
% Convenient shortcuts to retrieve the value with branching, it makes the code more concise and readable.
% Execute \meta{true code} when the item is found, \meta{false code} otherwise.
% In the latter case, the content of the \meta{tl variable} is undefined.
% NB: the predicate won't work because |\prop_get:NnNTF| is not expandable.
%    \begin{macrocode}
\prg_new_conditional:Npnn \__bnvs_get:nN #1 #2 { T, F, TF } {
  \prop_get:NnNTF \g__bnvs_prop { #1 } #2 {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { \string\__bnvs_get:nN\space TRUE/
  #1/\string#2:#2/
}
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
    \prg_return_true:
  } {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { \string\__bnvs_get:nN\space FALSE/#1/\string#2/ }
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
    \prg_return_false:
  }
}
%    \end{macrocode}
% \end{function}
% \begin{test}[banner=(put|remove|clear|...):nn...]
% \cs_set:Npn \Test:xxn #1 #2 #3 {
%   \__bnvs_assert_equal:xxn { #1 } { #2 } {\cs{__bnvs_g(put|remove|clear|...):nn}~#3}
% }
% \__bnvs_gput:nn { A } { B }
% \Test:xxn { \__bnvs_item:n {A} } { B } { 1 }
% \Test:xxn { \__bnvs_if_in:nTF {A} TF } { T } { 3 }
% \Test:xxn { \__bnvs_if_in:nTF {B} TF } { F } { 4 }
% \Test:xxn { \__bnvs_if_in:nT {A} T } { T } { 5 }
% \Test:xxn { \__bnvs_if_in:nT {B} T } { } { 6 }
% \Test:xxn { \__bnvs_if_in:nF {A} F } { } { 7 }
% \Test:xxn { \__bnvs_if_in:nF {B} F } { F } { 8 }
% \Test:xxn { \bool_if:nTF { \__bnvs_if_in_p:n {A} } TF } { T } { 9 }
% \Test:xxn { \bool_if:nTF { \__bnvs_if_in_p:n {B} } TF } { F } { 10 }
% \Test:xxn { \bool_if:nTF { \__bnvs_if_in_p:n {B} || \__bnvs_if_in_p:n {A} } TF } { T } { 11 }
% \tl_clear:N \l__bnvs_b_tl
% \__bnvs_get:nNTF {A} \l__bnvs_b_tl {
%   \tl_set:Nn \l__bnvs_b_tl { SUCCESS }
% } {
%   \tl_set:Nn \l__bnvs_b_tl { FAILURE }
% }
% \Test:xxn { \l__bnvs_b_tl } { SUCCESS } { 13 }
% \__bnvs_get:nNTF {B} \l__bnvs_b_tl {
%   \tl_set:Nn \l__bnvs_b_tl { FAILURE }
% } {
%   \tl_set:Nn \l__bnvs_b_tl { SUCCESS }
% }
% \Test:xxn { \l__bnvs_b_tl } { SUCCESS } { 13 }
% \end{test}
%
% \subsubsection{Regular expressions}
%
% \begin{variable}{\c__bnvs_name_regex}
% The name of a slide range consists of a non void list of alphanumerical characters and
% underscore, but with no leading digit.
%    \begin{macrocode}
\regex_const:Nn \c__bnvs_name_regex {
  [[:alpha:]_][[:alnum:]_]*
}
%    \end{macrocode}
% \begin{test}[banner=name_regex]
% \Test_regex:nnnn { name } {A} {A} {1}
% \Test_regex:nnnn { name } {_A1} {_A1} {2}
% \end{test}
% \end{variable}
% \begin{variable}{\c__bnvs_id_regex}
% The name of a slide range consists of a non void list of alphanumerical characters and
% underscore, but with no leading digit.
%    \begin{macrocode}
\regex_const:Nn \c__bnvs_id_regex {
  (?: \ur{c__bnvs_name_regex} | [?]* ) ? !
}
%    \end{macrocode}
% \begin{test}[banner=name_regex]
% \Test_regex:nnnn { id } {!} {!} {1}
% \Test_regex:nnnn { id } {_A1!} {_A1!} {2}
% \end{test}
% \end{variable}
% \begin{variable}{\c__bnvs_path_regex}
% A sequence of \texttt{.\meta{positive integer}} items representing a path.
%    \begin{macrocode}
\regex_const:Nn \c__bnvs_path_regex {
  (?: \. [+-]? \d+ )*
}
%    \end{macrocode}
% \begin{test}[banner=path_regex]
% \Test_regex:nnnn { path } {} {} {1}
% \Test_regex:nnnn { path } {.1} {.1} {2}
% \Test_regex:nnnn { path } {.1.2} {.1.2} {3}
% \Test_regex:nnnn { path } {.1.-2} {.1.-2} {4}
% \Test_regex:nnnn { path } {.-1} {.-1} {5}
% \Test_regex:nnnn { path } {.-1.2} {.-1.2} {6}
% \Test_regex:nnnn { path } {.-1.-2} {.-1.-2} {7}
% \end{test}
% \end{variable}
%
% \begin{variable}{\c__bnvs_key_regex, \c__bnvs_A_key_Z_regex}
% A key is the name of a slide range possibly followed by positive integer attributes
% using a dot syntax.
% The `|A_key_Z|' variant matches the whole string.
%    \begin{macrocode}
\regex_const:Nn \c__bnvs_key_regex {
  \ur{c__bnvs_id_regex} ?
  \ur{c__bnvs_name_regex}
  \ur{c__bnvs_path_regex}
}
\regex_const:Nn \c__bnvs_A_key_Z_regex {
%    \end{macrocode}
% \begin{itemize}
% \item[2:] slide \meta{id}
% \item[3:] question mark, when \meta{id} is empty
% \item[4:] The range name
%    \begin{macrocode}
  \A ( ( \ur{c__bnvs_id_regex} ? ) \ur{c__bnvs_name_regex} )
%    \end{macrocode}
% \item[5:] the path, if any.
%    \begin{macrocode}
  ( \ur{c__bnvs_path_regex} ) \Z
}

%    \end{macrocode}
% \end{itemize}
% \begin{test}[banner=key_regex]
% \cs_set:Npn \Test:nnn {
%   \__bnvs_test_extract:Nnnn \c__bnvs_key_regex
% }
% \Test:nnn {A} {A} {1}
% \Test:nnn {_A1} {_A1} {2}
% \Test:nnn {A.1} {A.1} {3}
% \Test:nnn {_A1.1} {_A1.1} {4}
% \Test:nnn {_A1.1.2} {_A1.1.2} {5}
% \Test:nnn {(_A1.1.2)} {_A1.1.2} {6}
% \Test:nnn {X!A} {X!A} {1-a}
% \Test:nnn {X!_A1} {X!_A1} {2-a}
% \Test:nnn {X!A.1} {X!A.1} {3-a}
% \Test:nnn {X!_A1.1} {X!_A1.1} {4-a}
% \Test:nnn {X!_A1.1.2} {X!_A1.1.2} {5-a}
% \Test:nnn {(X!_A1.1.2)} {X!_A1.1.2} {6-a}
% \cs_set:Npn \Test:nnn {
%   \__bnvs_test_extract:Nnnn \c__bnvs_A_key_Z_regex
% }
% \Test:nnn {A} {A, A,{},{}} {1}
% \Test:nnn {_A1} {_A1, _A1, {},{}} {2}
% \Test:nnn {A.1} {A.1, A, {}, .1} {3}
% \Test:nnn {_A1.1} {_A1.1, _A1, {}, .1} {4}
% \Test:nnn {_A1.1.2} {_A1.1.2, _A1, {}, .1.2} {5}
% \Test:nnn {?!A} {?!A, ?!A, ?!, {}} {1-?!}
% \Test:nnn {?!_A1} {?!_A1, ?!_A1, ?!, {}} {2-?!}
% \Test:nnn {?!A.1} {?!A.1, ?!A, ?!, .1} {3-?!}
% \Test:nnn {?!_A1.1} {?!_A1.1, ?!_A1, ?!, .1} {4-?!}
% \Test:nnn {?!_A1.1.2} {?!_A1.1.2, ?!_A1, ?!, .1.2} {5-?!}
% \end{test}
% \end{variable}
%
% \begin{variable}{\c__bnvs_colons_regex}
% For ranges defined by a colon syntax.
%    \begin{macrocode}
\regex_const:Nn \c__bnvs_colons_regex { :(:+)? }
%    \end{macrocode}
% \begin{test}[banner=colons_regex]
% \cs_set:Npn \Test:nnn {
%   \__bnvs_test_split:Nnnn \c__bnvs_colons_regex
% }
% \Test:nnn { A:C } {{A},{},{C}} {1}
% \Test:nnn { A::C } {{A},{:},{C}} {2}
% \Test:nnn { A:::C } {{A},{::},{C}} {3}
% \Test:nnn { :B::C } {{},{},{B},{:},{C}} {4}
% \end{test}
% \end{variable}
%
% \begin{variable}{\c__bnvs_list_regex}
% A comma separated list between square brackets.
%    \begin{macrocode}
\regex_const:Nn \c__bnvs_list_regex {
  \A \[ \s*
%    \end{macrocode}
% Capture groups:
% \begin{myList}
% \item 2: the content between the brackets, outer spaces trimmed out
%    \begin{macrocode}
    ( [^\] %[---
    ]*? )
  \s* \] \Z
}
%    \end{macrocode}
% \end{myList}
% \begin{test}[banner=list_regex]
% \cs_set:Npn \Test:nnn {
%   \__bnvs_test_extract:Nnnn \c__bnvs_list_regex
% }
% \Test:nnn {[]} {[],{}} {1}
% \Test:nnn {[x]} {[x], x} {2}
% \Test:nnn {[~x~]} {[~x~],{x}} {3}
% \Test:nnn {[~x[~]} {[~x[~],{x[}} {4}
% \end{test}
% \end{variable}
%
% \begin{variable}{\c__bnvs_split_regex}
% Used to parse slide list overlay specifications in queries.
% Next are the 10 capture groups.
% Group numbers are 1 based because the regex is used in splitting contexts
% where only capture groups are considered and not the whole match.
%    \begin{macrocode}
\regex_const:Nn \c__bnvs_split_regex {
  \s* ( ? :
%    \end{macrocode}
% We start with `|++|' instrussions^^A
% \footnote{At the same time an instruction and an expression... this is a synonym of exprection}.
%   \begin{myList}
%   \item 1: \meta{name} of a slide range
%   \item 2: \meta{id} of a slide range plus the exclamation mark 
%    \begin{macrocode}
    \+\+ ( ( \ur{c__bnvs_id_regex}? ) \ur{c__bnvs_name_regex} )
%    \end{macrocode}
%   \item 3: optionally followed by an integer path
%    \begin{macrocode}
    ( \ur{c__bnvs_path_regex} ) (?: \. n )?
%    \end{macrocode}
% \begin{test}[banner=split_regex]
% \cs_set:Npn \Test:nnn #1 #2 #3 {
%   \__bnvs_test_extract:Nnnn \c__bnvs_split_regex
%     { #1 } {#2,{},{},{},{},{},{},{},{},{},{}} { #3 }
% }
% \Test:nnn { ++ABC.n } {{++ABC.n},{ABC},{},{}} {2a}
% \Test:nnn { ++ABC.1.2.n~~ } {{++ABC.1.2.n~~},{ABC},{},{.1.2}} {2b}
% \Test:nnn { ++ABC } {{++ABC},{ABC},{},{}} {2c}
% \Test:nnn { ++ABC.1.2~~ } {{++ABC.1.2~~},{ABC},{},{.1.2}} {2d}
% \Test:nnn { ++?!ABC.n } {{++?!ABC.n},{?!ABC},{?!},{}} {2a}
% \Test:nnn { ++?!ABC.1.2.n~~ } {{++?!ABC.1.2.n~~},{?!ABC},{?!},{.1.2}} {2b}
% \Test:nnn { ++?!ABC } {{++?!ABC},{?!ABC},{?!},{}} {2c}
% \Test:nnn { ++?!ABC.1.2~~ } {{++?!ABC.1.2~~},{?!ABC},{?!},{.1.2}} {2d}
% \end{test}
% We continue with other expressions
%   \item 4: qualified \meta{name} of a slide range,
%   \item 5: \meta{id} of a slide range plus the exclamation mark
% (to manage void \meta{id})
%    \begin{macrocode}
  | ( ( \ur{c__bnvs_id_regex}? ) \ur{c__bnvs_name_regex} )
%    \end{macrocode}
%   \item 6: optionally followed by an integer path
%    \begin{macrocode}
    ( \ur{c__bnvs_path_regex} )
%    \end{macrocode}
% Next comes another branching
%    \begin{macrocode}
    (?:
%    \end{macrocode}
%   \item 7: the \meta{length} attribute
%    \begin{macrocode}
       \. l(e)ngth
%    \end{macrocode}
% \begin{test}[banner=split_regex]
% \cs_set:Npn \Test:nnn #1 #2 #3 {
%   \banner:n { #3 }
%   \__bnvs_test_extract:Nnnn \c__bnvs_split_regex
%     { #1 } { {#1},{},{},{},#2,{e},{},{},{},{},{},{} } { #3 } 
% }
% \Test:nnn { A.length } {{A},{},{}} {5a}
% \Test:nnn { A.1.2.length } {{A},{},{.1.2}} {5b}
% \Test:nnn { ?!A.length } {{?!A},{?!},{}} {5c}
% \Test:nnn { ?!A.1.2.length } {{?!A},{?!},{.1.2}} {5d}
% \end{test}
%   \item 8: the \meta{last} attribute
%    \begin{macrocode}
    |  \. l(a)st
%    \end{macrocode}
% \begin{test}[banner=\string\c__bnvs_split_regex]
% \cs_set:Npn \Test:nnn #1 #2 #3 {
%   \banner:n { #3 }
%   \__bnvs_test_extract:Nnnn \c__bnvs_split_regex
%     { #1 } { {#1},{},{},{},#2,{},{a},{},{},{},{},{} } { #3 } 
% }
% \Test:nnn { A.last } {{A},{},{}} {6a}
% \Test:nnn { A.1.2.last } {{A},{},{.1.2}} {6b}
% \Test:nnn { ?!A.last } {{?!A},{?!},{}} {6c}
% \Test:nnn { ?!A.1.2.last } {{?!A},{?!},{.1.2}} {6d}
% \end{test}
%   \item 9: the \meta{next} attribute
%    \begin{macrocode}
    |  \. ne(x)t
%    \end{macrocode}
% \begin{test}[banner=\string\c__bnvs_split_regex]
% \cs_set:Npn \Test:nnn #1 #2 #3 {
%   \banner:n { #3 }
%   \__bnvs_test_extract:Nnnn \c__bnvs_split_regex
%     { #1 } { {#1},{},{},{},#2,{},{},{x},{},{},{},{}} { #3 } 
% }
% \Test:nnn { A.next } {{A},{},{}} {7a}
% \Test:nnn { A.1.2.next } {{A},{},{.1.2}} {7b}
% \Test:nnn { ?!A.next } {{?!A},{?!},{}} {7c}
% \Test:nnn { ?!A.1.2.next } {{?!A},{?!},{.1.2}} {7d}
% \end{test}
%   \item 10: the \meta{range} attribute
%    \begin{macrocode}
    |  \. (r)ange
%    \end{macrocode}
% \begin{test}[banner=\string\c__bnvs_split_regex]
% \cs_set:Npn \Test:nnn #1 #2 #3 {
%   \banner:n { #3 }
%   \__bnvs_test_extract:Nnnn \c__bnvs_split_regex
%     { #1 } { {#1},{},{},{},#2,{},{},{},{r},{},{},{} } { #3 } 
% }
% \Test:nnn { A.range } {{A},{},{}} {8a}
% \Test:nnn { A.1.2.range } {{A},{},{.1.2}} {8b}
% \Test:nnn { ?!A.range } {{?!A},{?!},{}} {8c}
% \Test:nnn { ?!A.1.2.range } {{?!A},{?!},{.1.2}} {8d}
% \end{test}
%   \item 11: the \meta{n} attribute
%    \begin{macrocode}
    |  \. (n)
%    \end{macrocode}
% \begin{test}[banner=\string\c__bnvs_split_regex]
% \cs_set:Npn \Test:nnn #1 #2 #3 {
%   \banner:n { #3 }
%   \__bnvs_test_extract:Nnnn \c__bnvs_split_regex
%     { #1 } { {#1},{},{},{},#2,{},{},{},{},{n},{},{} } { #3 } 
% }
% \Test:nnn { A.n } {{A},{},{}} {9a}
% \Test:nnn { A.1.2.n } {{A},{},{.1.2}} {9b}
% \Test:nnn { ?!A.n } {{?!A},{?!},{}} {9c}
% \Test:nnn { ?!A.1.2.n } {{?!A},{?!},{.1.2}} {9d}
% \end{test}
%   \item 12: the poor man integer expression after `|+=|',
%   which is the longest sequence of black characters,
%   which ends just before a space or at the very last character.
%   This tricky definition allows quite any algebraic expression,
%   even those involving parenthesis.
%    \begin{macrocode}
        (?: \s* \+= \s* ( \S+ ) )?
%    \end{macrocode}
% \begin{test}[banner={\string\c__bnvs_split_regex/+=}]
% \cs_set:Npn \:nnnn #1 #2 #3 #4 {
%   \banner:n { #4 }
%   \__bnvs_test_extract:Nnnn \c__bnvs_split_regex
%     { #1 }
%     { {#2},{},{},{},#3,{} } { #4 } 
% }
% \cs_set:Npn \Test:nnnn #1 #2 {
%   \tl_set:Nx \l__bnvs_a_tl { \tl_if_empty:nTF { #2 } {
%     \exp_not:n { #1 }
%   } {
%     \exp_not:n { #2 }
%   } }
%   \exp_args:NnV
%   \:nnnn { #1 } \l__bnvs_a_tl
% }
% \Test:nnnn { ABC.n += 421 } {}
%   {{ABC},{},{},{},{},{},{},{n},{421}} {`+='~1}
% \__bnvs_test_extract:Nnnn \c__bnvs_key_regex
%   { P.1 } {P.1} {`+='~2}
% \Test:nnnn { ABC.n += 1+P.1 } {}
%   {{ABC},{},{},{},{},{},{},{n},{1+P.1}} {`+='~2}
% \Test:nnnn { ABC.n += 1+P.1~X } { ABC.n += 1+P.1~ }
%   {ABC,{},{},{},{},{},{},{n},{1+P.1}} {`+='~3}
% \Test:nnnn { ABC.n += (P.1+1)~~^^A(
% ) } { ABC.n += (P.1+1)~~ } {ABC,{},{},{},{},{},{},{n},{(P.1+1)}} {`+='~4}
% \Test:nnnn { ?!ABC.n += 421 } {}
%   {{?!ABC},{?!},{},{},{},{},{},{n},{421}} {`+='~5}
% \__bnvs_test_extract:Nnnn \c__bnvs_key_regex
%   { P.1 } { P.1 } { `+='~2 }
% \Test:nnnn { ?!ABC.n += 1+P.1 } {}
%   {{?!ABC},{?!},{},{},{},{},{},{n},{1+P.1}} {`+='~6}
% \Test:nnnn { ?!ABC.n += 1+P.1~X } {?!ABC.n += 1+P.1~}
%   {?!ABC,{?!},{},{},{},{},{},{n},{1+P.1}} {`+='~7}
% \Test:nnnn { ?!ABC.n += (P.1+1)~~^^A(
% ) } {?!ABC.n += (P.1+1)~~} {?!ABC,{?!},{},{},{},{},{},{n},{(P.1+1)}} {`+='~8}
% \end{test}
%   \item 13: the post increment
%    \begin{macrocode}
    | (?:\.n)? (\+)\+
%    \end{macrocode}
%    \begin{macrocode}
    )?
%    \end{macrocode}
% \end{myList}
%    \begin{macrocode}
  ) \s*
}
%    \end{macrocode}
% \begin{test}[banner=split_regex]
% \cs_set:Npn \Test:nnn #1 #2 #3{
%   \__bnvs_test_split:Nnnn \c__bnvs_split_regex
%  { 1/#1/2 } { 1/,#2,/2 } { #3 }
% }
% \Test:nnn { ++A }   { {A}    ,{},{},{},{},{},{},{},{},{},{},{},{}} { 1 }
% \Test:nnn { ++?!A } { {?!A},{?!},{},{},{},{},{},{},{},{},{},{},{}} { 1 }
% \Test:nnn { ++A.3 } { {A},{},{.3},{},{},{},{},{},{},{},{},{},{}} { 1 }
% \Test:nnn { ++?!A.3 } { {?!A},{?!},{.3},{},{},{},{},{},{},{},{},{},{}} { 1 }
% \end{test}
% \end{variable}
%
% \subsubsection{\pkg{beamer.cls} interface}
% Work in progress.
%    \begin{macrocode}
\RequirePackage{keyval}
\define@key{beamerframe}{beanoves~id}[]{
  \tl_set:Nx \l__bnvs_id_current_tl { #1 ! }
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
  \__bnvs_DEBUG_on:
  \__bnvs_DEBUG:x {THIS_IS_KEY}
  \__bnvs_DEBUG_off:
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
}
\AddToHook{env/beamer@frameslide/before}{
  \bool_set_true:N \l__bnvs_in_frame_bool
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
  \__bnvs_DEBUG_on:
  \__bnvs_DEBUG:x {THIS_IS_BEFORE}
  \__bnvs_DEBUG_off:
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
}
\AddToHook{env/beamer@frameslide/after}{
  \bool_set_false:N \l__bnvs_in_frame_bool
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
  \__bnvs_DEBUG_on:
  \__bnvs_DEBUG:x {THIS_IS_AFTER}
  \__bnvs_DEBUG_off:
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
}
\AddToHook{cmd/frame/before}{
  \tl_set:Nn \l__bnvs_id_current_tl { ?! }
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
  \__bnvs_DEBUG_on:
  \__bnvs_DEBUG:x {THIS_IS_FRAME}
  \__bnvs_DEBUG_off:
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
}
%    \end{macrocode}
% \subsubsection{Defining named slide ranges}
%
% \begin{function}{\__bnvs_parse:Nnn}
%   \begin{syntax}
%     \cs{__bnvs_parse:Nnn} \meta{command} \marg{key} \marg{definition}
%   \end{syntax}
% Auxiliary function called within a group.
% \meta{key} is the slide range key, 
% including eventually a dotted integer path and a slide identifier,
% \meta{definition} is the corresponding definition.
% \meta{command} is \cs{__bnvs_range:nVVV} at runtime.
% \begin{variable}{\l__bnvs_match_seq}
% Local storage for the match result.
% \end{variable}
% \end{function}
%
% \begin{function}{\__bnvs_range:nnnn, \__bnvs_range:nVVV,\__bnvs_range_alt:nnnn, \__bnvs_range_alt:nVVV, \__bnvs_range:Nnnnn}
%   \begin{syntax}
%     \cs{__bnvs_range:nnnn} \marg{key} \marg{first} \marg{length} \marg{last}
%     \cs{__bnvs_range_alt:nnnn} \marg{key} \marg{first} \marg{length} \marg{last}
%     \cs{__bnvs_range:Nnnnn} \meta{cmd} \marg{key} \marg{first} \marg{length} \marg{last}
%   \end{syntax}
% Auxiliary function called within a group.
% Setup the model to define a range.
% The alt variant does not override an already existing value.
%
% Implementation detail: the core functionality is implemented in
% the auxiliary function \cs{__bnvs_range:Nnnnn} which first argument is
% \cs{__bnvs_gput:nn} for \cs{__bnvs_range:nnnn} and
% \cs{__bnvs_gprovide:nn} for \cs{__bnvs_range_alt:nnnn}.
% \end{function}
%    \begin{macrocode}
\cs_new:Npn \__bnvs_range:Nnnnn #1 #2 #3 #4 #5 {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x {\string\__bnvs_range:Nnnnn/\string#1/#2/#3/#4/#5/}
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
  \tl_if_empty:nTF { #3 } {
    \tl_if_empty:nTF { #4 } {
      \tl_if_empty:nTF { #5 } {
        \msg_error:nnn { beanoves } { :n } { Not~a~range:~:~#2 }
      } {
        #1 { #2/Z } { #5 }
      }
    } {
      #1 { #2/L } { #4 }
      \tl_if_empty:nF { #5 } {
        #1 { #2/Z } { #5 }
        #1 { #2/A } { #2.last - (#2.length) + 1 }
      }
    }
  } {
    #1 { #2/A } { #3 }
    \tl_if_empty:nTF { #4 } {
      \tl_if_empty:nF { #5 } {
        #1 { #2/Z } { #5 }
        #1 { #2/L } { #2.last - (#2.1) + 1 }
      }
    } {
      #1 { #2/L } { #4 }
      #1 { #2/Z } { #2.1 + #2.length - 1 }
    }
  }
}
\cs_new:Npn \__bnvs_range:nnnn #1 {
  \__bnvs_gclear:n { #1 }
  \__bnvs_range:Nnnnn \__bnvs_gput:nn { #1 }
}
\cs_generate_variant:Nn \__bnvs_range:nnnn { nVVV }
\cs_new:Npn \__bnvs_range_alt:nnnn #1 {
  \__bnvs_gclear_cache:n { #1 }
  \__bnvs_range:Nnnnn \__bnvs_gprovide:nn { #1 }
}
\cs_generate_variant:Nn \__bnvs_range_alt:nnnn { nVVV }
%    \end{macrocode}%
% \begin{test}[banner=range]
% \cs_set:Npn \Test #1 #2 #3 #4 #5 {
%   \__bnvs_assert_equal:xxn {\__bnvs_item:n {#1/A} } { #2 } {\cs{__bnvs_range:nnnn}~#5~A }
%   \__bnvs_assert_equal:xxn {\__bnvs_item:n {#1/L} } { #3 } {\cs{__bnvs_range:nnnn}~#5~L }
%   \__bnvs_assert_equal:xxn {\__bnvs_item:n {#1/Z} } { #4 } {\cs{__bnvs_range:nnnn}~#5~Z }
% }
% \__bnvs_range:nnnn {X} {FIRST} {} {}
% \Test { X } {FIRST} {} {} {TestB~\cs{__bnvs_range:nnnn}~X}
% \__bnvs_range:nnnn {X} {} {LENGTH} {}
% \Test { X } {} {LENGTH} {} {TestC~\cs{__bnvs_range:nnnn}~X.1}
% \__bnvs_range:nnnn {X} {} {} {LAST}
% \Test { X } {} {} {LAST} {TestC~\cs{__bnvs_range:nnnn}~X.1}
% \__bnvs_range:nnnn {X.1} {FIRST} {} {}
% \Test { X.1 } {FIRST} {} {} {TestB~\cs{__bnvs_range:nnnn}~X.1}
% \__bnvs_range:nnnn {X.1} {} {LENGTH} {}
% \Test { X.1 } {} {LENGTH} {} {TestC~\cs{__bnvs_range:nnnn}~X.1}
% \__bnvs_range:nnnn {X.1} {} {} {LAST}
% \Test { X.1 } {} {} {LAST} {TestC~\cs{__bnvs_range:nnnn}~X.1}
% \__bnvs_range:nnnn {X} {FIRST} {LENGTH} {}
% \Test { X } {FIRST} {LENGTH} {X.1+X.length-1} {\cs{__bnvs_range:nnnn}~a}
% \__bnvs_range:nnnn {X} {FIRST} {} {LAST}
% \Test { X } {FIRST} {X.last-(X.1)+1} {LAST} {\cs{__bnvs_range:nnnn}~b}
% \__bnvs_range:nnnn {X} {} {LENGTH} {LAST}
% \Test { X } {X.last-(X.length)+1} {LENGTH} {LAST} {\cs{__bnvs_range:nnnn}~c}
% \cs_set:Npn \msg_error:nnn #1 #2 #3 {
%   \cs_set:Npn \Test ##1 ##2 ##3 ##4 ##5 { }
% }
% \cs_set:Npn \Test #1 #2 #3 #4 #5 {
%   \__bnvs_assert_equal:xxn { MISSING~ERROR } {  } {\cs{__bnvs_range:nnnn}~#5~Z }
% }
% \__bnvs_range:nnnn {X} {} {} {}
% \Test { X } {} {} {} {TestA~\cs{__bnvs_range:nnnn}~X}
% \cs_set:Npn \Test #1 #2 #3 #4 #5 {
%   \__bnvs_assert_equal:xxn { MISSING~ERROR } {  } {\cs{__bnvs_range:nnnn}~#5~Z }
% }
% \__bnvs_range:nnnn {X.1} {} {} {}
% \Test { X.1 } {} {} {} {TestA~\cs{__bnvs_range:nnnn}~X.1}
% \end{test}
% \begin{function}{\__bnvs_parse:Nn}
%   \begin{syntax}
%     \cs{__bnvs_parse:Nn} \meta{command} \marg{key}
%   \end{syntax}
% Define a hidden range, for which slides are never shown.
% This is useful to conditionally show or hide a sequence of slides.
%    \begin{macrocode}
\cs_new:Npn \__bnvs_parse:Nn #1 #2 {
  \__bnvs_group_begin:
  \__bnvs_id_name_set:nNNTF { #2 } \l__bnvs_id_tl \l__bnvs_name_tl {
    \exp_args:Nx \__bnvs_gput:nn { \l__bnvs_name_tl/ } { }
    \exp_args:NNNV
    \__bnvs_group_end:
    \tl_set:Nn \l__bnvs_id_current_tl \l__bnvs_id_current_tl
  } {
    \msg_error:nnn { beanoves } { :n } { Unexpected~key:~#2 }
    \__bnvs_group_end:
  }
}
%    \end{macrocode}
% \end{function}
%
% \begin{function}{\__bnvs_do_parse:Nnn}
%   \begin{syntax}
%     \cs{__bnvs_do_parse:Nnn} \meta{command} \marg{full name}
%   \end{syntax}
% Auxiliary function for \cs{__bnvs_parse:Nn}.
% \meta{command} is \cs{__bnvs_range:nVVV} at runtime and must have
% signature |nVVV|.
% \end{function}
%    \begin{macrocode}
\cs_generate_variant:Nn \tl_if_empty:nTF { xTF }
\cs_new:Npn \__bnvs_do_parse:Nnn #1 #2 #3 {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x {\string\__bnvs_do_parse:Nnn/\string#1/#2/#3}
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
%    \end{macrocode}
% This is not a list.
%    \begin{macrocode}
  \tl_clear:N \l__bnvs_a_tl
  \tl_clear:N \l__bnvs_b_tl
  \tl_clear:N \l__bnvs_c_tl
  \regex_split:NnN \c__bnvs_colons_regex { #3 } \l__bnvs_split_seq
  \seq_pop_left:NNT \l__bnvs_split_seq \l__bnvs_a_tl {
%    \end{macrocode}
% \cs{l_a_tl} may contain the \meta{start}.
%    \begin{macrocode}
    \seq_pop_left:NNT \l__bnvs_split_seq \l__bnvs_b_tl {
      \tl_if_empty:NTF \l__bnvs_b_tl {
%    \end{macrocode}
% This is a one colon range.
%    \begin{macrocode}
        \seq_pop_left:NN \l__bnvs_split_seq \l__bnvs_b_tl
%    \end{macrocode}
% \cs{l_b_tl} may contain the \meta{length}.
%    \begin{macrocode}
        \seq_pop_left:NNT \l__bnvs_split_seq \l__bnvs_c_tl {
          \tl_if_empty:NTF \l__bnvs_c_tl {
%    \end{macrocode}
% A |::| was expected:
%    \begin{macrocode}
\msg_error:nnn { beanoves } { :n } { Invalid~range~expression(1):~#3 }
          } {
            \int_compare:nNnT { \tl_count:N \l__bnvs_c_tl } > { 1 } {
\msg_error:nnn { beanoves } { :n } { Invalid~range~expression(2):~#3 }
            }
            \seq_pop_left:NN \l__bnvs_split_seq \l__bnvs_c_tl
%    \end{macrocode}
% \cs{l_c_tl} may contain the \meta{end}.
%    \begin{macrocode}
            \seq_if_empty:NF \l__bnvs_split_seq {
\msg_error:nnn { beanoves } { :n } { Invalid~range~expression(3):~#3 }
            }
          }
        }
      } {
%    \end{macrocode}
% This is a two colon range.
%    \begin{macrocode}
        \int_compare:nNnT { \tl_count:N \l__bnvs_b_tl } > { 1 } {
\msg_error:nnn { beanoves } { :n } { Invalid~range~expression(4):~#3 }
        }
        \seq_pop_left:NN \l__bnvs_split_seq \l__bnvs_c_tl
%    \end{macrocode}
% \cs{l_c_tl} contains the \meta{end}.
%    \begin{macrocode}
        \seq_pop_left:NNTF \l__bnvs_split_seq \l__bnvs_b_tl {
          \tl_if_empty:NTF \l__bnvs_b_tl {
            \seq_pop_left:NN \l__bnvs_split_seq \l__bnvs_b_tl
%    \end{macrocode}
% \cs{l_b_tl} may contain the \meta{length}.
%    \begin{macrocode}
            \seq_if_empty:NF \l__bnvs_split_seq {
\msg_error:nnn { beanoves } { :n } { Invalid~range~expression(5):~#3 }
            }
          } {
\msg_error:nnn { beanoves } { :n } { Invalid~range~expression(6):~#3 }
          }
        } {
          \tl_clear:N \l__bnvs_b_tl
        }
      }
    }
  }
%    \end{macrocode}
% Providing both the \meta{start}, \meta{length} and \meta{end} of a range
% is not allowed, even if they happen to be consistent.
%    \begin{macrocode}
  \bool_if:nF {
    \tl_if_empty_p:N \l__bnvs_a_tl
    || \tl_if_empty_p:N \l__bnvs_b_tl
    || \tl_if_empty_p:N \l__bnvs_c_tl
  } {
\msg_error:nnn { beanoves } { :n } { Invalid~range~expression(7):~#3 }
  }
  #1 { #2 } \l__bnvs_a_tl \l__bnvs_b_tl \l__bnvs_c_tl
}
\cs_generate_variant:Nn \__bnvs_do_parse:Nnn { Nxn, Non }
%    \end{macrocode}
% \begin{test}[banner=do_parse]
% \cs_set:Npn \Test:nnnn #1 #2 #3 #4 {
% \__bnvs_DEBUG:n {Test:~do_parse/#4/#1/}
%   \__bnvs_assert_equal:xxn {\__bnvs_item:n {X/A} } {#1} {\cs{__bnvs_do_parse:Nnn}~#4-a}
%   \__bnvs_assert_equal:xxn {\__bnvs_item:n {X/L} } {#2} {\cs{__bnvs_do_parse:Nnn}~#4-b}
%   \__bnvs_assert_equal:xxn {\__bnvs_item:n {X/Z} } {#3} {\cs{__bnvs_do_parse:Nnn}~#4-c}
% }
% \__bnvs_do_parse:Nnn \__bnvs_range:nVVV {X} {A}
% \Test:nnnn {A} {} {} {1}
% \__bnvs_do_parse:Nnn \__bnvs_range:nVVV {X} {A:B}
% \Test:nnnn {A} {B} {X.1+X.length-1} {2}
% \__bnvs_do_parse:Nnn \__bnvs_range:nVVV {X} {A::C}
% \Test:nnnn {A} {X.last-(X.1)+1} {C} {3}
% \__bnvs_do_parse:Nnn \__bnvs_range:nVVV {X} {:B::C}
% \Test:nnnn {X.last-(X.length)+1} {B} {C} {4}
% \__bnvs_do_parse:Nnn \__bnvs_range:nVVV {X} {::C:B}
% \Test:nnnn {X.last-(X.length)+1} {B} {C} {5}
% {
%   \cs_set:Npn \msg_error:nnn #1 #2 #3 {
%     \cs_set:Npn \Test:nnnn ##1 ##2 ##3 ##4 { }
%   }
%   \__bnvs_do_parse:Nnn \__bnvs_range:nVVV {X} {A::C:B}
% }
% {
%   \cs_set:Npn \msg_error:nnn #1 #2 #3 {
%     \cs_set:Npn \Test:nnnn ##1 ##2 ##3 ##4 { }
%   }
%   \__bnvs_do_parse:Nnn \__bnvs_range:nVVV {X} {A:B::C}
% }
% \end{test}
% \begin{function}[TF]{\__bnvs_id_name_set:nNN}
% \begin{syntax}
% \cs{__bnvs_id_name_set:nNNTF} \marg{key} \meta{id tl var} \meta{full name tl var} \marg{ true code} \marg{ false code}
% \end{syntax}
% If the \meta{key} is a key, put the name it defines into the \meta{name tl var} with
% the current frame id prefix \cs{l__bnvs_id_tl} if none was given, then
% execute \meta{true code}.
% Otherwise execute \meta{false code}.
% \end{function}
%    \begin{macrocode}
\prg_new_conditional:Npnn \__bnvs_id_name_set:nNN #1 #2 #3 { T, F, TF } {
  \__bnvs_group_begin:
  \regex_extract_once:NnNTF \c__bnvs_A_key_Z_regex {
    #1
  } \l__bnvs_match_seq {
    \tl_set:Nx #2 { \seq_item:Nn \l__bnvs_match_seq 3 }
    \tl_if_empty:NTF #2 {
      \exp_args:NNNx
      \__bnvs_group_end:
      \tl_set:Nn #3 { \l__bnvs_id_current_tl #1 }
      \tl_set_eq:NN #2 \l__bnvs_id_current_tl
    } {
      \cs_set:Npn \:n ##1 {
        \__bnvs_group_end:
        \tl_set:Nn #2 { ##1 }
        \tl_set:Nn \l__bnvs_id_current_tl { ##1 }
      }
      \exp_args:NV
      \:n #2
      \tl_set:Nn #3 { #1 }
    }
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { \string\__bnvs_id_name_set:nNN\space TRUE/}
\__bnvs_DEBUG:x { #1/ \string#2:#2/\string#3:#3/ }
\__bnvs_DEBUG:x { \string\l__bnvs_id_current_tl:\l__bnvs_id_current_tl/ }
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
    \prg_return_true:
  } {
    \__bnvs_group_end:
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { \string\__bnvs_id_name_set:nNN\space FALSE
  /#1/\string#2/\string#3/
}
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
    \prg_return_false:
  }
}
%    \end{macrocode}
% \begin{test}[banner=__bnvs_id_name_set:nNN]
% \cs_set:Npn \Test:nnnnn #1 #2 #3 #4 #5 {
%   \banner:n { #5 }
%   \__bnvs_id_name_set:nNNTF { #1 } \l__bnvs_b_tl \l__bnvs_c_tl {
%     \tl_set:Nn \l__bnvs_a_tl { SUCCESS }
%   } {
%     \tl_set:Nn \l__bnvs_a_tl { FAILURE }
%   }
%   \tl_if_empty:nTF { #2 } {
%     \__bnvs_assert_equal:xxn { \l__bnvs_a_tl } { FAILURE } { #5-a }%   
%   } {
%     \__bnvs_assert_equal:xxn { \l__bnvs_a_tl } { SUCCESS } { #5-a }%   
%     \__bnvs_assert_equal:xxn { \l__bnvs_b_tl } { #2 } { #5-b }
%     \__bnvs_assert_equal:xxn { \l__bnvs_c_tl } { #3 } { #5-c }
%     \__bnvs_assert_equal:xxn { \l__bnvs_id_current_tl } { #4 } { #5-d }
%   }
% }
% \tl_set:Nn \l__bnvs_id_current_tl { ?! }
% \Test:nnnnn { X     } { ?! } { ?!X   } { ?! } { 1 }
% \Test:nnnnn { X.1   } { ?! } { ?!X.1 } { ?! } { 2 }
% \Test:nnnnn { F!X   } { F! } { F!X   } { F! } { 3 }
% \Test:nnnnn { X     } { F! } { F!X   } { F! } { 4 }
% \Test:nnnnn { X!X   } { X! } { X!X   } { X! } { 5 }
% \Test:nnnnn { Y!X.1 } { Y! } { Y!X.1 } { Y! } { 6 }
% \Test:nnnnn { ?!!X.1 } { } { } {  } { 7 }
% \end{test}
%    \begin{macrocode}
\cs_new:Npn \__bnvs_parse:Nnn #1 #2 #3 {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x {\string\__bnvs_parse:Nnn/\string#1/#2/#3/}
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
  \__bnvs_group_begin:
  \__bnvs_id_name_set:nNNTF { #2 } \l__bnvs_id_tl \l__bnvs_name_tl {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x {key:#2/ID:\l__bnvs_id_tl/NAME:\l__bnvs_name_tl/}
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
    \regex_extract_once:NnNTF \c__bnvs_list_regex {
      #3
    } \l__bnvs_match_seq {
%    \end{macrocode}
% This is a comma separated list, extract each item and go recursive.
%    \begin{macrocode}
      \exp_args:NNx
      \seq_set_from_clist:Nn \l__bnvs_match_seq {
        \seq_item:Nn \l__bnvs_match_seq { 2 }
      }
      \seq_map_indexed_inline:Nn \l__bnvs_match_seq {
        \__bnvs_do_parse:Nxn #1  { \l__bnvs_name_tl.##1 } { ##2 }
      }
    } {
      \__bnvs_do_parse:Nxn #1 { \l__bnvs_name_tl } { #3 }
    }
  } {
    \msg_error:nnn { beanoves } { :n } { Invalid~key:~#2 }
  }
%    \end{macrocode}
% We export \cs{l__bnvs_id_tl}:
%    \begin{macrocode}
  \exp_args:NNNV
  \__bnvs_group_end:
  \tl_set:Nn \l__bnvs_id_current_tl \l__bnvs_id_current_tl
}
%    \end{macrocode}
% \begin{test}[
%   banner=\cs{__bnvs_parse:Nnn}+\cs{__bnvs_item:n},
%   debug,
% ]
% \cs_set:Npn \Test:nnnnn #1 #2 #3 #4 #5 {
%   \__bnvs_parse:Nnn \__bnvs_range:nVVV {X} {#1}
%   \__bnvs_assert_equal:xxn {\__bnvs_item:n {?!X/A} } {#2} {#5-a}
%   \__bnvs_assert_equal:xxn {\__bnvs_item:n {?!X/L} } {#3} {#5-b}
%   \__bnvs_assert_equal:xxn {\__bnvs_item:n {?!X/Z} } {#4} {#5-c}
% }
% \Test:nnnnn {A    } {A} {} {} {1}
% \Test:nnnnn {A:B  } {A} {B} {?!X.1+?!X.length-1} {2}
% \Test:nnnnn {A::C } {A} {?!X.last-(?!X.1)+1} {C} {3}
% \Test:nnnnn {:B::C} {?!X.last-(?!X.length)+1} {B} {C} {4}
% \end{test}
% \begin{test}[
%   banner=\cs{__bnvs_parse:Nnn}+\cs{__bnvs_item:n}
% ]
% \cs_set:Npn \Test:nnnnn #1 #2 #3 #4 #5 {
%   \__bnvs_parse:Nnn \__bnvs_range:nVVV {X.1.2} {#1}
%   \__bnvs_assert_equal:xxn {\__bnvs_item:n {?!X.1.2/A} } {#2} {#5-A}
%   \__bnvs_assert_equal:xxn {\__bnvs_item:n {?!X.1.2/L} } {#3} {#5-L}
%   \__bnvs_assert_equal:xxn {\__bnvs_item:n {?!X.1.2/Z} } {#4} {#5-Z}
% }
% \Test:nnnnn {A} {A} {} {} {1}
% \Test:nnnnn {A:B} {A} {B} {?!X.1.2.1+?!X.1.2.length-1} {2}
% \Test:nnnnn {A::C} {A} {?!X.1.2.last-(?!X.1.2.1)+1} {C} {3}
% \cs_set:Npn \Test:nnnnn #1 #2 #3 #4 #5 {
%   \__bnvs_assert_equal:xxn {\__bnvs_item:n {?!X.#5/A} } {#1} {\cs{__bnvs_parse:Nnn}~#4-a}
%   \__bnvs_assert_equal:xxn {\__bnvs_item:n {?!X.#5/L} } {#2} {\cs{__bnvs_parse:Nnn}~#4-b}
%   \__bnvs_assert_equal:xxn {\__bnvs_item:n {?!X.#5/Z} } {#3} {\cs{__bnvs_parse:Nnn}~#4-c}
% }
% \__bnvs_parse:Nnn \__bnvs_range:nVVV {X.3} {[A,A:B,A::C,:B::C,::C:B]}
% \Test:nnnnn {A} {} {} {4-1} {3.1}
% \Test:nnnnn {A} {B} {?!X.3.2.1+?!X.3.2.length-1} {4-2} {3.2}
% \Test:nnnnn {A} {?!X.3.3.last-(?!X.3.3.1)+1} {C} {4-3} {3.3}
% \Test:nnnnn {?!X.3.4.last-(?!X.3.4.length)+1} {B} {C} {4-4} {3.4}
% \Test:nnnnn {?!X.3.5.last-(?!X.3.5.length)+1} {B} {C} {4-5} {3.5}
% \end{test}
%
% \begin{function}{\Beanoves}
%   \begin{syntax}
%     \cs{Beanoves} \marg{key--value list}
%   \end{syntax}
%   The keys are the slide range specifiers.
% When no value is provided, it defaults to |1|.
% On the contrary, \meta{key--value} items are parsed by \cs{__bnvs_parse:Nnn}.
%    \begin{macrocode}
\NewDocumentCommand \Beanoves { sm } {
  \tl_if_eq:NnT \@currenvir { document } {
    \__bnvs_gclear:
  }
  \IfBooleanTF {#1} {
    \keyval_parse:nnn {
      \__bnvs_parse:Nn \__bnvs_range_alt:nVVV
    } {
      \__bnvs_parse:Nnn \__bnvs_range_alt:nVVV
    }
  } {
    \keyval_parse:nnn {
      \__bnvs_parse:Nn \__bnvs_range:nVVV
    } {
      \__bnvs_parse:Nnn \__bnvs_range:nVVV
    }
  }
  { #2 }
  \ignorespaces
}
%    \end{macrocode}
% If we use the frame \texttt{beanoves} option, we can provide default values
% to the various name ranges.
%    \begin{macrocode}
\define@key{beamerframe}{beanoves}{\Beanoves*{#1}}
%    \end{macrocode}
% \end{function}
% \subsubsection{Scanning named overlay specifications}
% Patch some beamer commands to support |?(...)| instructions in overlay specifications.
% \begin{function}{\beamer@frame, \beamer@masterdecode}
% \begin{syntax}
% \cs{beamer@frame} \marg{overlay specification}
% \cs{beamer@masterdecode} \marg{overlay specification}
% \end{syntax}
% Preprocess \meta{overlay specification} before \pkg{beamer} reads it.
% \begin{variable}{\l__bnvs_ans_tl}
%   Storage for the translated overlay specification, where |?(...)| instructions are replaced by their static counterparts.
% \end{variable}
% \end{function}
% Save the original macro \cs{beamer@masterdecode} and then override it
% to properly preprocess the argument.
%    \begin{macrocode}
\cs_set_eq:NN \__bnvs_beamer@frame \beamer@frame
\cs_set:Npn \beamer@frame < #1 > {
  \__bnvs_group_begin:
  \tl_clear:N \l__bnvs_ans_tl
  \__bnvs_scan:nNN { #1 } \__bnvs_eval:nN \l__bnvs_ans_tl
  \exp_args:NNNV
  \__bnvs_group_end:
  \__bnvs_beamer@frame < \l__bnvs_ans_tl >
}
\cs_set_eq:NN \__bnvs_beamer@masterdecode \beamer@masterdecode
\cs_set:Npn \beamer@masterdecode #1 {
  \__bnvs_group_begin:
  \tl_clear:N \l__bnvs_ans_tl
  \__bnvs_scan:nNN { #1 } \__bnvs_eval:nN \l__bnvs_ans_tl
  \exp_args:NNV
  \__bnvs_group_end:
  \__bnvs_beamer@masterdecode \l__bnvs_ans_tl
}
%    \end{macrocode}
% \begin{function}{\__bnvs_scan:nNN}
% \begin{syntax}
% \cs{__bnvs_scan:nNN} \marg{named overlay expression} \meta{eval} \meta{tl variable}
% \end{syntax}
% Scan the \meta{named overlay expression} argument and feed the \meta{tl variable} replacing |?(...)| instructions by their static counterpart
% with help from the \meta{eval} function, which is \cs{__bnvs_eval:nN}.
% A group is created to use local variables:
% \begin{variable}{\l__bnvs_ans_tl}
% The token list that will be appended to \meta{tl variable} on return.
% \end{variable}
% \begin{variable}{\l__bnvs_depth_int}
% Store the depth level in parenthesis grouping used when finding
%     the proper closing parenthesis balancing the opening parenthesis that
%     follows immediately a question mark in a \texttt{?(...)} instruction.
% \end{variable}
% \begin{variable}{\l__bnvs_query_tl}
% Storage for the overlay query expression to be evaluated.
% \end{variable}
% \begin{variable}{\l__bnvs_token_seq}
% The \meta{overlay expression} is split into the sequence of its tokens.
% \end{variable}
% \begin{variable}{\l__bnvs_token_tl}
% Storage for just one token.
% \end{variable}
% \end{function}
%    \begin{macrocode}
\cs_new:Npn \__bnvs_scan:nNN #1 #2 #3 {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { \string\__bnvs_scan:nNN }
\__bnvs_DEBUG:x { #1 / }
\__bnvs_DEBUG:x { \string#2 / }
\__bnvs_DEBUG:x { \string#3 / }
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
  \__bnvs_group_begin:
  \tl_clear:N \l__bnvs_ans_tl
  \seq_clear:N \l__bnvs_token_seq
%    \end{macrocode}
% Explode the \meta{named overlay expression} into a list of tokens:
%    \begin{macrocode}
  \regex_split:nnN {} { #1 } \l__bnvs_token_seq
%    \end{macrocode}
% \begin{function}{\scan_question:}
% \begin{syntax}
% \cs{scan_question:}
% \end{syntax}
% At top level state, scan the tokens of the
% \meta{named overlay expression} looking for a `|?|' character.
% \end{function}
%    \begin{macrocode}
  \cs_set:Npn \scan_question: {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { \string\scan_question: }
\__bnvs_DEBUG:x { \string\l__bnvs_ans_tl :~\l__bnvs_ans_tl / }
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
    \seq_pop_left:NNT \l__bnvs_token_seq \l__bnvs_token_tl {
      \tl_if_eq:NnTF \l__bnvs_token_tl { ? } {
        \require_open:
      } {
        \tl_put_right:NV \l__bnvs_ans_tl \l__bnvs_token_tl
        \scan_question:
      }
    }
  }
%    \end{macrocode}
% \begin{function}{\require_open:}
% \begin{syntax}
% \cs{require_open:}
% \end{syntax}
% We just found a `|?|',
% we first gobble tokens until the next `|(|', ^^A ---)
% whatever they may be. In general, no tokens should be silently ignored.
% \end{function}
%    \begin{macrocode}
  \cs_set:Npn \require_open: {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { \string\require_open: }
\__bnvs_DEBUG:x { \string\l__bnvs_ans_tl :~\l__bnvs_ans_tl/}
%</!gubed>
% \end{gobble}
% Get next token.
%    \begin{macrocode}
    \seq_pop_left:NNTF \l__bnvs_token_seq \l__bnvs_token_tl {
      \tl_if_eq:NnTF \l__bnvs_token_tl { ( %)
      } {
%    \end{macrocode}
% We found the `|(|` after the `|?|'. ^^A---)
% Set the parenthesis depth to 1 (on first passage).
%    \begin{macrocode}
        \int_set:Nn \l__bnvs_depth_int { 1 }
%    \end{macrocode}
% Record the forthcomming content in
% the \cs{l__bnvs_query_tl} variable, ^^A(---
% up to the next balancing `|)|`.
%    \begin{macrocode}
        \tl_clear:N \l__bnvs_query_tl
        \require_close:
      } {
%    \end{macrocode}
% Ignore this token and loop.
%    \begin{macrocode}
        \require_open:
      }
    } {
%    \end{macrocode}
% End reached but no opening parenthesis found, raise.
%    \begin{macrocode}
      \msg_fatal:nnx { beanoves } { :n } {Missing~'('%---)
        ~after~a~?:~#1}
    }
  }
%    \end{macrocode}
% \begin{function}{\require_close:}
% \begin{syntax}
% \cs{require_close:}
% \end{syntax}
% We found a `|?(|', we record the forthcomming content in the \cs{l__bnvs_query_tl} variable,
% up to the next balancing `|)|`.
% \end{function}
%    \begin{macrocode}
  \cs_set:Npn \require_close: {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { \string\require_close: }
\__bnvs_DEBUG:x { \string\l__bnvs_query_tl :~\l__bnvs_query_tl/}
%</!gubed>
% \end{gobble}
% Get next token.
%    \begin{macrocode}
    \seq_pop_left:NNTF \l__bnvs_token_seq \l__bnvs_token_tl {
      \tl_if_eq:NnTF \l__bnvs_token_tl { ( %---)
      } {
%    \end{macrocode}
% We found a `|(|', ^^A---)
% increment the depth and append the token to \cs{l__bnvs_query_tl},
% then scan again for a^^A---(
% |)|.
%    \begin{macrocode}
        \int_incr:N \l__bnvs_depth_int
        \tl_put_right:NV \l__bnvs_query_tl \l__bnvs_token_tl
        \require_close:
      } {
%    \end{macrocode}
% This is not a `|(|'.^^A---)
%    \begin{macrocode}
        \tl_if_eq:NnTF \l__bnvs_token_tl { %(---
          )
        } {
%    \end{macrocode}
% We found a  ^^A(---
% `|)|', we decrement and test the depth.
%    \begin{macrocode}
          \int_decr:N \l__bnvs_depth_int
          \int_compare:nNnTF \l__bnvs_depth_int = 0 {
%    \end{macrocode}
% The depth level has reached 0: we found our balancing parenthesis
% of the |?(...)| instruction.
% We can append the evaluated slide ranges token list to \cs{l_ans_tl}
% and look for the next |?|.
%    \begin{macrocode}
            \exp_args:NV #2 \l__bnvs_query_tl \l__bnvs_ans_tl
            \scan_question:
          } {
%    \end{macrocode}
% The depth has not yet reached level 0. ^^A(---
% We append the `|)|' to \cs{l__bnvs_query_tl} because it is not yet the
% end of sequence marker.
%    \begin{macrocode}
            \tl_put_right:NV \l__bnvs_query_tl \l__bnvs_token_tl
            \require_close:
          }
        } {
%    \end{macrocode}
% The scanned token is not a `|(|' nor a `|)|',
% we append it as is to \cs{l__bnvs_query_tl}
% and look for a^^A(---
% |)|.
%    \begin{macrocode}
          \tl_put_right:NV \l__bnvs_query_tl \l__bnvs_token_tl
          \require_close:
        }
      }
    } {
%    \end{macrocode}
% Above ends the code for Not a  `|(|'^^A---)
% We reached the end of the sequence and the token list with no closing ^^A(---
% `|)|'.
% We raise and terminate.
% As recovery we feed \cs{l__bnvs_query_tl} with the missing ^^A(---
% `|)|'.
%    \begin{macrocode}
      \msg_error:nnx { beanoves } { :n } {Missing~%(---
        `)':~#1 }
      \tl_put_right:Nx \l__bnvs_query_tl {
        \prg_replicate:nn { \l__bnvs_depth_int } {%(---
        )}
      }
      \exp_args:NV #2 \l__bnvs_query_tl \l__bnvs_ans_tl
    }
  }
%    \end{macrocode}
% Run the top level loop to scan for a `|?|':
%    \begin{macrocode}
  \scan_question:
  \exp_args:NNNV
  \__bnvs_group_end:
  \tl_put_right:Nn #3 \l__bnvs_ans_tl
}
%    \end{macrocode}
% \begin{test}[banner=scan]
% \cs_set:Npn \eval:nN #1 #2 {
%   \tl_put_right:Nn #2 { !(#1) }
% }
% \tl_clear:N \l__bnvs_a_tl
% \__bnvs_scan:nNN {1+1} \eval:nN \l__bnvs_a_tl
% \__bnvs_scan:nNN {?(A)} \eval:nN \l__bnvs_a_tl
% \cs_set:Npn \Test:nnn #1 #2 #3 {
% \__bnvs_DEBUG:n { Test:~scan/#3/#1/}
%   \tl_clear:N \l__bnvs_a_tl
%   \__bnvs_scan:nNN { #1 } \eval:nN \l__bnvs_a_tl
%   \exp_args:NV
%   \__bnvs_assert_equal:nnn \l__bnvs_a_tl { #2 } {
%     Test~\cs{__bnvs_scan:nNN}~#3
%   }
% }
% \Test:nnn {} {} {1}
% \Test:nnn {1+1} {1+1} {2}
% \Test:nnn {1?(+)1} {1!(+)1} {3}
% \Test:nnn {1?(+((X)(X))-)1} {1!(+((X)(X))-)1} {4}
% \end{test}I
%
% \subsubsection{Resolution}
%
% Given a frame id, a name and an integer path,
% we resolve any intermediate standalone reference.
% For example, with |A=B| and |B=C|, |A| is resolved in |C|.
% But with |A=B+1| and |B=C|, |A| is not resolved in |C+1|.
% With |A=B:D| and |B=C|, |A| is not resolved in |C:D| as well.
% \begin{function}[TF]{\__bnvs_extract_key:NNN}
% \begin{syntax}
% \cs{__bnvs_extract_key:NNNTF} \meta{id tl var} \meta{name tl var} \meta{path seq var} \marg{true code} \marg{false code}
% \end{syntax}
% Auxiliary function. \meta{id tl var} contains a frame id whereas
% \meta{name tl var} contains a range name.
% If we recognize a key, on return,
% \meta{name tl var} contains the resolved name,
% \meta{path seq var} is prepended with new integer path components,
% \marg{true code} is executed, otherwise \marg{false code} is executed.
% \end{function}
%    \begin{macrocode}
\exp_args_generate:n { VVx }
\prg_new_conditional:Npnn \__bnvs_extract_key:NNN
    #1 #2 #3 { T, F, TF } {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { \string\__bnvs_extract_key:NNN/
    \string#1:#1/\string#2:#2/\string#3:\seq_use:Nn#3./
}
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
  \__bnvs_group_begin:
  \exp_args:NNV
  \regex_extract_once:NnNTF \c__bnvs_A_key_Z_regex #2 \l__bnvs_match_seq {
%    \end{macrocode}
% This is a correct key, update the path sequence accordingly
%    \begin{macrocode}
    \exp_args:Nx
    \tl_if_empty:nT { \seq_item:Nn \l__bnvs_match_seq 3 } {
      \tl_put_left:NV #2 { #1 }
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { VERIF~\tl_to_str:V #2 }
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
    }
    \exp_args:NNnx
    \seq_set_split:Nnn \l__bnvs_split_seq . {
      \seq_item:Nn \l__bnvs_match_seq 4
    }
    \seq_remove_all:Nn \l__bnvs_split_seq { }
    \seq_pop_left:NN \l__bnvs_split_seq \l__bnvs_a_tl
    \seq_if_empty:NTF \l__bnvs_split_seq {
%    \end{macrocode}
% No new integer path component is added.
%    \begin{macrocode}
      \cs_set:Npn \:nn ##1 ##2 {
        \__bnvs_group_end:
        \tl_set:Nn #1 { ##1 }
        \tl_set:Nn #2 { ##2 }
      }
      \exp_args:NVV \:nn #1 #2
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { END/\string#1:#1/\string#2:#2/ }
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
    } {
%    \end{macrocode}
% Some new integer path components 	are added.
%    \begin{macrocode}
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { \string\__bnvs_extract_key:NNN/\string#1:#1/
  \string#2:#2/\string#3:\seq_use:Nn#3./
  \string\l__bnvs_split_seq:\seq_use:Nn\l__bnvs_split_seq./
}
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
      \cs_set:Npn \:nnn ##1 ##2 ##3 {
        \__bnvs_group_end:
        \tl_set:Nn #1 { ##1 }
        \tl_set:Nn #2 { ##2 }
        \seq_set_split:Nnn #3 . { ##3 }
        \seq_remove_all:Nn #3 { }
      }
      \exp_args:NVVx
      \:nnn #1 #2 {
        \seq_use:Nn \l__bnvs_split_seq . . \seq_use:Nn #3 .
      }
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { END/\string#1:#1/\string#2:#2/
  \string#3:\seq_use:Nn #3 . /
  \string\l__bnvs_split_seq:\seq_use:Nn \l__bnvs_split_seq . /
}
%</!gubed>
% \end{gobble}
%    \begin{macrocode}%</!gubed>
% \end{gobble}
%    \begin{macrocode}
    }
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { \string\__bnvs_extract_key:NNN\space TRUE/
  \string#1:#1/\string#2:#2/\string#3:\seq_use:Nn #3 . /
}
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
    \prg_return_true:
  } {
    \__bnvs_group_end:
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { \string\__bnvs_extract_key:NNN\space FALSE/
  \string#1/\string#2/\string#3/
}
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
    \prg_return_false:
  }
}
%    \end{macrocode}
% \begin{function}[TF]{\__bnvs_resolve:NNN}
% \begin{syntax}
% \cs{__bnvs_resolve:NNNTF} \meta{id tl var} \meta{name tl var} \meta{path seq var} \marg{true code} \marg{false code}
% \end{syntax}
% When too many nested calls occurred, \marg{false code} is executed directly.
% \meta{id tl var}, \meta{name tl var} and \meta{path seq var}
% are meant to contain proper information.
% On input, \marg{id tl var} contains a frame id, 
% \marg{name tl var} contains a range name and
% \marg{path seq var} contains the components of an integer path, possibly empty.
% On return, \meta{id tl var} contains the frame id used,
% \meta{name tl var} contains the resolved range name and
% \meta{path seq var} contains the sequence of integer path components that could not be resolved.
% To resolve a path,
% \meta{name_0}.\meta{i_1}.\meta{i_2}...\meta{i_n} is turned into
% \meta{name_1}.\meta{i_2}...\meta{i_n}
% where \meta{name_0}.\meta{i_1} is \meta{name_1},
% then \meta{name_2}.\meta{i_3}...\meta{i_n}
% where \meta{name_1}.\meta{i_2} is \meta{name_2}...
% If the above rule does not apply,
% \meta{name_0}.\meta{i_1}.\meta{i_2}...\meta{i_n} may turn into
% \meta{name_2}.\meta{i_3}...\meta{i_n}
% when \meta{name_0}.\meta{i_1}.\meta{i_2} is \meta{name_2}...
% The algorithm is not yet more clever.
% The resolution algorithm is quite straightforward:
% \begin{enumerate}
% \item If \meta{name tl var} content is the name of an unlimited range,
% and the first item of this range is exactly another name range with
% eventually a heading frame identifier or a trailing integer path,
% then \meta{name tl var} is replaced by this name, the \meta{id tl var}
% and \cs{l__bnvs_id_tl} are updates accordingly and
% the \meta{path seq var} is prepended with the integer path.
% \item If \meta{path seq var} is not empty,
% append to the right of \meta{name tl var} after a separating dot,
% all its left elements but the last one  and loop.
% Otherwise return.
% None of the tl variables must be one of \cs{l_a_tl}, \cs{l_b_tl} or \cs{l_c_tl}.
% None of the seq variables must be one of \cs{l_a_seq}, \cs{l_b_seq}.
% \end{enumerate}
% \end{function}
%    \begin{macrocode}
\prg_new_conditional:Npnn \__bnvs_resolve:NNN
    #1 #2 #3 { T, F, TF } {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { \string\__bnvs_resolve:NNN/
  \string#1:#1/\string#2:#2/\string#3:\seq_use:Nn #3./
}
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
  \__bnvs_group_begin:
%    \end{macrocode}
% Local variables:
% \begin{itemize}
% \item \cs{l_a_tl} contains the name with a partial index path currently resolved.
% \item \cs{l_a_seq} contains the index path components currently resolved.
% \item \cs{l_b_tl} contains the resolution.
% \item \cs{l_b_seq} contains the index path components to be resolved.
% \end{itemize}
%    \begin{macrocode}
  \seq_set_eq:NN \l__bnvs_a_seq #3
  \seq_clear:N \l__bnvs_b_seq
  \cs_set:Npn \loop: {
    \__bnvs_call:TF {
      \tl_set_eq:NN \l__bnvs_a_tl #2
      \seq_if_empty:NTF \l__bnvs_a_seq {
        \exp_args:Nx
        \__bnvs_get:nNTF { \l__bnvs_a_tl / L } \l__bnvs_b_tl {
          \cs_set:Nn \loop: { \return_true: }        
        } {
          \get_extract:F {
%    \end{macrocode}
% Unknown key \meta{\cs{l_a_tl}}|/A| or
% the value for key \meta{\cs{l_a_tl}}|/A| does not fit.
%    \begin{macrocode}
            \cs_set:Nn \loop: { \return_true: }
          }
        }
      } {
        \tl_put_right:Nx \l__bnvs_a_tl { . \seq_use:Nn \l__bnvs_a_seq . }
        \get_extract:F {
          \seq_pop_right:NNT \l__bnvs_a_seq \l__bnvs_c_tl {
            \seq_put_left:NV \l__bnvs_b_seq \l__bnvs_c_tl
          }
        }
      }
      \loop:
    } {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { \string\__bnvs_resolve:NNN\space~TOO~MANY~CALLS/
  \string#1:#1/\string#2:#2/\string#3:\seq_use:Nn #3./
}
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
      \__bnvs_group_end:
      \prg_return_false:
    }
  }
  \cs_set:Npn \get_extract:F ##1 {
    \exp_args:Nx
    \__bnvs_get:nNTF { \l__bnvs_a_tl / A } \l__bnvs_b_tl {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { RESOLUTION:~\l__bnvs_a_tl / A=>\l__bnvs_b_tl}
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
      \__bnvs_extract_key:NNNTF #1 \l__bnvs_b_tl \l__bnvs_b_seq {
        \tl_set_eq:NN #2 \l__bnvs_b_tl
        \seq_set_eq:NN #3 \l__bnvs_b_seq
        \seq_set_eq:NN \l__bnvs_a_seq \l__bnvs_b_seq
        \seq_clear:N \l__bnvs_b_seq
      } { ##1 }
    } { ##1 }
  }
  \cs_set:Npn \return_true: {
    \cs_set:Npn \:nnn ####1 ####2 ####3 {
      \__bnvs_group_end:
      \tl_set:Nn #1 { ####1 }
      \tl_set:Nn #2 { ####2 }
      \seq_set_split:Nnn #3 . { ####3 }
      \seq_remove_all:Nn #3 { }
    }
    \exp_args:NVVx
    \:nnn #1 #2 {
      \seq_use:Nn #3 .
    }
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { ...\string\__bnvs_resolve:NNN\space TRUE/
  \string#1:#1/\string#2:#2/\string#3:\seq_use:Nn #3./
}
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
    \prg_return_true:
  }
  \loop:
}
%    \end{macrocode}
% \begin{test}[banner=\string\__bnvs_resolve:NNNTF]
% \Test_resolve:nnnnnn { X } { X } { } { X } { } { 1A }
% \Test_resolve:nnnnnn { X } { X } { 1 } { X } { 1 } { 2A }
% \Test_resolve:nnnnnn { X } { X } { 1.2.3 } { X } { 1.2.3 } { 3A }
% \Test_resolve:nnnnnn { X=Y,Y } { X } { } { Y } { } { 1B }
% \Test_resolve:nnnnnn { X=Y,Y } { X } { 1.2.3 } { Y } { 1.2.3 } { 2B }
% \Test_resolve:nnnnnn { X=Y,Y=Z, Z } { X } { } { Z } { } { 3B }
% \Test_resolve:nnnnnn { X=Y,Y=Z, Z } { X } { 1.2.3 } { Z } { 1.2.3 } { 4B }
% \Test_resolve:nnnnnn { X.1=Y } { X } { 1 } { Y } { } { 1C }
% \Test_resolve:nnnnnn { X.1.2=Y } { X } { 1.2 } { Y } { } { 2C }
% \Test_resolve:nnnnnn { X.1=Y } { X } { 1.2 } { Y } { 2 } { 3C }
% \Test_resolve:nnnnnn { X.1=Y } { X } { 1.2.3 } { Y } { 2.3 } { 4C }
% \Test_resolve:nnnnnn { X.1.2=Y } { X } { 1.2.3 } { Y } { 3 } { 5C }
% \Test_resolve:nnnnnn { X.1.2=Y } { X } { 1.2.3.4 } { Y } { 3.4 } { 6C }
% \Test_resolve:nnnnnn { X=Y, Y.1.2.3.4=Z } { X } { 1.2.3.4 } { Z } { } { 7A }
% \Test_resolve:nnnnnn { X=Y, Y.1.2.3=Z } { X } { 1.2.3.4 } { Z } { 4 } { 7B }
% \Test_resolve:nnnnnn { X=Y, Y.1.2=Z } { X } { 1.2.3.4 } { Z } { 3.4 } { 7C }
% \Test_resolve:nnnnnn { X=Y, Y.1=Z } { X } { 1.2.3.4 } { Z } { 2.3.4 } { 7D }
% \Test_resolve:nnnnnn { X=Y, Y=Z } { X } { 1.2.3.4 } { Z } { 1.2.3.4 } { 7D }
% \Test_resolve:nnnnnn { X.1=Y, Y.2.3.4=Z } { X } { 1.2.3.4 } { Z } { } { 7E }
% \Test_resolve:nnnnnn { X.1=Y, Y.2.3=Z } { X } { 1.2.3.4 } { Z } { 4 } { 7F }
% \Test_resolve:nnnnnn { X.1=Y, Y.2=Z } { X } { 1.2.3.4 } { Z } { 3.4 } { 7G }
% \Test_resolve:nnnnnn { X.1=Y, Y=Z } { X } { 1.2.3.4 } { Z } { 2.3.4 } { 7H }
% \Test_resolve:nnnnnn { X.1.2=Y, Y.3.4=Z } { X } { 1.2.3.4 } { Z } { } { 7I }
% \Test_resolve:nnnnnn { X.1.2=Y, Y.3=Z } { X } { 1.2.3.4 } { Z } { 4 } { 7J }
% \Test_resolve:nnnnnn { X.1.2=Y, Y=Z } { X } { 1.2.3.4 } { Z } { 3.4 } { 7K }
% \Test_resolve:nnnnnn { X.1.2.3=Y, X.1.2=Z } { X } { 1.2.3.4 } { Y } { 4 } { 8A }
% \end{test}
% \begin{function}[TF]{\__bnvs_resolve_n:NNNTF}
% \begin{syntax}
% \cs{__bnvs_resolve_n:NNNTF} \meta{id tl var} \meta{name tl var} \meta{path seq var} \marg{ true code} \marg { false code }
% \end{syntax}
% The difference with the function above without |_n| is that resolution
% is performed only when there is an integer path afterwards
% \end{function}
%    \begin{macrocode}
\prg_new_conditional:Npnn \__bnvs_resolve_n:NNN
    #1 #2 #3 { T, F, TF } {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { \string\__bnvs_resolve_n:NNN/
  \string#1:#1/\string#2:#2/\string#3:\seq_use:Nn #3./
}
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
  \__bnvs_group_begin:
%    \end{macrocode}
% Local variables:
% \begin{itemize}
% \item \cs{l_a_tl} contains the name with a partial index path currently resolved.
% \item \cs{l_a_seq} contains the index path components currently resolved.
% \item \cs{l_b_tl} contains the resolution.
% \item \cs{l_b_seq} contains the index path components to be resolved.
% \end{itemize}
%    \begin{macrocode}
  \seq_set_eq:NN \l__bnvs_a_seq #3
  \seq_clear:N \l__bnvs_b_seq
  \cs_set:Npn \loop: {
    \__bnvs_call:TF {
      \tl_set_eq:NN \l__bnvs_a_tl #2
      \seq_if_empty:NTF \l__bnvs_a_seq {
        \exp_args:Nx
        \__bnvs_get:nNTF { \l__bnvs_a_tl / L } \l__bnvs_b_tl {
          \cs_set:Nn \loop: { \return_true: }        
        } {
          \seq_if_empty:NTF \l__bnvs_b_seq {
            \cs_set:Nn \loop: { \return_true: }        
          } {
            \get_extract:F {
%    \end{macrocode}
% Unknown key \meta{\cs{l_a_tl}}|/A| or
% the value for key \meta{\cs{l_a_tl}}|/A| does not fit.
%    \begin{macrocode}
              \cs_set:Nn \loop: { \return_true: }
            }
          }
        }
      } {
        \tl_put_right:Nx \l__bnvs_a_tl { . \seq_use:Nn \l__bnvs_a_seq . }
        \get_extract:F {
          \seq_pop_right:NNT \l__bnvs_a_seq \l__bnvs_c_tl {
            \seq_put_left:NV \l__bnvs_b_seq \l__bnvs_c_tl
          }
        }
      }
      \loop:
    } {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { \string\__bnvs_resolve_n:NNN\space~TOO~MANY~CALLS/
  \string#1:#1/\string#2:#2/\string#3:\seq_use:Nn #3./
}
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
      \__bnvs_group_end:
      \prg_return_false:
    }
  }
  \cs_set:Npn \get_extract:F ##1 {
    \exp_args:Nx
    \__bnvs_get:nNTF { \l__bnvs_a_tl / A } \l__bnvs_b_tl {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { RESOLUTION:~\l__bnvs_a_tl / A=>\l__bnvs_b_tl}
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
      \__bnvs_extract_key:NNNTF #1 \l__bnvs_b_tl \l__bnvs_b_seq {
        \tl_set_eq:NN #2 \l__bnvs_b_tl
        \seq_set_eq:NN #3 \l__bnvs_b_seq
        \seq_set_eq:NN \l__bnvs_a_seq \l__bnvs_b_seq
        \seq_clear:N \l__bnvs_b_seq
      } { ##1 }
    } { ##1 }
  }
  \cs_set:Npn \return_true: {
    \cs_set:Npn \:nnn ####1 ####2 ####3 {
      \__bnvs_group_end:
      \tl_set:Nn #1 { ####1 }
      \tl_set:Nn #2 { ####2 }
      \seq_set_split:Nnn #3 . { ####3 }
      \seq_remove_all:Nn #3 { }
    }
    \exp_args:NVVx
    \:nnn #1 #2 {
      \seq_use:Nn #3 .
    }
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { ...\string\__bnvs_resolve_n:NNN\space TRUE/
  \string#1:#1/\string#2:#2/\string#3:\seq_use:Nn #3./
}
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
    \prg_return_true:
  }
  \loop:
}
%    \end{macrocode}
% \begin{test}[banner=\string\__bnvs_resolve_n:NNNTF]
% \Test_resolve_n:nnnnnn { X } { X } { } { X } { } { 1A }
% \Test_resolve_n:nnnnnn { X } { X } { 1 } { X } { 1 } { 2A }
% \Test_resolve_n:nnnnnn { X } { X } { 1.2.3 } { X } { 1.2.3 } { 3A }
% \Test_resolve_n:nnnnnn { X=Y,Y } { X } { } { X } { } { 1B }
% \Test_resolve_n:nnnnnn { X=Y,Y } { X } { 1.2.3 } { Y } { 1.2.3 } { 2B }
% \Test_resolve_n:nnnnnn { X=Y,Y=Z, Z } { X } { } { X } { } { 3B }
% \Test_resolve_n:nnnnnn { X=Y,Y=Z, Z } { X } { 1.2.3 } { Z } { 1.2.3 } { 4B }
% \Test_resolve_n:nnnnnn { X.1=Y } { X } { 1 } { Y } { } { 1C }
% \Test_resolve_n:nnnnnn { X.1.2=Y } { X } { 1.2 } { Y } { } { 2C }
% \Test_resolve_n:nnnnnn { X.1=Y } { X } { 1.2 } { Y } { 2 } { 3C }
% \Test_resolve_n:nnnnnn { X.1=Y } { X } { 1.2.3 } { Y } { 2.3 } { 4C }
% \Test_resolve_n:nnnnnn { X.1.2=Y } { X } { 1.2.3 } { Y } { 3 } { 5C }
% \Test_resolve_n:nnnnnn { X.1.2=Y } { X } { 1.2.3.4 } { Y } { 3.4 } { 6C }
% \Test_resolve_n:nnnnnn { X=Y, Y.1.2.3.4=Z } { X } { 1.2.3.4 } { Z } { } { 7A }
% \Test_resolve_n:nnnnnn { X=Y, Y.1.2.3=Z } { X } { 1.2.3.4 } { Z } { 4 } { 7B }
% \Test_resolve_n:nnnnnn { X=Y, Y.1.2=Z } { X } { 1.2.3.4 } { Z } { 3.4 } { 7C }
% \Test_resolve_n:nnnnnn { X=Y, Y.1=Z } { X } { 1.2.3.4 } { Z } { 2.3.4 } { 7D }
% \Test_resolve_n:nnnnnn { X=Y, Y=Z } { X } { 1.2.3.4 } { Z } { 1.2.3.4 } { 7D }
% \Test_resolve_n:nnnnnn { X.1=Y, Y.2.3.4=Z } { X } { 1.2.3.4 } { Z } { } { 7E }
% \Test_resolve_n:nnnnnn { X.1=Y, Y.2.3=Z } { X } { 1.2.3.4 } { Z } { 4 } { 7F }
% \Test_resolve_n:nnnnnn { X.1=Y, Y.2=Z } { X } { 1.2.3.4 } { Z } { 3.4 } { 7G }
% \Test_resolve_n:nnnnnn { X.1=Y, Y=Z } { X } { 1.2.3.4 } { Z } { 2.3.4 } { 7H }
% \Test_resolve_n:nnnnnn { X.1.2=Y, Y.3.4=Z } { X } { 1.2.3.4 } { Z } { } { 7I }
% \Test_resolve_n:nnnnnn { X.1.2=Y, Y.3=Z } { X } { 1.2.3.4 } { Z } { 4 } { 7J }
% \Test_resolve_n:nnnnnn { X.1.2=Y, Y=Z } { X } { 1.2.3.4 } { Z } { 3.4 } { 7K }
% \Test_resolve_n:nnnnnn { X.1.2.3=Y, X.1.2=Z } { X } { 1.2.3.4 } { Y } { 4 } { 8A }
% \end{test}
% \begin{function}[TF]{\__bnvs_resolve:NNNNTF}
% \begin{syntax}
% \cs{__bnvs_resolve:NNNNTF} \meta{cs:nn} \meta{id tl var} \meta{name tl var} \meta{path seq var} \marg{ true code} \marg { false code }
% \end{syntax}
% When too many nested calls occurred, \marg{false code} is executed directly.
% \meta{id tl var}, \meta{name tl var} and \meta{path seq var}
% are meant to contain proper information.
% To resolve a path,
% \meta{name_0}.\meta{i_1}.\meta{i_2}...\meta{i_n} is turned into
% \meta{name_1}.\meta{i_2}...\meta{i_n}
% where \meta{name_0}.\meta{i_1} is \meta{name_1},
% then \meta{name_2}.\meta{i_3}...\meta{i_n}
% where \meta{name_1}.\meta{i_2} is \meta{name_2}...
% If the above rule does not apply,
% \meta{name_0}.\meta{i_1}.\meta{i_2}...\meta{i_n} may turn into
% \meta{name_2}.\meta{i_3}...\meta{i_n}
% when \meta{name_0}.\meta{i_1}.\meta{i_2} is \meta{name_2}...
% We try to match the longest sequence of components first.
% The algorithm is not yet more clever.
% In general, \meta{cs:nn} is just \cs{use_i:nn} but for in place
% incrementation, we must resolve only when there is an integer path.
% See the implementation of the \cs{__bnvs_if_append:...} conditionals.
% \end{function}
%    \begin{macrocode}
\prg_new_conditional:Npnn \__bnvs_resolve:NNNN
    #1 #2 #3 #4 { T, F, TF } {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { \string\__bnvs_resolve:NNNN / }
\__bnvs_DEBUG:x { \string#1 / \string#2:#2/\string#3:#3 / }
\__bnvs_DEBUG:x { \string#4 : \seq_use:Nn #4 . / }
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
  #1 {
    \__bnvs_group_begin:
%    \end{macrocode}
% \cs{l_a_tl} contains the name with a partial index path currently resolved.
% \cs{l_a_seq} contains the remaining index path components to be resolved.
% \cs{l_b_seq} contains the current index path components to be resolved.
%    \begin{macrocode}
    \tl_set_eq:NN \l__bnvs_a_tl #3
    \seq_set_eq:NN \l__bnvs_a_seq #4
    \tl_clear:N \l__bnvs_b_tl
    \seq_clear:N \l__bnvs_b_seq
    \cs_set:Npn \return_true: {
      \cs_set:Npn \:nnn ####1 ####2 ####3 {
        \__bnvs_group_end:
        \tl_set:Nn #2 { ####1 }
        \tl_set:Nn #3 { ####2 }
        \seq_set_split:Nnn #4 . { ####3 }
        \seq_remove_all:Nn #4 { }
      }
      \exp_args:NVVx
      \:nnn #2 #3 {
        \seq_use:Nn #4 .
      }
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { ...\string\__bnvs_resolve:NNNN\space TRUE/ }
\__bnvs_DEBUG:x { \string#1 / \string#2 : #2 / \string#3 : #3 / }
\__bnvs_DEBUG:x { \string#4 : \seq_use:Nn #4 . / }
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
      \prg_return_true:
    }
    \cs_set:Npn \branch:n ##1 {
      \seq_pop_right:NNTF \l__bnvs_a_seq \l__bnvs_b_tl {
        \seq_put_left:NV \l__bnvs_b_seq \l__bnvs_b_tl
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x {\string\__bnvs_resolve:NNNN\space POP~TRUE~##1}
\__bnvs_DEBUG:x {\string\l__bnvs_b_tl : \l__bnvs_b_tl }
\__bnvs_DEBUG:x {\string\l__bnvs_a_seq : \seq_count:N \l__bnvs_a_seq / }
\__bnvs_DEBUG:x {\seq_use:Nn \l__bnvs_a_seq ./ }
\__bnvs_DEBUG:x {\string\l__bnvs_b_seq : \seq_count:N \l__bnvs_b_seq / }
\__bnvs_DEBUG:x {\seq_use:Nn \l__bnvs_b_seq . / }
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
        \tl_set:Nn \l__bnvs_a_tl { #3 . }
        \tl_put_right:Nx \l__bnvs_a_tl { \seq_use:Nn \l__bnvs_a_seq . }
      } {
        \cs_set_eq:NN \loop: \return_true:
      }
    }
    \cs_set:Npn \branch:FF ##1 ##2 {
      \exp_args:Nx
      \__bnvs_get:nNTF { \l__bnvs_a_tl / A } \l__bnvs_b_tl {
        \__bnvs_extract_key:NNNTF #2 \l__bnvs_b_tl \l__bnvs_b_seq {
          \tl_set_eq:NN #3 \l__bnvs_b_tl
          \seq_set_eq:NN #4 \l__bnvs_b_seq
          \seq_set_eq:NN \l__bnvs_a_seq \l__bnvs_b_seq
        } { ##1 }
      } { ##2 }
    }
    \cs_set:Npn \extract_key:F {
      \__bnvs_extract_key:NNNTF #2 \l__bnvs_b_tl \l__bnvs_b_seq {
        \tl_set_eq:NN #3 \l__bnvs_b_tl
        \seq_set_eq:NN #4 \l__bnvs_b_seq
        \seq_set_eq:NN \l__bnvs_a_seq \l__bnvs_b_seq
      }
    }
    \cs_set:Npn \loop: {
      \__bnvs_call:TF {
        \exp_args:Nx
        \__bnvs_get:nNTF { \l__bnvs_a_tl / L } \l__bnvs_b_tl {
%    \end{macrocode}
% If there is a length, no resolution occurs.
%    \begin{macrocode}
          \branch:n { 1 }
        } {
          \seq_pop_right:NNTF \l__bnvs_a_seq \l__bnvs_c_tl {
            \seq_clear:N \l__bnvs_b_seq
            \tl_set:Nn \l__bnvs_a_tl { #3 . }
            \tl_put_right:Nx \l__bnvs_a_tl {
              \seq_use:Nn \l__bnvs_a_seq . .
            }
            \tl_put_right:NV \l__bnvs_a_tl \l__bnvs_c_tl
            \branch:FF {
%    \end{macrocode}
% The value for key \meta{\cs{l_a_tl}}|/L| is not just a (qualified) name.
%    \begin{macrocode}
											\seq_put_left:NV \l__bnvs_b_seq \l__bnvs_c_tl
            } {
%    \end{macrocode}
% Unknown key \meta{\cs{l_a_tl}}|/L|.
%    \begin{macrocode}
											\seq_put_left:NV \l__bnvs_b_seq \l__bnvs_c_tl
            }
          } {
            \branch:FF {
              \cs_set_eq:NN \loop: \return_true:
            } {
              \cs_set:Npn \loop: {
                \__bnvs_group_end:
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { \string\__bnvs_resolve:NNNN \space FALSE / }
\__bnvs_DEBUG:x { \string#1/\string#2 : #2/\string#3 : #3 / }
\__bnvs_DEBUG:x { \string#4 : \seq_use:Nn #4 . / }
\__bnvs_DEBUG:x { \g__bnvs_call_int : \int_use:N\g__bnvs_call_int / }
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
                \prg_return_false:
              }
            }
          }
        }
      } {
        \cs_set:Npn \loop: {
          \__bnvs_group_end:
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { \string\__bnvs_resolve:NNNN\space FALSE / }
\__bnvs_DEBUG:x { \string#1 / \string#2 : #2 / \string#3 : #3 / }
\__bnvs_DEBUG:x { \string#4 : \seq_use:Nn #4./ }
\__bnvs_DEBUG:x { \g__bnvs_call_int : \int_use:N\g__bnvs_call_int/ }
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
          \prg_return_false:
        }
      }
      \loop:
    }
    \loop:
  } {
    \prg_return_true:
  }
}
\prg_new_conditional:Npnn \__bnvs_resolve_OLD:NNNN
    #1 #2 #3 #4 { T, F, TF } {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { \string\__bnvs_resolve:NNNN/ }
\__bnvs_DEBUG:x { \string#1 / \string#2 : #2 / \string#3 : #3 / }
\__bnvs_DEBUG:x { \string#4 : \seq_use:Nn #4 . / }
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
  #1 {
    \__bnvs_group_begin:
%    \end{macrocode}
% \cs{l_a_tl} contains the name with a partial index path to be resolved.
% \cs{l_a_seq} contains the remaining index path components to be resolved.
%    \begin{macrocode}
    \tl_set_eq:NN \l__bnvs_a_tl #3
    \seq_set_eq:NN \l__bnvs_a_seq #4
    \cs_set:Npn \return_true: {
      \cs_set:Npn \:nnn ####1 ####2 ####3 {
        \__bnvs_group_end:
        \tl_set:Nn #2 { ####1 }
        \tl_set:Nn #3 { ####2 }
        \seq_set_split:Nnn #4 . { ####3 }
        \seq_remove_all:Nn #4 { }
      }
      \exp_args:NVVx
      \:nnn #2 #3 {
        \seq_use:Nn #4 .
      }
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { ...\string\__bnvs_resolve:NNNN\space TRUE/ }
\__bnvs_DEBUG:x { \string#1 / \string#2 : #2 / \string#3 : #3/ }
\__bnvs_DEBUG:x { \string#4 : \seq_use:Nn #4 . / }
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
      \prg_return_true:
    }
    \cs_set:Npn \branch:n ##1 {
      \seq_pop_left:NNTF \l__bnvs_a_seq \l__bnvs_b_tl {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { \string\__bnvs_resolve:NNNN\space POP~TRUE~##1 / }
\__bnvs_DEBUG:x { \string\l__bnvs_b_tl : \l__bnvs_b_tl / }
\__bnvs_DEBUG:x { \string\l__bnvs_a_seq : \seq_count:N\l__bnvs_a_seq / }
\__bnvs_DEBUG:x { \seq_use:Nn \l__bnvs_a_seq . / }
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
        \tl_put_right:Nn \l__bnvs_a_tl { . }
        \tl_put_right:NV \l__bnvs_a_tl \l__bnvs_b_tl
      } {
        \cs_set_eq:NN \loop: \return_true:
      }
    }
    \cs_set:Npn \loop: {
      \__bnvs_call:TF {
        \exp_args:Nx
        \__bnvs_get:nNTF { \l__bnvs_a_tl / L } \l__bnvs_b_tl {
          \branch:n { 1 }
        } {
          \exp_args:Nx
          \__bnvs_get:nNTF { \l__bnvs_a_tl / A } \l__bnvs_b_tl {
            \__bnvs_extract_key:NNNTF #2 \l__bnvs_b_tl \l__bnvs_a_seq {
              \tl_set_eq:NN \l__bnvs_a_tl \l__bnvs_b_tl
              \tl_set_eq:NN #3 \l__bnvs_b_tl
              \seq_set_eq:NN #4 \l__bnvs_a_seq
            } {
              \branch:n { 2 }
            }
          } {
            \branch:n { 3 }
          }
        }
      } {
        \cs_set:Npn \loop: {
          \__bnvs_group_end:
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { \string\__bnvs_resolve:NNNN\space FALSE / }
\__bnvs_DEBUG:x { \string#1 / \string#2 : #2 / \string#3 : #3 / }
\__bnvs_DEBUG:x { \string#4:\seq_use:Nn #4 . / }
\__bnvs_DEBUG:x { \string\g__bnvs_call_int : \int_use:N\g__bnvs_call_int / }
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
          \prg_return_false:
        }
      }
      \loop:
    }
    \loop:
  } {
    \prg_return_true:
  }
}
%    \end{macrocode}
% \begin{test}[banner=\string\__bnvs_resolve:NNNTF]
% \Test_resolve:nnnnnn { X } { X } { } { X } { } { 1A }
% \Test_resolve:nnnnnn { X } { X } { 1 } { X } { 1 } { 2A }
% \Test_resolve:nnnnnn { X } { X } { 1.2.3 } { X } { 1.2.3 } { 3A }
% \Test_resolve:nnnnnn { X=Y,Y } { X } { } { Y } { } { 1B }
% \Test_resolve:nnnnnn { X=Y,Y } { X } { 1.2.3 } { Y } { 1.2.3 } { 2B }
% \Test_resolve:nnnnnn { X=Y,Y=Z, Z } { X } { } { Z } { } { 3B }
% \Test_resolve:nnnnnn { X=Y,Y=Z, Z } { X } { 1.2.3 } { Z } { 1.2.3 } { 4B }
% \Test_resolve:nnnnnn { X.1=Y } { X } { 1 } { Y } { } { 1C }
% \Test_resolve:nnnnnn { X.1.2=Y } { X } { 1.2 } { Y } { } { 2C }
% \Test_resolve:nnnnnn { X.1=Y } { X } { 1.2 } { Y } { 2 } { 3C }
% \Test_resolve:nnnnnn { X.1=Y } { X } { 1.2.3 } { Y } { 2.3 } { 4C }
% \Test_resolve:nnnnnn { X.1.2=Y } { X } { 1.2.3 } { Y } { 3 } { 5C }
% \Test_resolve:nnnnnn { X.1.2=Y } { X } { 1.2.3.4 } { Y } { 3.4 } { 6C }
% \Test_resolve:nnnnnn { X=Y, Y.1.2.3.4=Z } { X } { 1.2.3.4 } { Z } { } { 7A }
% \Test_resolve:nnnnnn { X=Y, Y.1.2.3=Z } { X } { 1.2.3.4 } { Z } { 4 } { 7B }
% \Test_resolve:nnnnnn { X=Y, Y.1.2=Z } { X } { 1.2.3.4 } { Z } { 3.4 } { 7C }
% \Test_resolve:nnnnnn { X=Y, Y.1=Z } { X } { 1.2.3.4 } { Z } { 2.3.4 } { 7D }
% \Test_resolve:nnnnnn { X=Y, Y=Z } { X } { 1.2.3.4 } { Z } { 1.2.3.4 } { 7D }
% \Test_resolve:nnnnnn { X.1=Y, Y.2.3.4=Z } { X } { 1.2.3.4 } { Z } { } { 7E }
% \Test_resolve:nnnnnn { X.1=Y, Y.2.3=Z } { X } { 1.2.3.4 } { Z } { 4 } { 7F }
% \Test_resolve:nnnnnn { X.1=Y, Y.2=Z } { X } { 1.2.3.4 } { Z } { 3.4 } { 7G }
% \Test_resolve:nnnnnn { X.1=Y, Y=Z } { X } { 1.2.3.4 } { Z } { 2.3.4 } { 7H }
% \Test_resolve:nnnnnn { X.1.2=Y, Y.3.4=Z } { X } { 1.2.3.4 } { Z } { } { 7I }
% \Test_resolve:nnnnnn { X.1.2=Y, Y.3=Z } { X } { 1.2.3.4 } { Z } { 4 } { 7J }
% \Test_resolve:nnnnnn { X.1.2=Y, Y=Z } { X } { 1.2.3.4 } { Z } { 3.4 } { 7K }
% \end{test}
%
% \subsubsection{Evaluation bricks}
%
% \begin{function}{ \__bnvs_fp_round:nN, \__bnvs_fp_round:N }
% \begin{syntax}
% \cs{__bnvs_fp_round:nN} \marg{expression} \meta{tl variable}
% \cs{__bnvs_fp_round:N} \meta{tl variable}
% \end{syntax}
% Shortcut for |\fp_eval:n{round(|\texttt{\meta{expression}}|)}| appended to \meta{tl variable}.
% The second variant replaces the variable content
% with its rounded floating point evaluation.
% \end{function}
%    \begin{macrocode}
\cs_new:Npn \__bnvs_fp_round:nN #1 #2 {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { ROUND:\tl_to_str:n{#1} / \string#2=\tl_to_str:V #2}
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
  \tl_if_empty:nTF { #1 } {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { ...ROUND:~EMPTY }
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
  } {
    \tl_put_right:Nx #2 {
      \fp_eval:n { round(#1) }
    }
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { ...ROUND:~\tl_to_str:V #2 => \string#2}
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
  }
}
\cs_generate_variant:Nn \__bnvs_fp_round:nN { VN, xN }
\cs_new:Npn \__bnvs_fp_round:N #1 {
  \tl_if_empty:VTF #1 {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { ROUND:~EMPTY }
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
  } {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { ROUND~IN:~\tl_to_str:V #1 }
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
    \tl_set:Nx #1 {
      \fp_eval:n { round(#1) }
    }
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { ROUND~OUT:~\tl_to_str:V #1 }
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
  }
}
%    \end{macrocode}
%
% \begin{function}[TF]{ \__bnvs_raw_first:nN, \__bnvs_raw_first:xN, \__bnvs_raw_first:VN }
% \begin{syntax}
% \cs{__bnvs_raw_first:nNTF} \marg{name} \meta{tl variable} \marg{true code} \marg{false code}
% \end{syntax}
% Append the first index of the \meta{name} slide range
% to the \meta{tl variable}.
% Cache the result.
% Execute \meta{true code} when there is a \meta{first}, \meta{false code} otherwise.
% \end{function}
%    \begin{macrocode}
\cs_set:Npn \__bnvs_return_true:nnN #1 #2 #3 {
  \tl_if_empty:NTF \l__bnvs_ans_tl {
    \__bnvs_group_end:
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:n { RETURN_FALSE/key=#1/type=#2/EMPTY }
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
    \__bnvs_gremove:n { #1//#2 }
    \prg_return_false:
  } {
    \__bnvs_fp_round:N \l__bnvs_ans_tl
    \__bnvs_gput:nV { #1//#2 } \l__bnvs_ans_tl
    \exp_args:NNNV
    \__bnvs_group_end:
    \tl_put_right:Nn #3 \l__bnvs_ans_tl
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { RETURN_TRUE/key=#1/type=#2/ans=\l__bnvs_ans_tl/ }
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
    \prg_return_true:
  }
}
\cs_set:Npn \__bnvs_return_false:nn #1 #2 {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:n { RETURN_FALSE/key=#1/type=#2/ }
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
  \__bnvs_group_end:
  \__bnvs_gremove:n { #1//#2 }
  \prg_return_false:
}
\prg_new_conditional:Npnn \__bnvs_raw_first:nN #1 #2 { T, F, TF } {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { RAW_FIRST/
  key=\tl_to_str:n{#1}/\string #2=/\tl_to_str:V #2/
}
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
  \__bnvs_if_in:nTF { #1//A } {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:n { RAW_FIRST/#1/CACHED }
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
    \tl_put_right:Nx #2 { \__bnvs_item:n { #1//A } }
    \prg_return_true:
  } {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:n { RAW_FIRST/key=#1/NOT_CACHED }
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
    \__bnvs_group_begin:
    \tl_clear:N \l__bnvs_ans_tl
    \__bnvs_get:nNTF { #1/A } \l__bnvs_a_tl {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { RAW_FIRST/key=#1/A=\l__bnvs_a_tl }
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
      \__bnvs_if_append:VNTF \l__bnvs_a_tl \l__bnvs_ans_tl {
        \__bnvs_return_true:nnN { #1 } A #2
      } {
        \__bnvs_return_false:nn { #1 } A
      }
    } {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:n { RAW_FIRST/key=#1/A/F }
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
      \__bnvs_get:nNTF { #1/L } \l__bnvs_a_tl {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:n { RAW_FIRST/key=#1/L=\l__bnvs_a_tl }
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
        \__bnvs_get:nNTF { #1/Z } \l__bnvs_b_tl {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:n { RAW_FIRST/key=#1/Z=\l__bnvs_b_tl }
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
          \__bnvs_if_append:xNTF {
            \l__bnvs_b_tl - ( \l__bnvs_a_tl ) + 1
          } \l__bnvs_ans_tl {
            \__bnvs_return_true:nnN { #1 } A #2
          } {
            \__bnvs_return_false:nn { #1 } A
          }
        } {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:n { RAW_FIRST/key=#1/Z/F/ }
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
          \__bnvs_return_false:nn { #1 } A
        } 
      } {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:n { RAW_FIRST/key=#1/L/F/ }
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
        \__bnvs_return_false:nn { #1 } A
      } 
    }
  }
}
\prg_generate_conditional_variant:Nnn
    \__bnvs_raw_first:nN { VN, xN } { T, F, TF }
%    \end{macrocode}
% \begin{test}[banner=\string\__bnvs_raw_first:nNTF]
% \Beanoves { FIRST=222, LENGTH=445, LAST=666 }
% \Test_raw:nnnn { first } { 222 } { 222 } { 1 }
% \Test_raw:nnnn { first } { 222 } { 222 } { 2 }
% \Test_raw:nnnn { first } { FIRST } { 222 } { 3 }
% \Test_raw:nnnn { first } { FIRST } { 222 } { 4 }
% \Test_raw:nnnn { first } { FIRST:LENGTH } { 222 } { 5 }
% \Test_raw:nnnn { first } { FIRST:LENGTH } { 222 } { 6 }
% \Test_raw:nnnn { first } { FIRST::LAST } { 222 } { 7 }
% \Test_raw:nnnn { first } { FIRST::LAST } { 222 } { 8 }
% \Test_raw:nnnn { first } { :LENGTH::LAST } { 222 } { 8 }
% \Test_raw:nnnn { first } { :LENGTH::LAST } { 222 } { 9 }
% \Test_raw:nnnn { first } { ::LAST:LENGTH } { 222 } { 10 }
% \Test_raw:nnnn { first } { ::LAST:LENGTH } { 222 } { 11 }
% \end{test}
% \begin{function}[TF]{ \__bnvs_if_first:nN }
% \begin{syntax}
% \cs{__bnvs_if_first:nNTF} \marg{name} \meta{tl variable} \marg{true code} \marg{false code}
% \end{syntax}
% Append the first index of the \meta{name} slide range
% to the \meta{tl variable}.
% If no first index was explicitely given,
% use the counter when available and 1 hen not.
% Cache the result.
% Execute \meta{true code} when there is a \meta{first}, \meta{false code} otherwise.
% \end{function}
%    \begin{macrocode}
\prg_new_conditional:Npnn \__bnvs_if_first:nN #1 #2 { T, F, TF } {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { IF_FIRST/\tl_to_str:n{#1}/\string #2=\tl_to_str:V #2}
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
  \__bnvs_raw_first:nNTF { #1 } #2 {
    \prg_return_true:
  } {
    \__bnvs_get:nNTF { #1/C } \l__bnvs_a_tl {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:n { IF_FIRST/#1/C/T/\l__bnvs_a_tl }
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
      \bool_set_true:N \l_no_counter_bool
      \__bnvs_if_append:xNTF \l__bnvs_a_tl \l__bnvs_ans_tl {
        \__bnvs_return_true:nnN { #1 } A #2
      } {
        \__bnvs_return_false:nn { #1 } A
      }
    } {
      \regex_match:NnTF \c__bnvs_A_key_Z_regex { #1 } {
        \__bnvs_gput:nn { #1/A } { 1 }
        \tl_set:Nn #2 { 1 }
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x{IF_FIRST_MATCH:
  key=\tl_to_str:n{#1}/\string #2=\tl_to_str:V #2 /
}
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
        \__bnvs_return_true:nnN { #1 } A #2
      } {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x{IF_FIRST_NO_MATCH:
  key=\tl_to_str:n{#1}/\string #2=\tl_to_str:V #2 
}
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
        \__bnvs_return_false:nn { #1 } A
      }
    }  
  }
}
%    \end{macrocode}
%
% \begin{function}{\__bnvs_first:nN, \__bnvs_first:VN}
% \begin{syntax}
% \cs{__bnvs_first:nN} \marg{name} \meta{tl variable}
% \end{syntax}
% Append the start of the \meta{name} slide range
% to the \meta{tl variable}.
% Cache the result.
% \end{function}
%    \begin{macrocode}
\cs_new:Npn \__bnvs_first:nN #1 #2 {
  \__bnvs_if_first:nNF { #1 } #2 {
    \msg_error:nnn { beanoves } { :n } { Range~with~no~first:~#1 }
  }
}
\cs_generate_variant:Nn \__bnvs_first:nN { VN }
%    \end{macrocode}
% \begin{test}[banner=first]
% \reset:n { Y }
% \Test:nnnn { first } { 222 } { 222 } { 1 }
% \Test:nnnn { first } { 222 } { 222 } { 2 }
% \Test:nnnn { first } { FIRST } { 222 } { 3 }
% \Test:nnnn { first } { FIRST } { 222 } { 4 }
% \Test:nnnn { first } { FIRST:LENGTH } { 222 } { 5 }
% \Test:nnnn { first } { FIRST:LENGTH } { 222 } { 6 }
% \Test:nnnn { first } { FIRST::LAST } { 222 } { 7 }
% \Test:nnnn { first } { FIRST::LAST } { 222 } { 8 }
% \Test:nnnn { first } { :LENGTH::LAST } { 222 } { 8 }
% \Test:nnnn { first } { :LENGTH::LAST } { 222 } { 9 }
% \Test:nnnn { first } { ::LAST:LENGTH } { 222 } { 10 }
% \Test:nnnn { first } { ::LAST:LENGTH } { 222 } { 11 }
% \end{test}
% \begin{function}[TF]{\__bnvs_raw_length:nN}
% \begin{syntax}
% \cs{__bnvs_raw_length:nNTF} \marg{name} \meta{tl variable} \marg{true code} \marg{false code}
% \end{syntax}
% Append the length of the \meta{name} slide range to \meta{tl variable}
% Execute \meta{true code} when there is a \meta{length}, \meta{false code} otherwise.
% \end{function}
% \begin{test}[banner=raw_length]
% \reset:n { Y }
% \Test_raw:nnnn { length } { :445 } { 445 } { 1 }
% \Test_raw:nnnn { length } { :445 } { 445 } { 2 }
% \Test_raw:nnnn { length } { :LENGTH } { 445 } { 3 }
% \Test_raw:nnnn { length } { :LENGTH } { 445 } { 4 }
% \Test_raw:nnnn { length } { FIRST:LENGTH } { 445 } { 5 }
% \Test_raw:nnnn { length } { FIRST:LENGTH } { 445 } { 6 }
% \Test_raw:nnnn { length } { :LENGTH::LAST } { 445 } { 7 }
% \Test_raw:nnnn { length } { :LENGTH::LAST } { 445 } { 8 }
% \Test_raw:nnnn { length } { ::LAST:LENGTH } { 445 } { 9 }
% \Test_raw:nnnn { length } { ::LAST:LENGTH } { 445 } { 10 }
% \Test_append:nnnn { 222::666 } { X.last } { 666 } { A }
% \Test_append:nnnn { 222::666 } { X.1 } { 222 } { B }
% \Test_append:nnnn { 222::666 } { X.last - X.1 } { 444 } { C }
% \Test_append:nnnn { 222::666 } { X.last - (X.1) } { 444 } { D }
% \Test_append:nnnn { FIRST::LAST } { X.last } { 666 } { A2 }
% \Test_append:nnnn { FIRST::LAST } { X.1 } { 222 } { B2 }
% \Test_append:nnnn { FIRST::LAST } { X.last - X.1 } { 444 } { C2 }
% \Test_append:nnnn { FIRST::LAST } { X.last - (X.1) } { 444 } { D2 }
% \Test_raw:nnnn { length } { FIRST::LAST } { 445 } { 11 }
% \Test_raw:nnnn { length } { FIRST::LAST } { 445 } { 12 }
% \end{test}
%    \begin{macrocode}
\prg_new_conditional:Npnn \__bnvs_raw_length:nN #1 #2 { T, F, TF } {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { \string\__bnvs_raw_length:nN/#1/\string#2/ }
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
  \__bnvs_if_in:nTF { #1//L } {
    \tl_put_right:Nx #2 { \__bnvs_item:n { #1//L } }
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { RAW_LENGTH/CACHED/key:#1/\__bnvs_item:n { #1//L } }
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
    \prg_return_true:
  } {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { RAW_LENGTH/NOT_CACHED/key:#1/ }
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
    \__bnvs_gput:nn { #1//L } { 0 }
    \__bnvs_group_begin:
    \tl_clear:N \l__bnvs_ans_tl
    \__bnvs_if_in:nTF { #1/L } {
      \__bnvs_if_append:xNTF {
        \__bnvs_item:n { #1/L }
      } \l__bnvs_ans_tl {
        \__bnvs_return_true:nnN { #1 } L #2
      } {
        \__bnvs_return_false:nn { #1 } L
      }
    } {
      \__bnvs_get:nNTF { #1/A } \l__bnvs_a_tl {
        \__bnvs_get:nNTF { #1/Z } \l__bnvs_b_tl {
          \__bnvs_if_append:xNTF {
            \l__bnvs_b_tl - (\l__bnvs_a_tl) + 1
          } \l__bnvs_ans_tl {
            \__bnvs_return_true:nnN { #1 } L #2
          } {
            \__bnvs_return_false:nn { #1 } L
          }
        } {
          \__bnvs_return_false:nn { #1 } L
        }
      } {
        \__bnvs_return_false:nn { #1 } L
      }
    }
  }
}
\prg_generate_conditional_variant:Nnn
  \__bnvs_raw_length:nN { VN } { T, F, TF }
%    \end{macrocode}
% \begin{function}[TF]{\__bnvs_raw_last:nN}
% \begin{syntax}
% \cs{__bnvs_raw_last:nNTF} \marg{name} \meta{tl variable} \marg{true code} \marg{false code}
% \end{syntax}
% Put the last index of the fully qualified \meta{name} range to
% the right of the \meta{tl variable}, when possible.
% Execute \meta{true code} when a last index was given,
% \meta{false code} otherwise.
% \end{function}
%    \begin{macrocode}
\prg_new_conditional:Npnn \__bnvs_raw_last:nN #1 #2 { T, F, TF } {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:n { RAW_LAST/#1 }
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
  \__bnvs_if_in:nTF { #1//Z } {
    \tl_put_right:Nx #2 { \__bnvs_item:n { #1//Z } }
    \prg_return_true:
  }  {
    \__bnvs_gput:nn { #1//Z } { 0 }
    \__bnvs_group_begin:
    \tl_clear:N \l__bnvs_ans_tl
    \__bnvs_if_in:nTF { #1/Z } {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { NORMAL_RAW_LAST:~\__bnvs_item:n { #1/Z } }
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
      \__bnvs_if_append:xNTF {
        \__bnvs_item:n { #1/Z }
      } \l__bnvs_ans_tl {
        \__bnvs_return_true:nnN { #1 } Z #2
      } {
        \__bnvs_return_false:nn { #1 } Z
      }
    } {
      \__bnvs_get:nNTF { #1/A } \l__bnvs_a_tl {
        \__bnvs_get:nNTF { #1/L } \l__bnvs_b_tl {
          \__bnvs_if_append:xNTF {
            \l__bnvs_a_tl + (\l__bnvs_b_tl) - 1
          } \l__bnvs_ans_tl {
            \__bnvs_return_true:nnN { #1 } Z #2
          } {
            \__bnvs_return_false:nn { #1 } Z
          }
        } {
          \__bnvs_return_false:nn { #1 } Z
        }
      } {
        \__bnvs_return_false:nn { #1 } Z
      }
    }
  }
}
\prg_generate_conditional_variant:Nnn
  \__bnvs_raw_last:nN { VN } { T, F, TF }
%    \end{macrocode}
% \begin{function}{\__bnvs_last:nN, \__bnvs_last:VN}
% \begin{syntax}
% \cs{__bnvs_last:nN} \marg{name} \meta{tl variable}
% \end{syntax}
% Append the last index of the fully qualified \meta{name} slide range to
% \meta{tl variable}
% \end{function}
%    \begin{macrocode}
\cs_new:Npn \__bnvs_last:nN #1 #2 {
  \__bnvs_raw_last:nNF { #1 } #2 {
    \msg_error:nnn { beanoves } { :n } { Range~with~no~last:~#1 }
  }
}
\cs_generate_variant:Nn \__bnvs_last:nN { VN }
%    \end{macrocode}
% \begin{test}[banner=last]
% \reset:n { Y }
% \Test_raw:nnnn { last } { ::666 } { 666 } { 1 }
% \Test_raw:nnnn { last } { ::666 } { 666 } { 2 }
% \Test_raw:nnnn { last } { ::LAST } { 666 } { 3 }
% \Test_raw:nnnn { last } { ::LAST } { 666 } { 4 }
% \Test_raw:nnnn { last } { FIRST::LAST } { 666 } { 5 }
% \Test_raw:nnnn { last } { FIRST::LAST } { 666 } { 6 }
% \Test_raw:nnnn { last } { :LENGTH::LAST } { 666 } { 7 }
% \Test_raw:nnnn { last } { :LENGTH::LAST } { 666 } { 8 }
% \Test_raw:nnnn { last } { ::LAST:LENGTH } { 666 } { 9 }
% \Test_raw:nnnn { last } { ::LAST:LENGTH } { 666 } { 10 }
% \Test_raw:nnnn { last } { FIRST:LENGTH } { 666 } { 10 }
% \Test_raw:nnnn { last } { FIRST:LENGTH } { 666 } { 11 }
% \end{test}
%
% \begin{function}[TF]{\__bnvs_if_next:nN}
% \begin{syntax}
% \cs{__bnvs_if_next:nNTF} \marg{name} \meta{tl variable} \marg{true code} \marg{false code}
% \end{syntax}
% Append the index after the \meta{name} slide range to the \meta{tl variable}.
% Execute \meta{true code} when there is a \meta{next} index, \meta{false code} otherwise.
% \end{function}
%    \begin{macrocode}
\prg_new_conditional:Npnn \__bnvs_if_next:nN #1 #2 { T, F, TF } {
  \__bnvs_if_in:nTF { #1//N } {
    \tl_put_right:Nx #2 { \__bnvs_item:n { #1//N } }
    \prg_return_true:
  } {
    \__bnvs_group_begin:
    \cs_set:Npn \__bnvs_return_true: {
      \tl_if_empty:NTF \l__bnvs_ans_tl {
        \__bnvs_group_end:
        \prg_return_false:
      } {
        \__bnvs_fp_round:N \l__bnvs_ans_tl
        \__bnvs_gput:nV { #1//N } \l__bnvs_ans_tl
        \exp_args:NNNV
        \__bnvs_group_end:
        \tl_put_right:Nn #2 \l__bnvs_ans_tl
        \prg_return_true:
      }
    }
    \cs_set:Npn \return_false: {
      \__bnvs_group_end:
      \prg_return_false:
    }
    \tl_clear:N \l__bnvs_a_tl
    \__bnvs_raw_last:nNTF { #1 } \l__bnvs_a_tl {
      \__bnvs_if_append:xNTF {
        \l__bnvs_a_tl + 1
      } \l__bnvs_ans_tl {
        \__bnvs_return_true:
      } {
        \return_false:
      }
    } {
      \return_false:
    }
  }
}
\prg_generate_conditional_variant:Nnn
  \__bnvs_if_next:nN { VN } { T, F, TF }
%    \end{macrocode}
% \begin{function}{\__bnvs_next:nN, \__bnvs_next:VN}
% \begin{syntax}
% \cs{__bnvs_next:nN} \marg{name} \meta{tl variable}
% \end{syntax}
% Append the index after the \meta{name} slide range to the \meta{tl variable}.
% \end{function}
%    \begin{macrocode}
\cs_new:Npn \__bnvs_next:nN #1 #2 {
  \__bnvs_if_next:nNF { #1 } #2 {
    \msg_error:nnn { beanoves } { :n } { Range~with~no~next:~#1 }
  }
}
\cs_generate_variant:Nn \__bnvs_next:nN { VN }
%    \end{macrocode}
% \begin{test}[banner=next]
% \reset:n { Y }
% \Test:nnnn { next } { ::666 } { 667 } { 1 }
% \Test:nnnn { next } { ::666 } { 667 } { 2 }
% \Test:nnnn { next } { ::LAST } { 667 } { 3 }
% \Test:nnnn { next } { ::LAST } { 667 } { 4 }
% \Test:nnnn { next } { FIRST::LAST } { 667 } { 5 }
% \Test:nnnn { next } { FIRST::LAST } { 667 } { 6 }
% \Test:nnnn { next } { :LENGTH::LAST } { 667 } { 7 }
% \Test:nnnn { next } { :LENGTH::LAST } { 667 } { 8 }
% \Test:nnnn { next } { ::LAST:LENGTH } { 667 } { 9 }
% \Test:nnnn { next } { ::LAST:LENGTH } { 667 } { 10 }
% \end{test}
% \begin{function}[TF]{\__bnvs_if_index:nnN, \__bnvs_if_index:VVN, \__bnvs_if_index:nnnN}
% \begin{syntax}
% \cs{__bnvs_if_index:nnNTF} \marg{name} \marg{integer} \meta{tl variable} \marg{true code} \marg{false code}
% \end{syntax}
% Append the index associated to the \marg{name} and \marg{integer} slide range
% to the right of \meta{tl variable}.
% When \meta{integer shift} is 1, this is the first index,
% when \meta{integer shift} is 2, this is the second index, and so on.
% When \meta{integer shift} is 0, this is the index, before the first one,
% and so on.
% If the computation is possible, \meta{true code} is executed, otherwise
% \meta{false code} is executed.
% The computation may fail when too many recursion calls are made.
% \end{function}
%    \begin{macrocode}
\prg_new_conditional:Npnn \__bnvs_if_index:nnN #1 #2 #3 { T, F, TF } {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { IF_INDEX:key=#1/index=#2/\string#3/ }
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
  \__bnvs_group_begin:
  \tl_clear:N \l__bnvs_ans_tl
  \__bnvs_raw_first:nNTF { #1 } \l__bnvs_ans_tl {
    \tl_put_right:Nn \l__bnvs_ans_tl { + (#2) - 1}
    \exp_args:NNV
    \__bnvs_group_end:
    \__bnvs_fp_round:nN \l__bnvs_ans_tl #3
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { IF_INDEX_TRUE:key=#1/index=#2/
  \string#3=\tl_to_str:N #3
}
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
    \prg_return_true:
  } {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { IF_INDEX_FALSE:key=#1/index=#2/ }
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
    \prg_return_false:
  }
}
\prg_generate_conditional_variant:Nnn
  \__bnvs_if_index:nnN { VVN } { T, F, TF }
%    \end{macrocode}
% \begin{test}[banner=index]
% \reset:n { Y }
% \Test_index:nnnn { 11 } {  1 } { 11 } { 1 }
% \Test_index:nnnn { 11 } {  2 } { 12 } { 2 }
% \Test_index:nnnn { 11 } {  3 } { 13 } { 3 }
% \Test_index:nnnn { 11 } {  0 } { 10 } { 4 }
% \Test_index:nnnn { 11 } { -1 } {  9 } { 5 }
% \Test_index:nnnn { 11 } { -2 } {  8 } { 6 }
% \end{test}
%
% \begin{function}[TF]{\__bnvs_if_range:nN}
% \begin{syntax}
% \cs{__bnvs_if_range:nNTF} \marg{name} \meta{tl variable} \marg{true code} \marg{false code}
% \end{syntax}
% Append the range of the \meta{name} slide range to the \meta{tl variable}.
% Execute \meta{true code} when there is a \meta{range}, \meta{false code} otherwise.
% \end{function}
%    \begin{macrocode}
\prg_new_conditional:Npnn \__bnvs_if_range:nN #1 #2 { T, F, TF } {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x{ RANGE:key=#1/\string#2/}
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
  \bool_if:NTF \l__bnvs_no_range_bool {
    \prg_return_false:
  } {
    \__bnvs_if_in:nTF { #1/ } {
      \tl_put_right:Nn { 0-0 }
    } {
      \__bnvs_group_begin:
      \tl_clear:N \l__bnvs_a_tl
      \tl_clear:N \l__bnvs_b_tl
      \tl_clear:N \l__bnvs_ans_tl
      \__bnvs_raw_first:nNTF { #1 } \l__bnvs_a_tl {
        \__bnvs_raw_last:nNTF { #1 } \l__bnvs_b_tl {
          \exp_args:NNNx
          \__bnvs_group_end:
          \tl_put_right:Nn #2 { \l__bnvs_a_tl - \l__bnvs_b_tl }
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x{ RANGE_TRUE_A_Z:key=#1/\string#2=#2/}
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
          \prg_return_true:
        } {
          \exp_args:NNNx
          \__bnvs_group_end:
          \tl_put_right:Nn #2 { \l__bnvs_a_tl - }
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x{ RANGE_TRUE_A:key=#1/\string#2=#2/}
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
          \prg_return_true:
        }
      } {
        \__bnvs_raw_last:nNTF { #1 } \l__bnvs_b_tl {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x{ RANGE_TRUE_Z:key=#1/\string#2=#2/}
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
          \exp_args:NNNx
          \__bnvs_group_end:
          \tl_put_right:Nn #2 { - \l__bnvs_b_tl }
          \prg_return_true:
        } {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x{ RANGE_FALSE:key=#1/}
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
          \__bnvs_group_end:
          \prg_return_false:
        }
      }
    }
  }
}
\prg_generate_conditional_variant:Nnn
  \__bnvs_if_range:nN { VN } { T, F, TF }
%    \end{macrocode}
% \begin{function}{\__bnvs_range:nN, \__bnvs_range:VN}
% \begin{syntax}
% \cs{__bnvs_range:nN} \marg{name} \meta{tl variable}
% \end{syntax}
% Append the range of the \meta{name} slide range to the \meta{tl variable}.
% \end{function}
%    \begin{macrocode}
\cs_new:Npn \__bnvs_range:nN #1 #2 {
  \__bnvs_if_range:nNF { #1 } #2 {
    \msg_error:nnn { beanoves } { :n } { No~range~available:~#1 }
  }
}
\cs_generate_variant:Nn \__bnvs_range:nN { VN }
%    \end{macrocode}
% \begin{test}[banner=range]
% \bool_set_false:N \l__bnvs_no_range_bool
% \Test_range:nnn { 222 } { 222- } { 1 }
% \Test_range:nnn { ::666 } { -666 } { 2 }
% \Test_range:nnn { 222::666 } { 222-666 } { 3 }
% \Test_range:nnn { 222:445 } { 222-666 } { 4 }
% \Test_range:nnn { :445::666 } { 222-666 } { 5 }
% \Test_range:nnn { ::666:445 } { 222-666 } { 6 }
% \reset:n { Y }
% \Test_range:nnn { FIRST } { 222- } { 1 }
% \Test_range:nnn { ::LAST } { -666 } { 2 }
% \Test_range:nnn { FIRST::LAST } { 222-666 } { 3 }
% ^^A\Test_range:nnn { FIRST:LENGTH } { 222-666 } { 4 }
% \Test_range:nnn { :LENGTH::LAST } { 222-666 } { 5 }
% \Test_range:nnn { ::LAST:LENGTH } { 222-666 } { 6 }
% \end{test}
%
% \begin{function}[TF]{\__bnvs_if_free_counter:nN, \__bnvs_if_free_counter:VN}
% \begin{syntax}
% \cs{__bnvs_if_free_counter:nNTF} \marg{name} \meta{tl variable} \marg{true code} \marg{false code}
% \end{syntax}
% Set the \meta{tl variable} to the value of
% the counter associated to the \marg{name} slide range.
% \end{function}
%    \begin{macrocode}
\prg_new_conditional:Npnn \__bnvs_if_free_counter:nN #1 #2 { T, F, TF } {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { IF_FREE:  key=\tl_to_str:n{#1}/
  value=\__bnvs_item:n {#1/C}/cs=\string #2/
}
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
  \__bnvs_group_begin:
  \tl_clear:N \l__bnvs_ans_tl
  \__bnvs_get:nNF { #1/C } \l__bnvs_ans_tl {
    \__bnvs_raw_first:nNF { #1 } \l__bnvs_ans_tl {
      \__bnvs_raw_last:nNF { #1 } \l__bnvs_ans_tl { }
    }
  }
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { IF_FREE_2: \string \l__bnvs_ans_tl= }
\__bnvs_DEBUG:x { \tl_to_str:V \l__bnvs_ans_tl/ }
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
  \tl_if_empty:NTF \l__bnvs_ans_tl {
    \__bnvs_group_end:
    \regex_match:NnTF \c__bnvs_A_key_Z_regex { #1 } {
      \__bnvs_gput:nn { #1/C } { 1 }
      \tl_set:Nn #2 { 1 }
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { IF_FREE_MATCH_TRUE:
  key=\tl_to_str:n{#1}\string #2=\tl_to_str:V #2 /
}
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
      \prg_return_true:
    } {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { IF_FREE_NO_MATCH_FALSE:
  key=\tl_to_str:n{#1}\string #2=\tl_to_str:V #2/
}
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
      \prg_return_false:
    }
  } {
    \__bnvs_gput:nV { #1/C } \l__bnvs_ans_tl
    \exp_args:NNNV
    \__bnvs_group_end:
    \tl_set:Nn #2 \l__bnvs_ans_tl
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { IF_FREE_TRUE(2):  /
  key=\tl_to_str:n{#1}/\string #2=\tl_to_str:V #2
}
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
    \prg_return_true:
  }
}
\prg_generate_conditional_variant:Nnn
  \__bnvs_if_free_counter:nN { VN } { T, F, TF }
%    \end{macrocode}
% \begin{test}[banner=free_counter]
% \reset:n { Y }
% \Test_free_counter:nnn { 1 } { 1 } { 1 }
% \Test_free_counter:nnn { 222 } { 222 } { 2 }
% \Test_free_counter:nnn { ::666 } { 666 } { 3 }
% \Test_free_counter:nnn { FIRST } { 222 } { 4 }
% \Test_free_counter:nnn { ::LAST } { 666 } { 5 }
% \__bnvs_gclear:
% \Test_free_counter:nnn { A } { 1 } { 6 }
% \Test_free_counter:nnn { A+B } { 2 } { 7 }
% \Test_free_counter:nnn { A+B+C } { 3 } { 8 }
% \Test_free_counter:nnn { ::A } { 1 } { 9 }
% \Test_free_counter:nnn { ::A+B } { 2 } { 10 }
% \Test_free_counter:nnn { ::A+B+C } { 3 } { 11 }
% \end{test}
% \begin{function}[TF]{\__bnvs_if_counter:nN, \__bnvs_if_counter:VN}
% \begin{syntax}
% \cs{__bnvs_if_counter:nNTF} \marg{name} \meta{tl variable} \marg{true code} \marg{false code}
% \end{syntax}
% Append the value of the counter associated to the \marg{name} slide range
% to the right of \meta{tl variable}.
% The value always lays in between the range, whenever possible.
% \end{function}
%    \begin{macrocode}
\prg_new_conditional:Npnn \__bnvs_if_counter:nN #1 #2 { T, F, TF } {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { IF_COUNTER:key=
  \tl_to_str:n{#1}/\string #2=\tl_to_str:V #2
}
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
  \__bnvs_group_begin:
  \__bnvs_if_free_counter:nNTF { #1 } \l__bnvs_ans_tl {
%    \end{macrocode}
% If there is a \meta{first}, use it to bound the result from below.
%    \begin{macrocode}
    \tl_clear:N \l__bnvs_a_tl
    \__bnvs_raw_first:nNT { #1 } \l__bnvs_a_tl {
      \fp_compare:nNnT { \l__bnvs_ans_tl } < { \l__bnvs_a_tl } {
        \tl_set:NV \l__bnvs_ans_tl \l__bnvs_a_tl
      }
    }
%    \end{macrocode}
% If there is a \meta{last}, use it to bound the result from above.
%    \begin{macrocode}
    \tl_clear:N \l__bnvs_a_tl
    \__bnvs_raw_last:nNT { #1 } \l__bnvs_a_tl {
      \fp_compare:nNnT { \l__bnvs_ans_tl } > { \l__bnvs_a_tl } {
        \tl_set:NV \l__bnvs_ans_tl \l__bnvs_a_tl
      }
    }
    \exp_args:NNV
    \__bnvs_group_end:
    \__bnvs_fp_round:nN \l__bnvs_ans_tl #2
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x {IF_COUNTER_TRUE:key=\tl_to_str:n{#1}/
  \string #2=\tl_to_str:V #2
}
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
    \prg_return_true:
  } {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x {IF_COUNTER_FALSE:key=\tl_to_str:n{#1}/
  \string #2=\tl_to_str:V #2
}
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
    \prg_return_false:
  }
}
\prg_generate_conditional_variant:Nnn
  \__bnvs_if_counter:nN { VN } { T, F, TF }
%    \end{macrocode}
% \begin{test}[banner=counter]
% \reset:n { Y }
% \Test_counter:nnn { 1 } { 1 } { 1 }
% \Test_counter:nnn { 222 } { 222 } { 2 }
% \Test_counter:nnn { ::666 } { 666 } { 3 }
% \Test_counter:nnn { FIRST } { 222 } { 4 }
% \Test_counter:nnn { ::LAST } { 666 } { 5 }
% \Test_counter:nnn { FIRST+LENGTH-1 } { 666 } { 6 }
% \Test_counter:nnn { ::FIRST+LENGTH-1 } { 666 } { 7 }
% \end{test}
%
% \begin{function} [TF] {\__bnvs_if_incr:nn, \__bnvs_if_incr:nnN, \__bnvs_if_incr:VnN, \__bnvs_if_incr:VVN}
% \begin{syntax}
% \cs{__bnvs_if_incr:nnTF}  \marg{name} \marg{offset} \marg{true code} \marg{false code}
% \cs{__bnvs_if_incr:nnNTF} \marg{name} \marg{offset} \meta{tl variable} \marg{true code} \marg{false code}
% \end{syntax}
% \end{function}
% Increment the free counter position accordingly.
% When requested, put the result in the \meta{tl variable}.
% In the second version, the result will lay within the declared range.
%    \begin{macrocode}
\prg_new_conditional:Npnn \__bnvs_if_incr:nn #1 #2 { T, F, TF } {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { IF_INCR:\tl_to_str:n{#1}/\tl_to_str:n{#2} }
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
  \__bnvs_group_begin:
  \tl_clear:N \l__bnvs_a_tl
  \__bnvs_if_free_counter:nNTF { #1 } \l__bnvs_a_tl {
    \tl_clear:N \l__bnvs_b_tl
    \__bnvs_if_append:xNTF { \l__bnvs_a_tl + (#2) } \l__bnvs_b_tl {
      \__bnvs_fp_round:N \l__bnvs_b_tl
      \__bnvs_gput:nV { #1/C } \l__bnvs_b_tl
      \__bnvs_group_end:
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { IF_INCR_TRUE:#1/#2 }
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
      \prg_return_true:
    } {
      \__bnvs_group_end:
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { IF_INCR_FALSE(1):#1/#2 }
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
      \prg_return_false:
    }
  } {
    \__bnvs_group_end:
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { IF_INCR_FALSE(2):#1/#2 }
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
    \prg_return_false:
  }
}
\prg_new_conditional:Npnn \__bnvs_if_incr:nnN #1 #2 #3 { T, F, TF } {
  \__bnvs_if_incr:nnTF { #1 } { #2 } {
    \__bnvs_if_counter:nNTF { #1 } #3 {
      \prg_return_true:
    } {
      \prg_return_false:
    }
  } {
    \prg_return_false:
  }
}
\prg_generate_conditional_variant:Nnn
  \__bnvs_if_incr:nnN { VnN, VVN } { T, F, TF }
%    \end{macrocode}
% \begin{test}[banner=if_incr]
% \reset:n { Y }
% \Test_incr:nnnn { 123 } { 123 } { 246 } { 1 }
% \Test_incr:nnnn { 123 } { 100+20+3 } { 246 } { 2 }
% \Test_incr:nnnn { FIRST } { LENGTH-1 } { 666 } { 2 }
% \end{test}
%
% \subsubsection{Evaluation}
%
% \begin{function}[TF]{\__bnvs_if_append:nN,\__bnvs_if_append:VN,\__bnvs_if_append:xN}
% \begin{syntax}
% \cs{__bnvs_if_append:nNTF} \marg{integer expression} \meta{tl variable} \Arg{true code} \Arg{false code}
% \end{syntax}
% Evaluates the \meta{integer expression},
% replacing all the named specifications by their static
% counterpart then put the result to
% the right of the \meta{tl variable}.
% Executed within a group.
% Heavily used by \cs{__bnvs_eval_query:nN}, where \meta{integer expression}
% was initially enclosed in `|?(...)|'.
% Local variables: 
% \begin{variable}{\l__bnvs_ans_tl}
% To feed \meta{tl variable} with.
% \end{variable}
% \begin{variable}{\l__bnvs_split_seq}
% The sequence of catched query groups and non queries.
% \end{variable}
% \begin{variable}{\l__bnvs_split_int}
%  Is the index of the non queries, before all the catched groups.
% \end{variable}
%    \begin{macrocode}
\int_new:N  \l__bnvs_split_int
%    \end{macrocode}
% \begin{variable}{\l__bnvs_name_tl}
%    Storage for \cs{l_split_seq} items that represent names.
% \end{variable}
% \begin{variable}{\l__bnvs_path_tl}
%    Storage for \cs{l_split_seq} items that represent integer paths.
% \end{variable}
% Catch circular definitions.
% \end{function}
%    \begin{macrocode}
\prg_new_conditional:Npnn \__bnvs_if_append:nN #1 #2 { T, F, TF } {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { \string\__bnvs_if_append:nNTF/
  \tl_to_str:n { #1 } / \string #2/
}
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
  \__bnvs_call:TF {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { IF_APPEND...}
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
    \__bnvs_group_begin:
%    \end{macrocode}
% Local variables:
%    \begin{macrocode}
    \int_zero:N  \l__bnvs_split_int
    \seq_clear:N \l__bnvs_split_seq
    \tl_clear:N  \l__bnvs_id_tl
    \tl_clear:N  \l__bnvs_name_tl
    \tl_clear:N  \l__bnvs_path_tl
    \tl_clear:N  \l__bnvs_group_tl
    \tl_clear:N  \l__bnvs_ans_tl
    \tl_clear:N  \l__bnvs_a_tl
%    \end{macrocode}
% Implementation:
%    \begin{macrocode}
    \regex_split:NnN \c__bnvs_split_regex { #1 } \l__bnvs_split_seq
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { IF_APPEND_SPLIT_SEQ: /
  \#=\seq_count:N \l__bnvs_split_seq /
  \seq_use:Nn \l__bnvs_split_seq / /
}
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
    \int_set:Nn \l__bnvs_split_int { 1 }
    \tl_set:Nx \l__bnvs_ans_tl {
      \seq_item:Nn \l__bnvs_split_seq { \l__bnvs_split_int }
    }
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { ANS: \l__bnvs_ans_tl }
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
%    \end{macrocode}
% \begin{function}{\switch:nTF}
% \begin{syntax}
% \cs{switch:nTF} \marg{capture group number} \marg{black code} \marg{white code}
% \end{syntax}
% Helper function to locally set the |\l__bnvs_group_tl| variable
% to the captured group \meta{capture group number}
% and branch.
% \end{function}
%    \begin{macrocode}
    \cs_set:Npn \switch:nNTF ##1 ##2 ##3 ##4 {
      \tl_set:Nx ##2 {
        \seq_item:Nn \l__bnvs_split_seq { \l__bnvs_split_int + ##1 }
      }
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { IF_APPEND_SWITCH/##1/
  \int_eval:n { \l__bnvs_split_int + ##1 } /
  \string##2=\tl_to_str:N##2/
}
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
      \tl_if_empty:NTF ##2 {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { IF_APPEND_SWITCH_WHITE/##1/
  \int_eval:n { \l__bnvs_split_int + ##1 }
}
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
        ##4 } {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { IF_APPEND_SWITCH_BLACK/##1/
  \int_eval:n { \l__bnvs_split_int + ##1 }
}
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
        ##3
      }
    }
%    \end{macrocode}
% \cs{prg_return_true:} and \cs{prg_return_false:} are wrapped locally
% to close the group and return the proper value.
%    \begin{macrocode}
    \cs_set:Npn \return_true: {
      \fp_round:
      \exp_args:NNNV
      \__bnvs_group_end:
      \tl_put_right:Nn #2 \l__bnvs_ans_tl
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { IF_APPEND_TRUE:\tl_to_str:n { #1 } /
  \string #2=\tl_to_str:V #2 /
}
\log_g_prop:
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
      \prg_return_true:
    }
    \cs_set:Npn \fp_round: {
      \__bnvs_fp_round:N \l__bnvs_ans_tl
    }
    \cs_set:Npn \return_false: {
      \__bnvs_group_end:
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { IF_APPEND_FALSE:\tl_to_str:n { #1 } /
  \string #2=\tl_to_str:V #2 /
}
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
      \prg_return_false:
    }
    \cs_set:Npn \:NnnT ##1 ##2 ##3 ##4 {
      \switch:nNTF { ##2 } \l__bnvs_id_tl { } {
        \tl_set_eq:NN \l__bnvs_id_tl \l__bnvs_id_current_tl
        \tl_put_left:NV \l__bnvs_name_tl \l__bnvs_id_tl
      }
      \switch:nNTF { ##3 } \l__bnvs_path_tl {
        \seq_set_split:NnV \l__bnvs_path_seq { . } \l__bnvs_path_tl
        \seq_remove_all:Nn \l__bnvs_path_seq { }
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { PATH_SEQ:\l__bnvs_path_tl==\seq_use:Nn\l__bnvs_path_seq .}
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
      } {
        \seq_clear:N \l__bnvs_path_seq
      }
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { PATH_SEQ:\l__bnvs_path_tl==\seq_use:Nn\l__bnvs_path_seq .}
\__bnvs_DEBUG:x { \string ##1 }
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
      ##1 \l__bnvs_id_tl \l__bnvs_name_tl \l__bnvs_path_seq {
        \cs_set:Npn \: {
          ##4
        }
      } {
        \cs_set:Npn \: { \cs_set_eq:NN \loop: \return_false: }
      }
      \:
    }
    \cs_set:Npn \:T ##1 {
      \seq_if_empty:NTF \l__bnvs_path_seq { ##1 } {
        \cs_set_eq:NN \loop: \return_false:
      }
    }
%    \end{macrocode}
% Main loop.
%    \begin{macrocode}
    \cs_set:Npn \loop: {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { IF_APPEND_LOOP:\int_use:N\l__bnvs_split_int /
  \seq_count:N \l__bnvs_split_seq /
}
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
      \int_compare:nNnTF {
        \l__bnvs_split_int } < { \seq_count:N \l__bnvs_split_seq
      } {
        \switch:nNTF 1 \l__bnvs_name_tl {
%    \end{macrocode}
% \begin{myList}
% \item Case \texttt{++\meta{name}\meta{integer path}.n}.
%    \begin{macrocode}
          \:NnnT \__bnvs_resolve_n:NNNTF 2 3 {
            \__bnvs_if_incr:VnNF \l__bnvs_name_tl 1 \l__bnvs_ans_tl {
              \cs_set_eq:NN \loop: \return_false:
            }
          }
        } {
          \switch:nNTF 4 \l__bnvs_name_tl {
%    \end{macrocode}
% \begin{test}[banner=append/n, debug]
% \Test_append:nnnn { 123 } { X.n } { 123 } { 1 }
% \Test_append:nnnn { } { ++X.n } { 124 } { 2 }
% \Test_append:nnnn { } { X.n } { 124 } { 3 }
% \end{test}
% \item Cases \texttt{\meta{name}\meta{integer path}...}.
%    \begin{macrocode}
            \switch:nNTF 7 \l__bnvs_a_tl {
              \:NnnT \__bnvs_resolve:NNNTF 5 6 {
                \:T {
                  \__bnvs_raw_length:VNF \l__bnvs_name_tl \l__bnvs_ans_tl {
                    \cs_set_eq:NN \loop: \return_false:
                  }
                }
              }
%    \end{macrocode}
% \item Case \texttt{...length}.
% \begin{test}[banner=append/length]
% \Test_append:nnnn { :445 } { X.length } { 445 } { 1 }
% \Test_append:nnnn { 222:445 } { X.length } { 445 } { 2 }
% \Test_append:nnnn { 222::666 } { X.length } { 445 } { 3 }
% \Test_append:nnnn { :445::666 } { X.length } { 445 } { 4 }
% \reset:n { }
% \Test_append:nnnn { :LENGTH } { X.length } { 445 } { 5 }
% \Test_append:nnnn { FIRST:LENGTH } { X.length } { 445 } { 6 }
% \Test_append:nnnn { FIRST::LAST } { X.length } { 445 } { 7 }
% \Test_append:nnnn { :LENGTH::LAST } { X.length } { 445 } { 8 }
% \end{test}
%    \begin{macrocode}
            } {
              \switch:nNTF 8 \l__bnvs_a_tl {
%    \end{macrocode}
% \item Case \texttt{...last}.
%    \begin{macrocode}
                \:NnnT \__bnvs_resolve:NNNTF 5 6 {
                  \:T {
                    \__bnvs_raw_last:VNF \l__bnvs_name_tl \l__bnvs_ans_tl {
                      \cs_set_eq:NN \loop: \return_false:
                    }
                  }
                }
%    \end{macrocode}
% \begin{test}[banner=append/last]
% \Test_append:nnnn { ::666 } { X.last } { 666 } { 1 }
% \Test_append:nnnn { 222:445 } { X.last } { 666 } { 2 }
% \Test_append:nnnn { 222::666 } { X.last } { 666 } { 3 }
% \Test_append:nnnn { :445::666 } { X.last } { 666 } { 4 }
% \reset:n { }
% \Test_append:nnnn { ::LAST } { X.last } { 666 } { 5 }
% \Test_append:nnnn { FIRST:LENGTH } { X.last } { 666 } { 6 }
% \Test_append:nnnn { FIRST::LAST } { X.last } { 666 } { 7 }
% \Test_append:nnnn { :LENGTH::LAST } { X.last } { 666 } { 8 }
% \end{test}
%    \begin{macrocode}
              } {
                \switch:nNTF 9 \l__bnvs_a_tl {
%    \end{macrocode}
% \item Case \texttt{...next}.
% \begin{test}[banner=append/next]
% \Test_append:nnnn { ::666 } { X.next } { 667 } { 1 }
% \Test_append:nnnn { 222:445 } { X.next } { 667 } { 2 }
% \Test_append:nnnn { 222::666 } { X.next } { 667 } { 3 }
% \Test_append:nnnn { :445::666 } { X.next } { 667 } { 4 }
% \reset:n { }
% \Test_append:nnnn { ::LAST } { X.next } { 667 } { 5 }
% \Test_append:nnnn { FIRST:LENGTH } { X.next } { 667 } { 6 }
% \Test_append:nnnn { FIRST::LAST } { X.next } { 667 } { 7 }
% \Test_append:nnnn { :LENGTH::LAST } { X.next } { 667 } { 8 }
% \end{test}
%    \begin{macrocode}
                  \:NnnT \__bnvs_resolve:NNNTF 5 6 {
                    \:T {
                      \__bnvs_if_next:VNF \l__bnvs_name_tl \l__bnvs_ans_tl {
                        \cs_set_eq:NN \loop: \return_false:
                      }
                    }
                  }
                } {
                  \switch:nNTF { 10 } \l__bnvs_a_tl {
%    \end{macrocode}
% \item Case \texttt{...range}.
% \begin{test}[banner=append]
% \Test_append:nnnn { 222 } { X.range } { 222- } { 1 }
% \Test_append:nnnn { ::666 } { X.range } { -666 } { 2 }
% \Test_append:nnnn { 222:445 } { X.range } { 222-666 } { 3 }
% \Test_append:nnnn { 222::666 } { X.range } { 222-666 } { 4 }
% \Test_append:nnnn { :445::666 } { X.range } { 222-666 } { 5 }
% \reset:n { }
% \Test_append:nnnn { FIRST } { X.range } { 222- } { 6 }
% \Test_append:nnnn { ::LAST } { X.range } { -666 } { 7 }
% \Test_append:nnnn { FIRST:LENGTH } { X.range } { 222-666 } { 8 }
% \Test_append:nnnn { FIRST::LAST } { X.range } { 222-666 } { 9 }
% \Test_append:nnnn { :LENGTH::LAST } { X.range } { 222-666 } { 10 }
% \end{test}
%    \begin{macrocode}
\:NnnT \__bnvs_resolve:NNNTF 5 6 {
  \:T {
    \__bnvs_if_range:VNTF \l__bnvs_name_tl \l__bnvs_ans_tl {
      \cs_set_eq:NN \fp_round: \prg_do_nothing:
    } {
      \cs_set_eq:NN \loop: \return_false:
    }
  }
}
                  } {
                    \switch:nNTF { 11 } \l__bnvs_a_tl {
%    \end{macrocode}
% \item Case \texttt{...n}.
%    \begin{macrocode}
                      \switch:nNTF { 12 } \l__bnvs_a_tl {
%    \end{macrocode}
% \item Case \texttt{...+=\meta{integer}}.
%    \begin{macrocode}
\:NnnT \__bnvs_resolve_n:NNNTF 5 6 {
  \:T {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x {NAME=\l__bnvs_name_tl}
\__bnvs_DEBUG:x {INCR=\l__bnvs_a_tl}
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
    \__bnvs_if_incr:VVNF \l__bnvs_name_tl \l__bnvs_a_tl \l__bnvs_ans_tl {
      \cs_set_eq:NN \loop: \return_false:
    }
  }
}
                      } {
%    \end{macrocode}
% \item Case \texttt{...n++}.
%    \begin{macrocode}
                        \switch:nNTF { 13 } \l__bnvs_a_tl {
                          \:NnnT \__bnvs_resolve_n:NNNTF 5 6 {
                            \seq_if_empty:NTF \l__bnvs_path_seq {
\__bnvs_if_post:VNF \l__bnvs_name_tl \l__bnvs_ans_tl {
  \cs_set_eq:NN \loop: \return_false:
}
                            } {
\msg_error:nnx { beanoves } { :n } { Too~many~.<integer>~components:~#1 }
\cs_set_eq:NN \loop: \return_false:
                            }
                          }
                        } {
                          \:NnnT \__bnvs_resolve_n:NNNTF 5 6 {
                            \seq_if_empty:NTF \l__bnvs_path_seq {
\__bnvs_if_counter:VNF \l__bnvs_name_tl \l__bnvs_ans_tl {
  \cs_set_eq:NN \loop: \return_false:
}
                            } {
\seq_pop_left:NN \l__bnvs_path_seq \l__bnvs_a_tl
\seq_if_empty:NTF \l__bnvs_path_seq {
  \__bnvs_if_incr:VVNF \l__bnvs_name_tl \l__bnvs_a_tl \l__bnvs_ans_tl {
    \cs_set_eq:NN \loop: \return_false:
  }
} {
  \msg_error:nnx { beanoves } { :n } { Too~many~.<integer>~components:~#1 }
  \cs_set_eq:NN \loop: \return_false:
}
                            }
                          }
                        }
                      }
%    \end{macrocode}
% \begin{test}[banner={append/+=}]
% \Test_append:nnnn { 222 } { X.n += 444 } { 666 } { 1 }
% \Test_append:nnnn { } { X.n } { 666 } { 2 }
% \Test_append:nnnn { } { X   } { 666 } { 3 }
% \Test_append:nnnn { } { X.n += -444 } { 222 } { 4 }
% \Test_append:nnnn { } { X.n } { 222 } { 5 }
% \Test_append:nnnn { } { X   } { 222 } { 6 }
% \reset:n { }
% \Test_append:nnnn { FIRST } { X.n += 444 } { 666 } { A }
% \Test_append:nnnn { } { FIRST } { 222 } { B }
% \Test_append:nnnn { FIRST } { X.n += (LENGTH - 1) } { 666 } { 7 }
% \Test_append:nnnn { } { X.n } { 666 } { 8 }
% \Test_append:nnnn { } { X  } { 666 } { 9 }
% \Test_append:nnnn { } { X.n += (-(LENGTH-1)) } { 222 } { 10 }
% \Test_append:nnnn { } { X.n } { 222 } { 11 }
% \Test_append:nnnn { } { X   } { 222 } { 12 }
% \Test_append:nnnn { FIRST } { X.n += LENGTH - 1 } { 666 } { 13 }
% \Test_append:nnnn { } { X.n } { 666 } { 14 }
% \Test_append:nnnn { } { X  } { 666 } { 15 }
% \Test_append:nnnn { FIRST } { X.n += LENGTH ~ - 1 } { 666 } { 16 }
% \Test_append:nnnn { } { X.n } { 667 } { 17 }
% \Test_append:nnnn { } { X   } { 667 } { 18 }
% \end{test}
%    \begin{macrocode}
                    } {
                      \:NnnT \__bnvs_resolve_n:NNNTF 5 6 {
                        \seq_if_empty:NTF \l__bnvs_path_seq {
\__bnvs_if_counter:VNF \l__bnvs_name_tl \l__bnvs_ans_tl {
  \cs_set_eq:NN \loop: \return_false:
}
                        } {
                          \seq_pop_left:NN \l__bnvs_path_seq \l__bnvs_a_tl
                          \seq_if_empty:NTF \l__bnvs_path_seq {
\__bnvs_if_index:VVNF \l__bnvs_name_tl \l__bnvs_a_tl \l__bnvs_ans_tl {
  \cs_set_eq:NN \loop: \return_false:
}
                          } {
\msg_error:nnx { beanoves } { :n } { Too~many~.<integer>~components:~#1 }
\cs_set_eq:NN \loop: \return_false:
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          } {
%    \end{macrocode}
% No name.
%    \begin{macrocode}
          }
        }
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x {ITERATE~ANS=\l__bnvs_ans_tl }
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
        \int_add:Nn \l__bnvs_split_int { 14 }
        \tl_put_right:Nx \l__bnvs_ans_tl {
          \seq_item:Nn \l__bnvs_split_seq { \l__bnvs_split_int }
        }
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x {ITERATE~ANS=\l__bnvs_ans_tl }
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
        \loop:
      } {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x {END_OF_LOOP~ANS=\l__bnvs_ans_tl }
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
        \return_true:
      }
    }
    \loop:
  } {
    \msg_error:nnx { beanoves } { :n } { Too~many~calls:~ #1 }
    \prg_return_false:
  }
}
\prg_generate_conditional_variant:Nnn
  \__bnvs_if_append:nN { VN, xN } { T, F, TF }
%    \end{macrocode}
% \end{myList}
%
% \begin{function}[TF]{\__bnvs_if_eval_query:nN}
% \begin{syntax}
% \cs{__bnvs_if_eval_query:nNTF} \marg{overlay query} \meta{tl variable} \marg{true code} \marg{false code}
% \end{syntax}
% Evaluates the single \meta{overlay query}, 
% which is expected to contain no comma.
% Extract a range specification from the argument,
% replaces all the \emph{named overlay specifications} by their static counterparts,
% make the computation then append the result to 
% the right of the \meta{seq variable}.
% Ranges are supported with the colon syntax.
% This is executed within a local group.
% Below are local variables and constants.
% \begin{variable}{\l__bnvs_a_tl}
% Storage for the first index of a range.
% \end{variable}
% \begin{variable}{\l__bnvs_b_tl}
% Storage for the last index of a range, or its length.
% \end{variable}
% \begin{variable}{\c__bnvs_A_cln_Z_regex}
% Used to parse slide range overlay specifications.
% Next are the capture groups.
% \end{variable}
%    \begin{macrocode}
\regex_const:Nn \c__bnvs_A_cln_Z_regex {
  \A \s* (?:
%    \end{macrocode}
% \begin{myList}
% \item 2: \meta{first}
%    \begin{macrocode}
      ( [^:]* ) \s* :
%    \end{macrocode}
% \item 3: second optional colon
%    \begin{macrocode}
      (:)? \s*
%    \end{macrocode}
% \item 4: \meta{length}
%    \begin{macrocode}
      ( [^:]* )
%    \end{macrocode}
% \item 5: standalone \meta{first}
%    \begin{macrocode}
    | ( [^:]+ )
  ) \s* \Z
}
%    \end{macrocode}
% \end{myList}
% \begin{test}[banner=A_cln_Z]
% \Test_regex:nnnn { A_cln_Z } {A:B} {A:B,{A},{},{B},{}} {1}
% \Test_regex:nnnn { A_cln_Z } {A} {A,{},{},{},A} {2}
% \Test_regex:nnnn { A_cln_Z } {A:B} {A:B,{A},{},{B},{}} {1}
% \Test_regex:nnnn { A_cln_Z } {A::B} {A::B,{A},{:},{B},{}} {1}
% \Test_regex:nnnn { A_cln_Z } {A:} {A:,{A},{},{},{}} {1}
% \Test_regex:nnnn { A_cln_Z } {A::} {A::,{A},{:},{},{}} {1}
% \Test_regex:nnnn { A_cln_Z } {::B} {::B,{},:,B,{}} {1}
% \Test_regex:nnnn { A_cln_Z } {::} {::,{},:,{},{}} {1}
% \Test_regex:nnnn { A_cln_Z } {:} {:,{},{},{},{}} {1}
% \end{test}
% \end{function}
%    \begin{macrocode}
\prg_new_conditional:Npnn \__bnvs_if_eval_query:nN #1 #2 { T, F, TF } {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { EVAL_QUERY:#1/
  \tl_to_str:n{#1}/\string#2=\tl_to_str:N #2
}
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
  \__bnvs_call_greset:
  \regex_extract_once:NnNTF \c__bnvs_A_cln_Z_regex {
    #1
  } \l__bnvs_match_seq {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { EVAL_QUERY:#1/
  \string\l__bnvs_match_seq/\seq_use:Nn \l__bnvs_match_seq //
}
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
    \bool_set_false:N \l__bnvs_no_counter_bool
    \bool_set_false:N \l__bnvs_no_range_bool
%    \end{macrocode}
%
% \begin{function}{\switch:nNTF}
% \begin{syntax}
% \cs{switch:nNTF} \marg{capture group number} \meta{tl variable} \marg{black code} \marg{white code}
% \end{syntax}
% Helper function to locally set the \meta{tl variable}
% to the captured group \meta{capture group number}
% and branch depending on the emptyness of this variable.
% \end{function}
%    \begin{macrocode}
    \cs_set:Npn \switch:nNTF ##1 ##2 ##3 ##4 {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { EQ_SWITCH:##1/ }
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
      \tl_set:Nx ##2 {
        \seq_item:Nn \l__bnvs_match_seq { ##1 }
      }
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x { \string ##2/ \tl_to_str:N ##2/}
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
      \tl_if_empty:NTF ##2 { ##4 } { ##3 }
    }
    \switch:nNTF 5 \l__bnvs_a_tl {
%    \end{macrocode}
% \emoji{left-speech-bubble} Single expression
%    \begin{macrocode}
      \bool_set_false:N \l__bnvs_no_range_bool
      \__bnvs_if_append:VNTF \l__bnvs_a_tl #2 {
        \prg_return_true:
      } {
        \prg_return_false:
      }
    } {
      \switch:nNTF 2 \l__bnvs_a_tl {
        \switch:nNTF 4 \l__bnvs_b_tl {
          \switch:nNTF 3 \l__bnvs_c_tl {
%    \end{macrocode}
% \emoji{left-speech-bubble} \texttt{\meta{first}::\meta{last}} range
%    \begin{macrocode}
            \__bnvs_if_append:VNTF \l__bnvs_a_tl #2 {
              \tl_put_right:Nn #2 { - }
              \__bnvs_if_append:VNTF \l__bnvs_b_tl #2 {
                \prg_return_true:
              } {
                \prg_return_false:
              }
            } {
              \prg_return_false:
            }
          } {
%    \end{macrocode}
% \emoji{left-speech-bubble} \texttt{\meta{first}:\meta{length}} range
%    \begin{macrocode}
            \__bnvs_if_append:VNTF \l__bnvs_a_tl #2 {
              \tl_put_right:Nx #2 { - }        
              \tl_put_right:Nx \l__bnvs_a_tl { + ( \l__bnvs_b_tl ) - 1}  
              \__bnvs_if_append:VNTF \l__bnvs_a_tl #2 {
                \prg_return_true:
              } {
                \prg_return_false:
              }
            } {
              \prg_return_false:
            }
          }
        } {
%    \end{macrocode}
% \emoji{left-speech-bubble} \texttt{\meta{first}:} and \texttt{\meta{first}::} range
%    \begin{macrocode}
          \__bnvs_if_append:VNTF \l__bnvs_a_tl #2 {
            \tl_put_right:Nn #2 { - }
            \prg_return_true:
          } {
            \prg_return_false:
          }
        }
      } {
        \switch:nNTF 4 \l__bnvs_b_tl {
          \switch:nNTF 3 \l__bnvs_c_tl {
%    \end{macrocode}
% \emoji{left-speech-bubble} \texttt{::\meta{last}} range
%    \begin{macrocode}
            \tl_put_right:Nn #2 { - }
            \__bnvs_if_append:VNTF \l__bnvs_a_tl #2 {
              \prg_return_true:
            } {
              \prg_return_false:
            }
          } {
\msg_error:nnx { beanoves } { :n } { Syntax~error(Missing~first):~#1 }
          }
        } {
%    \end{macrocode}
% \emoji{left-speech-bubble} \texttt{:} or \texttt{::} range
%    \begin{macrocode}
          \seq_put_right:Nn #2 { - }
        } 
      }
    }
  } {
%    \end{macrocode}
% Error
%    \begin{macrocode}
    \msg_error:nnn { beanoves } { :n } { Syntax~error:~#1 }
  }
}
%    \end{macrocode}
% \begin{test}[banner=\string\__bnvs_eval_query:nNTF]
% \Test_query:nnnn { A=100 } { 1 } { 1 } { 1 }
% \Test_query:nnnn { A=100 } { 1+1 } { 2 } { 2 }
% \Test_query:nnnn { A=100 } { A.1+A.11 } { 210 } { 3 }
% \Test_query:nnnn { A=100 } { A.1::A.111 } { 100-210 } { 4 }
% \Test_query:nnnn { A=100 } { A.1:111 } { 100-210 } { 5 }
% \Test_query:nnnn { A=4 } { A.1 } { 4 } { 6 }
% \Test_query:nnnn { A=4 } { A.0 } { 3 } { 7 }
% \Test_query:nnnn { A=4 } { A.-1 } { 2 } { 8 }
% \Test_query:nnnn { A=4 } { A.-2 } { 1 } { 9 }
% \Test_query:nnnn { A=4 } { A.-3 } { 0 } { 10 }
% \end{test}
%
% \begin{function}{\__bnvs_eval:nN}
% \begin{syntax}
% \cs{__bnvs_eval:nN} \marg{overlay query list} \meta{tl variable}
% \end{syntax}
% This is called by the \emph{named overlay specifications} scanner.
% Evaluates the comma separated list of \meta{overlay query}'s,
% replacing all the named overlay specifications and integer expressions
% by their static counterparts by calling \cs{__bnvs_eval_query:nN},
% then append the result to the right of the \meta{tl variable}.
% This is executed within a local group.
% Below are local variables and constants used
% throughout the body of this function.
% \begin{variable}{\l__bnvs_query_seq}
% Storage for a sequence of \meta{query}'s obtained by splitting a comma separated list.
% \end{variable}
% \begin{variable}{\l__bnvs_ans_seq}
% Storage of the evaluated result.
% \end{variable}
% \begin{variable}{\c__bnvs_comma_regex}
% Used to parse slide range overlay specifications.
%    \begin{macrocode}
\regex_const:Nn \c__bnvs_comma_regex { \s* , \s* }
%    \end{macrocode}
% \end{variable}
% No other variable is used.
% \end{function}
%    \begin{macrocode}
\cs_new:Npn \__bnvs_eval:nN #1 #2 {
%    \end{macrocode}
% \begin{gobble}
%<*!gubed>
\__bnvs_DEBUG:x {\string\__bnvs_eval:nN:\tl_to_str:n{#1}/
  \string#2=\tl_to_str:V #2
}
%</!gubed>
% \end{gobble}
%    \begin{macrocode}
  \__bnvs_group_begin:
%    \end{macrocode}
% Local variables declaration
%    \begin{macrocode}
  \seq_clear:N \l__bnvs_query_seq
  \seq_clear:N \l__bnvs_ans_seq
%    \end{macrocode}
% In this main evaluation step, we evaluate the integer expression and put
% the result in a variable which content will be copied after the group is closed.
% We authorize comma separated expressions
% and \texttt{\meta{first}::\meta{last}} range expressions as well.
% We first split the expression around commas, into \cs{l_query_seq}.
%    \begin{macrocode}
  \regex_split:NnN \c__bnvs_comma_regex { #1 } \l__bnvs_query_seq
%    \end{macrocode}
% Then each component is evaluated and the result is stored in \cs{l__bnvs_ans_seq}
% that we have clear before use.
%    \begin{macrocode}
  \seq_map_inline:Nn \l__bnvs_query_seq {
    \tl_clear:N \l__bnvs_ans_tl
    \__bnvs_if_eval_query:nNTF { ##1 } \l__bnvs_ans_tl {
      \seq_put_right:NV \l__bnvs_ans_seq \l__bnvs_ans_tl
    } {
      \seq_map_break:n {
        \msg_fatal:nnn { beanoves } { :n } { Circular~dependency~in~#1}
      }
    }
  }
%    \end{macrocode}
% We have managed all the comma separated components, we collect them back
% and append them to \meta{tl variable}.
%    \begin{macrocode}
  \exp_args:NNNx
  \__bnvs_group_end:
  \tl_put_right:Nn #2 { \seq_use:Nn \l__bnvs_ans_seq , }
}
\cs_generate_variant:Nn \__bnvs_eval:nN { VN, xN }
%    \end{macrocode}
% \begin{test}[banner=eval, debug]
% \reset:n { }
% \Test_append:nnnn { 222 } { X.1 } { 222 } { A }
% \__bnvs_DEBUG:x { \string \l__bnvs_ans_tl }
% \tl_clear:N \l__bnvs_ans_tl
% \__bnvs_eval:nN {X.1} \l__bnvs_ans_tl
% \assert_equal:xxn { \l__bnvs_ans_tl } { 222 } { 1 }
% \end{test}
%
% \begin{function}{\BeanovesEval}
%   \begin{syntax}
%     \cs{BeanovesEval} \oarg{tl variable} \marg{overlay queries}
%   \end{syntax}
% \meta{overlay queries} is the argument of |?(...)| instructions.
% This is a comma separated list of single \meta{overlay query}'s.
%
% This function evaluates the \meta{overlay queries} and store the result in the \meta{tl variable} when provided
% or leave the result in the input stream. Forwards to \cs{__bnvs_eval:nN}
% within a group. \cs{l_ans_tl} is used locally to store the result.
% \end{function}
%    \begin{macrocode}
\NewDocumentCommand \BeanovesEval { s o m } {
  \__bnvs_group_begin:
  \tl_clear:N \l__bnvs_ans_tl
  \IfBooleanTF { #1 } {
    \bool_set_true:N  \l__bnvs_no_counter_bool
  } {
    \bool_set_false:N \l__bnvs_no_counter_bool
  }
  \__bnvs_eval:nN { #3 } \l__bnvs_ans_tl
  \IfValueTF { #2 } {
    \exp_args:NNNV
    \__bnvs_group_end:
    \tl_set:Nn #2 \l__bnvs_ans_tl
  } {
    \exp_args:NV
    \__bnvs_group_end: \l__bnvs_ans_tl
  }
}
%    \end{macrocode}
% \begin{test}[banner=BeanovesEval, debug]
% \reset:n { }
% \Test_append:nnnn { 222 } { X.1 } { 222 } { A }
% \BeanovesEval[\l__bnvs_ans_tl]{X.1}
% \assert_equal:xxn { \l__bnvs_ans_tl } { 222 } { 1 }
% \end{test}
%
% \subsubsection{Reseting slide ranges}
% \begin{function}{\BeanovesReset}
%   \begin{syntax}
%     \cs{beanovesReset} \oarg{first value} \marg{Slide range name}
%   \end{syntax}
%    \begin{macrocode}
\NewDocumentCommand \BeanovesReset { O{1} m } {
  \__bnvs_reset:nn { #1 } { #2 }
  \ignorespaces
}
%    \end{macrocode}
% Forwards to \cs{__bnvs_reset:nn}.
% \end{function}
%
% \begin{function}{\__bnvs_reset:nn}
% \begin{syntax}
% \cs{__bnvs_reset:nn} \marg{first value} \marg{slide range name}
% \end{syntax}
% Reset the counter to the given \meta{first value}.
% Clean the cached values also.
% \end{function}
%    \begin{macrocode}
\cs_new:Npn \__bnvs_reset:nn #1 #2 {
  \bool_if:nTF {
    \__bnvs_if_in_p:n { #2/A } || \__bnvs_if_in_p:n { #2/Z }
  } {
    \__bnvs_gremove:n { #2/C }
    \__bnvs_gremove:n { #2//A }
    \__bnvs_gremove:n { #2//L }
    \__bnvs_gremove:n { #2//Z }
    \__bnvs_gremove:n { #2//N }
    \__bnvs_gput:nn { #2/C0 } { #1 }
  } {
    \msg_warning:nnn { beanoves } { :n } { Unknown~name:~#2 }
  }
}
%    \end{macrocode}
%
%    \begin{macrocode}
\makeatother
\ExplSyntaxOff
%    \end{macrocode}
% \end{implementation}
%
%    \begin{macrocode}
%</package>
%    \end{macrocode}
%
% \StopEventually{\setlength\IndexMin{200pt}  \PrintIndex }
%
%\Finale
%
