%%
%% This is file `beanoves.sty',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% beanoves.dtx  (with options: `package,gubed,final')
%% 
\NeedsTeXFormat{LaTeX2e}[2020/01/01]
\ProvidesExplPackage
  {beanoves}
  {2023/01/07}
  {1.0}
  {Named overlay specifications for beamer}
\cs_new:Npn \BNVS:c    #1    { __bnvs_#1     }
\cs_new:Npn \BNVS_l:cn #1 #2 { l__bnvs_#1_#2 }
\cs_new:Npn \BNVS_g:cn #1 #2 { g__bnvs_#1_#2 }
\cs_new:Npn \BNVS_use_raw:N #1 { #1 }
\cs_new:Npn \BNVS_use_raw:c #1 {
  \exp_args:NNo
  \exp_last_unbraced:No
  \BNVS_use_raw:N { \use:c { #1 } }
}
\cs_new:Npn \BNVS_use:c #1 {
  \BNVS_use_raw:c { \BNVS:c { #1 } }
}
\cs_new:Npn \BNVS_use_raw:NN #1 #2 {
  #1 #2
}
\cs_new:Npn \BNVS_use_raw:nN #1 #2 {
  #1 #2
}
\cs_new:Npn \BNVS_use_raw:Nc #1 #2 {
  \exp_args:NNNo
  \exp_last_unbraced:NNo
  \BNVS_use_raw:NN #1 { \use:c { #2 } }
}
\exp_args_generate:n { NNno }
\cs_new:Npn \BNVS_use_raw:nc #1 #2 {
  \exp_args:NNno
  \exp_last_unbraced:Nno
  \BNVS_use_raw:nN { #1 } { \use:c { #2 } }
}
\cs_new:Npn \BNVS_use:Nc #1 #2 {
  \BNVS_use_raw:Nc #1 { \BNVS:c { #2 } }
}
\cs_new:Npn \BNVS_use:nc #1 #2 {
  \BNVS_use_raw:nc { #1 } { \BNVS:c { #2 } }
}
\cs_new:Npn \BNVS_log:n #1 { }
\cs_generate_variant:Nn \BNVS_log:n { x }
\cs_new:Npn \BNVS_DEBUG_on: {
  \cs_set:Npn \BNVS_DEBUG_log:n { \BNVS_log:n }
}
\cs_new:Npn \BNVS_DEBUG_off: {
  \cs_set:Npn \BNVS_DEBUG_log:n { \use_none:n }
}
\BNVS_DEBUG_off:
\cs_new:Npn \BNVS_new:cpn #1 {
  \cs_new:cpn { \BNVS:c { #1 } }
}
\cs_new:Npn \BNVS_set:cpn #1 {
  \cs_set:cpn { \BNVS:c { #1 } }
}
\cs_generate_variant:Nn \cs_generate_variant:Nn { c }
\cs_new:Npn \BNVS_generate_variant:cn #1 {
  \cs_generate_variant:cn { \BNVS:c { #1 } }
}
\msg_new:nnn { beanoves } { :n } { #1 }
\msg_new:nnn { beanoves } { :nn } { #1~(#2) }
\BNVS_new:cpn { warning:n } {
  \msg_warning:nnn { beanoves } { :n }
}
\BNVS_generate_variant:cn { warning:n } { x }
\BNVS_new:cpn { error:n } {
  \msg_error:nnn { beanoves } { :n }
}
\BNVS_new:cpn { error:x } {
  \msg_error:nnx { beanoves } { :n }
}
\BNVS_new:cpn { fatal:n } {
  \msg_fatal:nnn { beanoves } { :n }
}
\BNVS_new:cpn { fatal:x } {
  \msg_fatal:nnx { beanoves } { :n }
}
\cs_new:Npn \BNVS_N_new:c #1 {
  \cs_new:cpn { BNVS_#1:c } ##1 {
    l \BNVS:c{ ##1 } \tl_if_empty:nF { ##1 } { _ } #1
  }
  \cs_new:cpn { BNVS_#1_new:c } ##1 {
    \use:c { #1_new:c } { \use:c { BNVS_#1:c } { ##1 } }
  }
  \cs_new:cpn { BNVS_#1_use:c } ##1 {
    \use:c { \use:c { BNVS_#1:c } { ##1 } }
  }
  \cs_new:cpn { BNVS_#1_use:Nc } ##1 ##2 {
    \BNVS_use_raw:Nc
      ##1 { \use:c { BNVS_#1:c } { ##2 } }
  }
  \cs_new:cpn { BNVS_#1_use:nc } ##1 ##2 {
    \BNVS_use_raw:nc
      { ##1 } { \use:c { BNVS_#1:c } { ##2 } }
  }
}
\cs_new:Npn \BNVS_v_new:c #1 {
  \cs_new:cpn { BNVS_#1_use:Nv } ##1 ##2 {
    \BNVS_use_raw:nc
      { \exp_args:NV ##1 }
      { \BNVS_use_raw:c { BNVS_#1:c } { ##2 } }
  }
  \cs_new:cpn { BNVS_#1_use:nv } ##1 ##2 {
    \BNVS_use_raw:nc
      { \exp_args:NnV \use:n { ##1 } }
      { \BNVS_use_raw:c { BNVS_#1:c } { ##2 } }
  }
}
\BNVS_N_new:c { bool }
\BNVS_N_new:c { int }
\BNVS_v_new:c { int }
\BNVS_N_new:c { tl }
\BNVS_v_new:c { tl }
\BNVS_N_new:c { str }
\BNVS_v_new:c { str }
\BNVS_N_new:c { seq }
\BNVS_v_new:c { seq }
\cs_undefine:N \BNVS_N_new:c
\cs_new:Npn \BNVS_use:Ncn #1 #2 #3 {
  \BNVS_use_raw:c { BNVS_#3_use:Nc }   #1   { #2 }
}
\cs_new:Npn \BNVS_use:ncn #1 #2 #3 {
  \BNVS_use_raw:c { BNVS_#3_use:nc } { #1 } { #2 }
}
\cs_new:Npn \BNVS_use:Nvn #1 #2 #3 {
  \BNVS_use_raw:c { BNVS_#3_use:Nv }   #1   { #2 }
}
\cs_new:Npn \BNVS_use:nvn #1 #2 #3 {
  \BNVS_use_raw:c { BNVS_#3_use:nv } { #1 } { #2 }
}
\cs_new:Npn \BNVS_use:Ncncn #1 #2 #3 {
  \BNVS_use:ncn {
    \BNVS_use:Ncn   #1   { #2 } { #3 }
  }
}
\cs_new:Npn \BNVS_use:ncncn #1 #2 #3 {
  \BNVS_use:ncn {
    \BNVS_use:ncn { #1 } { #2 } { #3 }
  }
}
\cs_new:Npn \BNVS_use:Nvncn #1 #2 #3 {
  \BNVS_use:ncn {
    \BNVS_use:Nvn   #1   { #2 } { #3 }
  }
}
\cs_new:Npn \BNVS_use:nvncn #1 #2 #3 {
  \BNVS_use:ncn {
    \BNVS_use:nvn { #1 } { #2 } { #3 }
  }
}
\cs_new:Npn \BNVS_use:Ncncncn #1 #2 #3 #4 #5 {
  \BNVS_use:ncn {
    \BNVS_use:Ncncn   #1   { #2 } { #3 } { #4 } { #5 }
  }
}
\cs_new:Npn \BNVS_use:ncncncn #1 #2 #3 #4 #5 {
  \BNVS_use:ncn {
    \BNVS_use:ncncn { #1 } { #2 } { #3 } { #4 } { #5 }
  }
}
\cs_new:Npn \BNVS_new_c:nc #1 #2 {
  \BNVS_new:cpn { #1_#2:c } {
    \BNVS_use_raw:c { BNVS_#1_use:nc } { \BNVS_use_raw:c { #1_#2:N } }
  }
}
\cs_new:Npn \BNVS_new_cn:nc #1 #2 {
  \BNVS_new:cpn { #1_#2:cn } ##1 {
    \BNVS_use:ncn { \BNVS_use_raw:c { #1_#2:Nn } } { ##1 } { #1 }
  }
}
\cs_new:Npn \BNVS_new_cnn:ncN #1 #2 #3 {
  \BNVS_new:cpn { #2:cnn } ##1 {
    \BNVS_use:Ncn { #3 } { ##1 } { #1 }
  }
}
\cs_new:Npn \BNVS_new_cnn:nc #1 #2 {
  \BNVS_use_raw:nc {
    \BNVS_new_cnn:ncN { #1 } { #1_#2 }
  } { #1_#2:Nnn }
}
\cs_new:Npn \BNVS_new_cnv:ncN #1 #2 #3 {
  \BNVS_new:cpn { #2:cnv } ##1 ##2 {
    \BNVS_tl_use:nv {
      \BNVS_use:Ncn #3 { ##1 } { #1 } {  ##2 }
    }
  }
}
\cs_new:Npn \BNVS_new_cnv:nc #1 #2 {
  \BNVS_use_raw:nc {
    \BNVS_new_cnv:ncN { #1 } { #1_#2 }
  } { #1_#2:Nnn }
}
\cs_new:Npn \BNVS_new_cnx:ncN #1 #2 #3 {
  \BNVS_new:cpn { #2:cnx } ##1 ##2 {
    \exp_args:Nnx \use:n {
      \BNVS_use:Ncn #3 { ##1 } { #1 } {  ##2 }
    }
  }
}
\cs_new:Npn \BNVS_new_cnx:nc #1 #2 {
  \BNVS_use_raw:nc {
    \BNVS_new_cnx:ncN { #1 } { #1_#2 }
  } { #1_#2:Nnn }
}
\cs_new:Npn \BNVS_new_cc:ncNn #1 #2 #3 #4 {
  \BNVS_new:cpn { #2:cc } ##1 ##2 {
    \BNVS_use:Ncncn #3 { ##1 } { #1 } { ##2 } { #4 }
  }
}
\cs_new:Npn \BNVS_new_cc:ncn #1 #2 {
  \BNVS_use_raw:nc {
    \BNVS_new_cc:ncNn { #1 } { #1_#2 }
  } { #1_#2:NN }
}
\cs_new:Npn \BNVS_new_cc:nc #1 #2 {
  \BNVS_new_cc:ncn { #1 } { #2 } { #1 }
}
\cs_new:Npn \BNVS_new_cn:ncNn #1 #2 #3 #4 {
  \BNVS_new:cpn { #2:cn } ##1 {
    \BNVS_use:Ncn #3 { ##1 } { #1 }
  }
}
\cs_new:Npn \BNVS_new_cn:ncn #1 #2 {
  \BNVS_use_raw:nc {
    \BNVS_new_cn:ncNn { #1 } { #1_#2 }
  } { #1_#2:Nn }
}
\cs_new:Npn \BNVS_new_cv:ncNn #1 #2 #3 #4 {
  \BNVS_new:cpn { #2:cv } ##1 ##2 {
    \BNVS_use:nvn {
      \BNVS_use:Ncn #3 { ##1 } { #1 }
    } { ##2 } { #4 }
  }
}
\cs_new:Npn \BNVS_new_cv:ncn #1 #2 {
  \BNVS_use_raw:nc {
    \BNVS_new_cv:ncNn { #1 } { #1_#2 }
  } { #1_#2:Nn }
}
\cs_new:Npn \BNVS_new_cv:nc #1 #2 {
  \BNVS_new_cv:ncn { #1 } { #2 } { #1 }
}
\cs_new:Npn \BNVS_l_use:Ncn #1 #2 #3 {
  \BNVS_use_raw:Nc   #1   { \BNVS_l:cn { #2 } { #3 } }
}
\cs_new:Npn \BNVS_l_use:ncn #1 #2 #3 {
  \BNVS_use_raw:nc { #1 } { \BNVS_l:cn { #2 } { #3 } }
}
\cs_new:Npn \BNVS_g_use:Ncn #1 #2 #3 {
  \BNVS_use_raw:Nc   #1   { \BNVS_g:cn { #2 } { #3 } }
}
\cs_new:Npn \BNVS_g_use:ncn #1 #2 #3 {
  \BNVS_use_raw:nc { #1 } { \BNVS_g:cn { #2 } { #3 } }
}
\cs_new:Npn \BNVS_g_prop_use:Nc #1 #2 {
  \BNVS_use_raw:Nc   #1   { \BNVS_g:cn { #2 } { prop } }
}
\cs_new:Npn \BNVS_g_prop_use:nc #1 #2 {
  \BNVS_use_raw:nc { #1 } { \BNVS_g:cn { #2 } { prop } }
}
\cs_new:Npn \BNVS_exp_args:Nvvv #1 #2 #3 #4 {
  \BNVS_use:ncncncn { \exp_args:NVVV #1 }
    { #2 } { tl } { #3 } { tl } { #4 } { tl }
}
\cs_generate_variant:Nn \prg_new_conditional:Npnn { c }
\cs_new:Npn \BNVS_new_conditional:cpnn #1 {
  \prg_new_conditional:cpnn { \BNVS:c { #1 } }
}
\cs_generate_variant:Nn \prg_generate_conditional_variant:Nnn { c }
\cs_new:Npn \BNVS_generate_conditional_variant:cnn #1 {
  \prg_generate_conditional_variant:cnn { \BNVS:c { #1 } }
}
\cs_new:Npn \BNVS_new_conditional_v:cNnn #1 #2 #3 #4 {
  \BNVS_new_conditional:cpnn { #1 } ##1 ##2 { #4 } {
    \BNVS_use:Nvn #2 { ##1 } { #3 } { ##2 } {
      \prg_return_true:
    } {
      \prg_return_false:
    }
  }
}
\cs_new:Npn \BNVS_new_conditional_v:cnnn #1 #2 #3 {
  \BNVS_use:nc {
    \BNVS_new_conditional_v:cNnn { #1:v#3 }
  } { #1:n #3 TF } { #2 }
}
\cs_new:Npn \BNVS_new_conditional_vn:cnn #1 #2 {
  \BNVS_new_conditional_v:cnnn { #1 } { #2 } { n }
}
\cs_new:Npn \BNVS_new_conditional_vc:cNnn #1 #2 #3 #4 {
  \BNVS_new_conditional:cpnn { #1:vc } ##1 ##2 { #4 } {
    \BNVS_use:Nvn #2 { ##1 } { #3 } { ##2 } {
      \prg_return_true:
    } {
      \prg_return_false:
    }
  }
}
\cs_new:Npn \BNVS_new_conditional_vc:cnn #1 {
  \BNVS_use:nc {
    \BNVS_new_conditional_vc:cNnn { #1 }
  } { #1:ncTF }
}
\cs_new:Npn \BNVS_new_conditional_vc:cNn #1 #2 #3 {
  \BNVS_new_conditional:cpnn { #1:vc } ##1 ##2 { #3 } {
    \BNVS_tl_use:Nv #2 { ##1 } { ##2 } {
      \prg_return_true:
    } {
      \prg_return_false:
    }
  }
}
\cs_new:Npn \BNVS_new_conditional_vc:cn #1 {
  \BNVS_use:nc {
    \BNVS_new_conditional_vc:cNn { #1 }
  } { #1:ncTF }
}
\cs_new:Npn \BNVS_new_conditional_cc:cnnn #1 #2 #3 #4 {
  \BNVS_new_conditional:cpnn { #1:cc } ##1 ##2 { #4 } {
    \BNVS_use:ncncn {
      \BNVS_use_raw:c { #1:NNTF }
    } { ##1 } { #2 } { ##2 } { #3 } {
      \prg_return_true:
    } {
      \prg_return_false:
    }
  }
}
\cs_new:Npn \BNVS_regex_use:Nc #1 #2 {
  \BNVS_use_raw:Nc #1 { c \BNVS:c { #2 } _regex }
}
\BNVS_new_conditional:cpnn { match_once:Nn } #1 #2 { T, F, TF } {
  \BNVS_use:ncn {
    \regex_extract_once:NnNTF #1 { #2 }
  } { match } { seq } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { match_once:Nv } #1 #2 { T, F, TF } {
  \BNVS_use:ncncn {
    \exp_args:NNV
    \regex_extract_once:NnNTF #1
  } { #2 } { tl } { match } { seq } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { match_once:nn } #1 #2 { T, F, TF } {
  \BNVS_use:ncn {
    \regex_extract_once:nnNTF { #1 } { #2 }
  } { match } { seq } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { regex_split:cnc } #1 #2 #3 { T, F, TF } {
  \BNVS_seq_use:nc {
    \BNVS_regex_use:Nc \regex_split:NnNTF { #1 } { #2 }
  } { #3 } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { regex_split:cn } #1 #2 { T, F, TF } {
  \BNVS_seq_use:nc {
    \BNVS_regex_use:Nc \regex_split:NnNTF { #1 } { #2 }
  } { split } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\cs_new:Npn \BNVS_new_conditional_tl_cv:cn #1 #2 {
  \prg_generate_conditional_variant:cnn { tl_#1:Nn } { NV } { TF }
  \BNVS_new_conditional:cpnn { tl_#1:cv } ##1 ##2 { #2 } {
    \BNVS_use:ncncn {
      \BNVS_use_raw:c { tl_#1:NVTF }
    } { ##1 } { tl } { ##2 } { tl } {
      \prg_return_true:
    } {
      \prg_return_false:
    }
  }
}
\cs_new:Npn \BNVS_new_conditional_vnc:cNn #1 #2 #3 {
  \BNVS_new_conditional:cpnn { #1:vnc } ##1 ##2 ##3 { #3 } {
    \BNVS_tl_use:Nv #2 { ##1 } { ##2 } { ##3 } {
      \prg_return_true:
    } {
      \prg_return_false:
    }
  }
}
\cs_new:Npn \BNVS_new_conditional_vnc:cn #1 {
  \BNVS_use:nc {
    \BNVS_new_conditional_vnc:cNn { #1 }
  } { #1:nncTF }
}
\cs_new:Npn \BNVS_new_conditional_vvnc:cNn #1 #2 #3 {
  \BNVS_new_conditional:cpnn { #1:vvnc } ##1 ##2 ##3 ##4 { #3 } {
    \BNVS_tl_use:nv {
      \BNVS_tl_use:Nv #2 { ##1 }
    } { ##2 } { ##3 } { ##4 } {
      \prg_return_true:
    } {
      \prg_return_false:
    }
  }
}
\cs_new:Npn \BNVS_new_conditional_vvnc:cn #1 {
  \BNVS_use:nc {
    \BNVS_new_conditional_vvnc:cNn { #1 }
  } { #1:nnncTF }
}
\cs_new:Npn \BNVS_new_conditional_vvvc:cNn #1 #2 #3 {
  \BNVS_new_conditional:cpnn { #1:vvvc } ##1 ##2 ##3 ##4 { #3 } {
    \BNVS_tl_use:nv {
      \BNVS_tl_use:nv {
        \BNVS_tl_use:Nv #2 { ##1 }
      } { ##2 }
    } { ##3 } { ##4 } {
      \prg_return_true:
    } {
      \prg_return_false:
    }
  }
}
\cs_new:Npn \BNVS_new_conditional_vvvc:cn #1 {
  \BNVS_use:nc {
    \BNVS_new_conditional_vvvc:cNn { #1 }
  } { #1:nnncTF }
}
\cs_new:Npn \BNVS_new_conditional_vvc:cNn #1 #2 #3 {
  \BNVS_new_conditional:cpnn { #1:vvc } ##1 ##2 ##3 { #3 } {
    \BNVS_tl_use:nv {
      \BNVS_tl_use:Nv #2 { ##1 }
    } { ##2 } { ##3 } {
      \prg_return_true:
    } {
      \prg_return_false:
    }
  }
}
\cs_new:Npn \BNVS_new_conditional_vvc:cn #1 {
  \BNVS_use:nc {
    \BNVS_new_conditional_vvc:cNn { #1 }
  } { #1:nncTF }
}
\cs_new:Npn \BNVS_new_tl_c:c {
  \BNVS_new_c:nc { tl }
}
\BNVS_new_tl_c:c { clear }
\BNVS_new_tl_c:c { use }
\BNVS_new_tl_c:c { count }

\BNVS_new:cpn { tl_set_eq:cc } #1 #2 {
  \BNVS_use:ncncn { \tl_set_eq:NN } { #1 } { tl } { #2 } { tl }
}
\cs_new:Npn \BNVS_new_tl_cn:c {
  \BNVS_new_cn:nc { tl }
}
\cs_new:Npn \BNVS_new_tl_cv:c #1 {
  \BNVS_new_cv:ncn { tl } { #1 } { tl }
}
\BNVS_new_tl_cn:c { set }
\BNVS_new_tl_cv:c { set }
\BNVS_new:cpn { tl_set:cx } {
  \exp_args:Nnx \__bnvs_tl_set:cn
}
\BNVS_new_tl_cn:c { put_right }
\BNVS_new_tl_cv:c { put_right }
\BNVS_new:cpn { tl_put_right:cx } {
  \exp_args:Nnnx \BNVS_use:c { tl_put_right:cn }
}
\BNVS_new_tl_cn:c { put_left }
\BNVS_new_tl_cv:c { put_left }
\BNVS_new:cpn { tl_put_left:cx } {
  \exp_args:Nnnx \BNVS_use:c { tl_put_left:cn }
}
\BNVS_new_conditional_tl_cv:cn { put_left } { T, F, TF }
\cs_new:Npn \BNVS_new_conditional_c:ncNn #1 #2 #3 #4 {
  \BNVS_new_conditional:cpnn { #2 } ##1 { #4 } {
    \BNVS_use:Ncn #3 { ##1 } { #1 } {
      \prg_return_true:
    } {
      \prg_return_false:
    }
  }
}
\cs_new:Npn \BNVS_new_conditional_c:ncn #1 #2 {
  \BNVS_use_raw:nc {
    \BNVS_new_conditional_c:ncNn { #1 } { #1_#2:c }
  } { #1_#2:NTF }
}
\BNVS_new_conditional_c:ncn { tl } { if_empty } { p, T, F, TF }
\BNVS_new_conditional:cpnn { tl_if_blank:v } #1 { T, F, TF } {
  \BNVS_tl_use:Nv \tl_if_blank:nTF { #1 } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\cs_new:Npn \BNVS_new_conditional_cn:ncNn #1 #2 #3 #4 {
  \BNVS_new_conditional:cpnn { #2:cn } ##1 ##2 { #4 } {
    \BNVS_use:Ncn #3 { ##1 } { #1 } { ##2 } {
      \prg_return_true:
    } {
      \prg_return_false:
    }
  }
}
\cs_new:Npn \BNVS_new_conditional_cn:ncn #1 #2 {
  \BNVS_use_raw:nc {
    \BNVS_new_conditional_cn:ncNn { #1 } { #1_#2 }
  } { #1_#2:NnTF }
}
\BNVS_new_conditional_cn:ncn { tl } { if_eq } { T, F, TF }
\cs_new:Npn \BNVS_new_conditional_cv:ncNn #1 #2 #3 #4 {
  \BNVS_new_conditional:cpnn { #2:cv } ##1 ##2 { #4 } {
    \BNVS_use:nvn {
      \BNVS_use:Ncn #3 { ##1 } { #1 }
    } { ##2 } { #1 } {
      \prg_return_true:
    } {
      \prg_return_false:
    }
  }
}
\cs_new:Npn \BNVS_new_conditional_cv:ncn #1 #2 {
  \BNVS_use_raw:nc {
    \BNVS_new_conditional_cv:ncNn { #1 } { #1_#2 }
  } { #1_#2:NnTF }
}
\BNVS_new_conditional_cv:ncn { tl } { if_eq } { T, F, TF }
\cs_new:Npn \BNVS_new_conditional_vn:ncNn #1 #2 #3 #4 {
  \BNVS_new_conditional:cpnn { #2:vn } ##1 ##2 { #4 } {
    \BNVS_use:Nvn #3 { ##1 } { #1 } { ##2 } {
      \prg_return_true:
    } {
      \prg_return_false:
    }
  }
}
\cs_new:Npn \BNVS_new_conditional_vn:ncn #1 #2 {
  \BNVS_use_raw:nc {
    \BNVS_new_conditional_vn:ncNn { #1 } { #1_#2 }
  } { #1_#2:nnTF }
}
\BNVS_new_conditional_vn:ncn { str } { if_eq } { T, F, TF }
\cs_new:Npn \BNVS_new_conditional_vv:ncNn #1 #2 #3 #4 {
  \BNVS_new_conditional:cpnn { #2:vv } ##1 ##2 { #4 } {
    \BNVS_use:nvn {
      \BNVS_use:Nvn #3 { ##1 } { #1 }
    }  { ##2 } { #1 } {
      \prg_return_true:
    } {
      \prg_return_false:
    }
  }
}
\cs_new:Npn \BNVS_new_conditional_vv:ncn #1 #2 {
  \BNVS_use_raw:nc {
    \BNVS_new_conditional_vv:ncNn { #1 } { #1_#2 }
  } { #1_#2:nnTF }
}
\BNVS_new_conditional_vv:ncn { str } { if_eq } { T, F, TF }
\BNVS_new_c:nc   { seq } { count }
\BNVS_new_c:nc   { seq } { clear }
\BNVS_new_cn:nc  { seq } { use }
\BNVS_new_cn:nc  { seq } { item }
\BNVS_new_cn:nc  { seq } { remove_all }
\BNVS_new_cn:nc  { seq } { map_inline }
\BNVS_new_cc:nc  { seq } { set_eq }
\BNVS_new_cv:ncn { seq } { put_left  } { tl }
\BNVS_new_cn:ncn { seq } { put_right } { tl }
\BNVS_new_cv:ncn { seq } { put_right } { tl }
\BNVS_new_cnn:nc { seq } { set_split }
\BNVS_new_cnv:nc { seq } { set_split }
\BNVS_new_cnx:nc { seq } { set_split }
\BNVS_new_cc:ncn { seq } { pop_left  } { tl }
\BNVS_new_cc:ncn { seq } { pop_right } { tl }
\cs_new:Npn \BNVS_new_conditional_cc:ncnn #1 #2 #3 #4 {
  \BNVS_new_conditional:cpnn { #1_#2:cc } ##1 ##2 { #4 } {
    \BNVS_use:ncncn {
      \BNVS_use_raw:c { #1_#2:NNTF }
    } { ##1 } { #1 } { ##2 } { #3 } {
      \prg_return_true:
    } {
      \prg_return_false:
    }
  }
}
\BNVS_new_conditional_c:ncn { seq } { if_empty  } { T, F, TF }
\BNVS_new_conditional_cc:ncnn
  { seq } { get_right } { tl } { T, F, TF }
\BNVS_new_conditional_cc:ncnn
  { seq } { pop_left  } { tl } { T, F, TF }
\BNVS_new_conditional_cc:ncnn
  { seq } { pop_right } { tl } { T, F, TF }
\BNVS_new_c:nc   { int } { new  }
\BNVS_new_c:nc   { int } { use  }
\BNVS_new_c:nc   { int } { zero }
\BNVS_new_c:nc   { int } { incr }
\BNVS_new_c:nc   { int } { decr }
\BNVS_new_cn:nc  { int } { set  }
\BNVS_new_cv:ncn { int } { set  } { int }
\BNVS_new_conditional:cpnn { prop_get:Nnc } #1 #2 #3 { T, F, TF } {
  \BNVS_use:ncn {
    \prop_get:NnNTF #1 { #2 }
  } { #3 } { tl } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\cs_new:Npn \BeanovesDebugOn {
  \__bnvs_warning:x { Debugging~mode~requires~\jobname-debug.sty,~typeset~\jobname.dtx}
}
\cs_new:Npn \BeanovesDebugOff { \BeanovesDebugOn }
\cs_set_eq:NN \BNVS_begin: \group_begin:
\cs_set_eq:NN \BNVS_end: \group_end:
\tl_new:N \l__bnvs_id_last_tl
\tl_set:Nn \l__bnvs_id_last_tl { ?! }
\tl_new:N \l__bnvs_a_tl
\tl_new:N \l__bnvs_b_tl
\tl_new:N \l__bnvs_c_tl
\tl_new:N \l__bnvs_V_tl
\tl_new:N \l__bnvs_A_tl
\tl_new:N \l__bnvs_L_tl
\tl_new:N \l__bnvs_Z_tl
\tl_new:N \l__bnvs_ans_tl
\tl_new:N \l__bnvs_key_tl
\tl_new:N \l__bnvs_key_base_tl
\tl_new:N \l__bnvs_id_tl
\tl_new:N \l__bnvs_n_tl
\tl_new:N \l__bnvs_path_tl
\tl_new:N \l__bnvs_group_tl
\tl_new:N \l__bnvs_scan_tl
\tl_new:N \l__bnvs_query_tl
\tl_new:N \l__bnvs_token_tl
\tl_new:N \l__bnvs_root_tl
\tl_new:N \l__bnvs_n_incr_tl
\tl_new:N \l__bnvs_incr_tl
\tl_new:N \l__bnvs_post_tl
\tl_new:N \l__bnvs_suffix_tl
\int_new:N \g__bnvs_call_int
\int_new:N \l__bnvs_int
\seq_new:N \g__bnvs_def_seq
\seq_new:N \l__bnvs_a_seq
\seq_new:N \l__bnvs_b_seq
\seq_new:N \l__bnvs_ans_seq
\seq_new:N \l__bnvs_match_seq
\seq_new:N \l__bnvs_split_seq
\seq_new:N \l__bnvs_path_seq
\seq_new:N \l__bnvs_path_base_seq
\seq_new:N \l__bnvs_query_seq
\seq_new:N \l__bnvs_token_seq
\bool_new:N \l__bnvs_in_frame_bool
\bool_set_false:N \l__bnvs_in_frame_bool
\bool_new:N \l__bnvs_parse_bool
\bool_new:N \l__bnvs_provide_bool
\BNVS_new:cpn { provide_on: } {
  \bool_set_true:N \l__bnvs_provide_bool
}
\BNVS_new:cpn { provide_off: } {
  \bool_set_false:N \l__bnvs_provide_bool
}
\__bnvs_provide_off:
\BNVS_new_conditional:cpnn { if_provide: } { p, T, F, TF } {
  \bool_if:NTF \l__bnvs_provide_bool {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\int_const:Nn \c__bnvs_max_call_int { 2048 }
\cs_set:Npn  \__bnvs_call_greset: {
  \int_gset:Nn \g__bnvs_call_int { \c__bnvs_max_call_int }
}
\BNVS_new_conditional:cpnn { call: } { T, F, TF } {
  \int_gdecr:N \g__bnvs_call_int
  \int_compare:nNnTF \g__bnvs_call_int > 0 {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\prop_new:N \g__bnvs_prop
\BNVS_new:cpn { gput:nnn } #1 #2 {
  \prop_gput:Nnn \g__bnvs_prop { #2 / #1 }
}
\BNVS_new:cpn { gput:nnv } #1 #2 {
  \BNVS_tl_use:nv {
    \__bnvs_gput:nnn { #1 } { #2 }
  }
}
\BNVS_new:cpn { item:nn } #1 #2 {
  \prop_item:Nn \g__bnvs_prop { #2 / #1 }
}
\BNVS_new:cpn { gremove:nn } #1 #2 {
  \prop_gremove:Nn \g__bnvs_prop { #2 / #1 }
}
\BNVS_new:cpn { gclear:n } #1 {
  \clist_map_inline:nn { V, A, Z, L } {
    \__bnvs_gremove:nn { ##1 } { #1 }
  }
  \__bnvs_cache_gclear:n { #1 }
}
\BNVS_new:cpn { gclear: } {
  \prop_gclear:N \g__bnvs_prop
}
\BNVS_generate_variant:cn { gclear:n } { V }
\BNVS_new:cpn { gclear:v } {
   \BNVS_tl_use:Nc \__bnvs_gclear:V
}
\BNVS_new_conditional:cpnn { if_in:nn } #1 #2 { p, T, F, TF } {
  \prop_if_in:NnTF \g__bnvs_prop { #2 / #1 } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { if_in:n } #1 { p, T, F, TF } {
  \bool_if:nTF {
       \__bnvs_if_in_p:nn V { #1 }
    || \__bnvs_if_in_p:nn A { #1 }
    || \__bnvs_if_in_p:nn Z { #1 }
  } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { if_in:v } #1 { p, T, F, TF } {
  \BNVS_tl_use:Nv \__bnvs_if_in:nTF { #1 }
    { \prg_return_true: } { \prg_return_false: }
}

\BNVS_new:cpn { gprovide:nnnT } #1 #2 #3 #4 {
  \prop_if_in:NnF \g__bnvs_prop { #2 / #1 } {
    #4
    \prop_gput:Nnn \g__bnvs_prop { #2 / #1 } { #3 }
  }
}
\BNVS_new_conditional:cpnn { get:nnc } #1 #2 #3 { T, F, TF } {
  \BNVS_tl_use:nc {
    \prop_get:NnNTF \g__bnvs_prop { #2 / #1 }
  } { #3 } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\prg_generate_conditional_variant:Nnn
  \__bnvs_get:nnc {nV} { T, F, TF }
\prg_new_conditional:Npnn \__bnvs_get:nvc #1 #2 #3 { T, F, TF } {
  \BNVS_tl_use:nc {
    \__bnvs_get:nVcTF { #1 }
  } { #2 } { #3 } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\prop_new:N \g__bnvs_cache_prop
\BNVS_new:cpn { cache_gput:nnn } #1 #2 {
  \prop_gput:Nnn \g__bnvs_cache_prop { #2 / #1 }
}
\cs_generate_variant:Nn \__bnvs_cache_gput:nnn { nV, nnV }
\BNVS_new:cpn { cache_gput:nvn } #1 {
  \BNVS_tl_use:nc {
    \__bnvs_cache_gput:nVn { #1 }
  }
}
\BNVS_new:cpn { cache_gput:nnv } #1 #2 {
  \BNVS_tl_use:nc {
    \__bnvs_cache_gput:nnV { #1 } { #2 }
  }
}
\BNVS_new:cpn { cache_item:nn } #1 #2 {
  \prop_item:Nn \g__bnvs_cache_prop { #2 / #1 }
}
\BNVS_new:cpn { cache_gremove:nn } #1 #2 {
  \prop_gremove:Nn \g__bnvs_cache_prop { #2 / #1 }
}
\BNVS_new:cpn { cache_gclear:n } #1 {
  \clist_map_inline:nn { V, A, Z, L, P, N } {
    \prop_gremove:Nn \g__bnvs_cache_prop { #1 / ##1 }
  }
}
\BNVS_new:cpn { cache_gclear: } {
  \prop_gclear:N \g__bnvs_cache_prop
}
\prg_new_conditional:Npnn \__bnvs_cache_if_in:nn #1 #2 { p, T, F, TF } {
  \prop_if_in:NnTF \g__bnvs_cache_prop { #2 / #1 } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { cache_get:nnc } #1 #2 #3 { p, T, F, TF } {
  \BNVS_tl_use:nc {
    \prop_get:NnNTF \g__bnvs_cache_prop { #2 / #1 }
  } { #3 } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\prop_new:N \g__bnvs_v_prop
\BNVS_new:cpn { v_gput:nn } {
  \prop_gput:Nnn \g__bnvs_v_prop
}
\BNVS_new:cpn { v_gput:nv } #1 {
  \BNVS_tl_use:nv {
    \__bnvs_v_gput:nn { #1 }
  }
}
\BNVS_new:cpn { v_item:n } #1 {
  \prop_item:Nn \g__bnvs_v_prop { #1 }
}
\BNVS_new:cpn { v_gremove:n } {
  \prop_gremove:Nn \g__bnvs_v_prop
}
\BNVS_new:cpn { v_gclear: } {
  \prop_gclear:N \g__bnvs_v_prop
}
\BNVS_new_conditional:cpnn { v_if_in:n } #1 { p, T, F, TF } {
  \prop_if_in:NnTF \g__bnvs_v_prop { #1 } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { v_get:nc } #1 #2 { T, F, TF } {
  \BNVS_tl_use:nc {
    \prop_get:NnNTF \g__bnvs_v_prop { #1 }
  } { #2 } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { v_greset:nn } #1 #2 { T, F, TF } {
  \__bnvs_v_if_in:nTF { #1 } {
    \__bnvs_v_gremove:n { #1 }
    \tl_if_empty:nF { #2 } {
      \__bnvs_v_gput:nn { #1 } { #2 }
    }
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { v_greset:vn } #1 #2 { T, F, TF } {
  \BNVS_tl_use:Nv \__bnvs_v_greset:nnTF { #1 } { #2 }
    { \prg_return_true: } { \prg_return_false: }
}
\BNVS_new_conditional:cpnn { greset_all:nn } #1 #2 { T, F, TF } {
  \__bnvs_if_in:nTF { #1 } {
    \BNVS_begin:
    \clist_map_inline:nn { V, A, Z, L } {
      \__bnvs_get:nncT { ##1 } { #1 } { a } {
        \__bnvs_quark_if_nil:cT { a } {
          \__bnvs_cache_get:nncTF { ##1 } { #1 } { a } {
            \__bnvs_gput:nnv { ##1 } { #1 } { a }
          } {
            \__bnvs_gput:nnn { ##1 } { #1 } { 1 }
          }
        }
      }
    }
    \BNVS_end:
    \__bnvs_cache_gclear:n { #1 }
    \__bnvs_v_greset:nnT { #1 } { #2 } {}
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { greset_all:vn } #1 #2 { T, F, TF } {
  \BNVS_tl_use:Nv \__bnvs_greset_all:nnTF { #1 } { #2 }
    { \prg_return_true: } { \prg_return_false: }
}
\BNVS_new:cpn { gclear_all: } {
  \__bnvs_gclear:
  \__bnvs_cache_gclear:
  \__bnvs_n_gclear:
  \__bnvs_v_gclear:
}
\BNVS_new:cpn { gclear_all:n } #1 {
  \__bnvs_gclear:n { #1 }
  \__bnvs_cache_gclear:n { #1 }
  \__bnvs_n_gremove:n { #1 }
  \__bnvs_v_gremove:n { #1 }
}
\prop_new:N \g__bnvs_n_prop
\BNVS_new:cpn { n_gput:nn } {
  \prop_gput:Nnn \g__bnvs_n_prop
}
\cs_generate_variant:Nn \__bnvs_n_gput:nn { nV }
\BNVS_new:cpn { n_gput:nv } #1 {
  \BNVS_tl_use:nc {
    \__bnvs_n_gput:nV { #1 }
  }
}
\BNVS_new:cpn { n_gprovide:nn } #1 #2 {
  \prop_if_in:NnF \g__bnvs_n_prop { #1 } {
    \prop_gput:Nnn \g__bnvs_n_prop { #1 } { #2 }
  }
}
\BNVS_new:cpn { n_item:n } #1 {
  \prop_item:Nn \g__bnvs_n_prop { #1 }
}
\BNVS_new:cpn { n_gremove:n } {
  \prop_gremove:Nn \g__bnvs_n_prop
}
\BNVS_generate_variant:cn { n_gremove:n } { V }
\BNVS_new:cpn { n_gremove:v } {
  \BNVS_tl_use:nc {
    \__bnvs_n_gremove:V
  }
}
\BNVS_new:cpn { n_gclear: } {
  \prop_gclear:N \g__bnvs_n_prop
}
\cs_generate_variant:Nn \__bnvs_n_gremove:n { V }
\prg_new_conditional:Npnn \__bnvs_n_if_in:n #1 { p, T, F, TF } {
  \prop_if_in:NnTF \g__bnvs_n_prop { #1 } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\prg_new_conditional:Npnn \__bnvs_n_get:nc #1 #2 { T, F, TF } {
  \__bnvs_prop_get:NncTF \g__bnvs_n_prop { #1 } { #2 } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\regex_const:Nn \c__bnvs_name_regex {
  [[:alpha:]_][[:alnum:]_]*
}
\regex_const:Nn \c__bnvs_id_regex {
  (?: \ur{c__bnvs_name_regex} | [?] )? !
}
\regex_const:Nn \c__bnvs_path_regex {
  (?: \. \ur{c__bnvs_name_regex} | \. [-+]? \d+ )*
}
\regex_const:Nn \c__bnvs_A_key_Z_regex {
  \A ( ( \ur{c__bnvs_id_regex} ? ) \ur{c__bnvs_name_regex} )
  ( \ur{c__bnvs_path_regex} ) \Z
}
\regex_const:Nn \c__bnvs_TEST_A_key_n_Z_regex {
  \A ( ( \ur{c__bnvs_id_regex} ? )
  \ur{c__bnvs_name_regex}
  (?: \. \ur{c__bnvs_name_regex} | \. [-+]? \d+ )*? )
  ( \. n )? \Z
}
\regex_const:Nn \c__bnvs_colons_regex { :(:+)? }
\regex_const:Nn \c__bnvs_split_regex {
  \s* ( ? :
      \+\+
    ( ( \ur{c__bnvs_id_regex}? ) \ur{c__bnvs_name_regex} )
    ( \ur{c__bnvs_path_regex} )
    | ( ( \ur{c__bnvs_id_regex}? ) \ur{c__bnvs_name_regex} )
      ( \ur{c__bnvs_path_regex} )
      (?: \.(\+)\+n
      |  \s* \+= \s* ( \S+ )
      | (\+)\+
    )?
  ) \s*
}
\RequirePackage{keyval}
\define@key{beamerframe}{beanoves~id}[]{
  \tl_set:Nx \l__bnvs_id_last_tl { #1 ! }
}
\AddToHook{env/beamer@frameslide/before}{
  \__bnvs_n_gclear:
  \__bnvs_v_gclear:
  \bool_set_true:N \l__bnvs_in_frame_bool
}
\AddToHook{env/beamer@frameslide/after}{
  \bool_set_false:N \l__bnvs_in_frame_bool
}
\BNVS_new_conditional:cpnn { split_pop_left:c } #1 { T, F, TF } {
  \__bnvs_seq_pop_left:ccTF { split } { #1 } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\exp_args_generate:n { VVV }
\BNVS_new_conditional:cpnn { range_set:cccn } #1 #2 #3 #4 { T, F, TF } {
  \BNVS_begin:
  \__bnvs_tl_clear:c { a }
  \__bnvs_tl_clear:c { b }
  \__bnvs_tl_clear:c { c }
  \__bnvs_regex_split:cnTF { colons } { #4 } {
    \__bnvs_seq_pop_left:ccT { split } { a } {
      \__bnvs_seq_pop_left:ccT { split } { b } {
        \__bnvs_tl_if_empty:cTF { b } {
          \__bnvs_split_pop_left:cTF { b } {
            \__bnvs_seq_pop_left:ccT { split } { c } {
              \__bnvs_tl_if_empty:cTF { c } {
                \__bnvs_error:n { Invalid~range~expression(1):~#4 }
              } {
                \int_compare:nNnT { \__bnvs_tl_count:c { c } } > { 1 } {
                  \__bnvs_error:n { Invalid~range~expression(2):~#4 }
                }
                \__bnvs_split_pop_left:cTF { c } {
                  \__bnvs_seq_if_empty:cF { split } {
                    \__bnvs_error:n { Invalid~range~expression(3):~#4 }
                  }
                } {
                  \__bnvs_error:n { Internal~error }
                }
              }
            }
          } {
          }
        } {
          \int_compare:nNnT { \__bnvs_tl_count:c { b } } > { 1 } {
            \__bnvs_error:n { Invalid~range~expression(4):~#4 }
          }
          \__bnvs_seq_pop_left:ccT { split } { c } {
            \__bnvs_split_pop_left:cTF { b } {
              \__bnvs_tl_if_empty:cTF { b } {
                \__bnvs_seq_pop_left:cc { split } { b }
                \__bnvs_seq_if_empty:cF { split } {
                  \__bnvs_error:n { Invalid~range~expression(5):~#4 }
                }
              } {
                \__bnvs_error:n { Invalid~range~expression(6):~#4 }
              }
            } {
              \__bnvs_tl_clear:c { b }
            }
          }
        }
      }
    }
    \cs_set:Npn \BNVS_next: { }
    \__bnvs_tl_if_empty:cT { a } {
      \__bnvs_tl_if_empty:cT { b } {
        \__bnvs_tl_if_empty:cT { c } {
          \cs_set:Npn \BNVS_next: {
            \__bnvs_error:n { Invalid~range~expression(7):~#3 }
          }
        }
      }
    }
    \BNVS_next:
    \cs_set:Npn \BNVS:nnn ##1 ##2 ##3 {
      \BNVS_end:
      \__bnvs_tl_set:cn { #1 } { ##1 }
      \__bnvs_tl_set:cn { #2 } { ##2 }
      \__bnvs_tl_set:cn { #3 } { ##3 }
    }
    \BNVS_exp_args:Nvvv \BNVS:nnn { a } { b } { c }
    \prg_return_true:
  } {
    \BNVS_end:
    \prg_return_false:
  }
}
\BNVS_new:cpn { range:nnnn } #1 {
  \__bnvs_if_provide:TF {
    \__bnvs_if_in:nnTF A { #1 } {
      \use_none:nnn
    } {
      \__bnvs_if_in:nnTF Z { #1 } {
        \use_none:nnn
      } {
        \__bnvs_if_in:nnTF L { #1 } {
          \use_none:nnn
        } {
          \__bnvs_do_range:nnnn { #1 }
        }
      }
    }
  } {
    \__bnvs_do_range:nnnn { #1 }
  }
}
\BNVS_generate_variant:cn { range:nnnn } { nVVV }
\BNVS_new:cpn { range:nvvv } #1 #2 #3 #4 {
  \BNVS_use:ncncncn {
    \BNVS_use:c { range:nVVV } { #1 }
  } { #2 } { tl } { #3 } { tl } { #4 } { tl }
}
\BNVS_new:cpn { parse_record:n }  #1 {
  \__bnvs_if_provide:TF {
    \__bnvs_gprovide:nnnT V { #1 } { 1 } {
      \__bnvs_gclear:n { #1 }
    }
  } {
    \__bnvs_gclear:n { #1 }
    \__bnvs_gput:nnn V { #1 } { 1 }
  }
}
\cs_generate_variant:Nn \__bnvs_parse_record:n { V }
\BNVS_new:cpn { parse_record:v } {
  \BNVS_tl_use:nc {
    \__bnvs_parse_record:V
  }
}
\BNVS_new:cpn { parse_record:nn } #1 #2 {
  \__bnvs_range_set:cccnTF { a } { b } { c } { #2 } {
    \__bnvs_range:nvvv { #1 } { a } { b } { c }
  } {
    \__bnvs_if_provide:TF {
      \__bnvs_gprovide:nnnT V { #1 } { #2 } {
        \__bnvs_gclear_all:n { #1 }
      }
    } {
      \__bnvs_gclear_all:n { #1 }
      \__bnvs_gput:nnn V { #1 } { #2 }
    }
  }
}
\cs_generate_variant:Nn \__bnvs_parse_record:nn { x, V }
\BNVS_new:cpn { parse_record:vn } {
  \BNVS_tl_use:nc {
    \__bnvs_parse_record:Vn
  }
}
\BNVS_new:cpn { n_parse_record:n } #1 {
  \bool_if:NTF \l__bnvs_n_provide_bool {
    \__bnvs_n_gprovide:nn
  } {
    \__bnvs_n_gput:nn
  }
  { #1 } { 1 }
}
\cs_generate_variant:Nn \__bnvs_n_parse_record:n { V }
\BNVS_new:cpn { n_parse_record:v } {
  \BNVS_tl_use:nc {
    \__bnvs_n_parse_record:V
  }
}
\BNVS_new:cpn { n_parse_record:nn } #1 #2 {
  \__bnvs_range_set:cccnTF { a } { b } { c } { #2 } {
    \__bnvs_error:n { Unexpected~range:~#2 }
  } {
    \__bnvs_if_provide:TF {
      \__bnvs_n_gprovide:nn { #1 } { #2 }
    } {
      \__bnvs_n_gput:nn { #1 } { #2 }
    }
  }
}
\cs_generate_variant:Nn \__bnvs_n_parse_record:nn { x, V }
\BNVS_new:cpn { n_parse_record:vn } {
  \BNVS_tl_use:Nc \__bnvs_n_parse_record:Vn
}
\BNVS_new:cpn { name_id_n_end_export: } {
  \cs_set:Npn \BNVS:nnn ##1 ##2 ##3 {
    \BNVS_end:
    \__bnvs_tl_set:cn { key } { ##1 }
    \__bnvs_tl_set:cn { id } { ##2 }
    \__bnvs_tl_set:cn { n } { ##3 }
  }
  \__bnvs_tl_if_empty:cTF { id } {
    \BNVS_exp_args:Nvvv
    \BNVS:nnn { key } { id_last } { n }
    \__bnvs_tl_put_left:cv { key } { id_last }
  } {
    \BNVS_exp_args:Nvvv
    \BNVS:nnn { key } { id } { n }
    \__bnvs_tl_set:cv { id_last } { id }
  }
}
\BNVS_new_conditional:cpnn { name_id_n_get:n } #1 { T, F, TF } {
  \BNVS_begin:
  \__bnvs_match_once:NnTF \c__bnvs_TEST_A_key_n_Z_regex { #1 } {
    \__bnvs_match_pop_left:cTF { key } {
      \__bnvs_match_pop_left:cTF { key } {
        \__bnvs_match_pop_left:cTF { id } {
          \__bnvs_match_pop_left:cTF { n } {
            \__bnvs_name_id_n_end_export:
            \prg_return_true:
          } {
            \BNVS_end:
            \__bnvs_error:n { LOGICALLY_UNREACHABLE_A_key_n_Z/n }
            \prg_return_false:
          }
        } {
          \BNVS_end:
          \__bnvs_error:n { LOGICALLY_UNREACHABLE_A_key_n_Z/id }
          \prg_return_false:
        }
      } {
        \BNVS_end:
        \__bnvs_error:n { LOGICALLY_UNREACHABLE_A_key_n_Z/name }
        \prg_return_false:
      }
    } {
      \BNVS_end:
      \__bnvs_error:n { LOGICALLY_UNREACHABLE_A_key_n_Z/n }
      \prg_return_false:
    }
  } {
    \BNVS_end:
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { name_id_n_get:v } #1 { T, F, TF } {
  \BNVS_tl_use:nv { \BNVS_use:c { name_id_n_get:nTF } } { #1 } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\BNVS_new:cpn { parse:n } #1 {
  \peek_remove_spaces:n {
    \peek_catcode:NTF \c_group_begin_token {
      \__bnvs_tl_if_empty:cTF { root } {
        \__bnvs_error:n { Unexpected~list~at~top~level. }
      }
      \BNVS_begin:
      \__bnvs_int_incr:c { }
      \__bnvs_tl_set:cx { root } { \__bnvs_int_use:c { } . }
      \cs_set:Npn \bnvs:nw ####1 ####2 \s_stop {
        \regex_match:nnT { \S* } { ####2 } {
          \__bnvs_error:n { Unexpected~####2 }
        }
        \keyval_parse:nnn {
          \__bnvs_parse:n
        } {
          \__bnvs_parse:nn
        } { ####1 }
        \BNVS_end:
      }
      \bnvs:nw
    } {
      \__bnvs_tl_if_empty:cTF { root } {
        \__bnvs_name_id_n_get:nTF { #1 } {
          \__bnvs_tl_if_empty:cTF { n } {
            \__bnvs_parse_record:v
          } {
            \__bnvs_n_parse_record:v
          }
          { key }
        } {
          \__bnvs_error:n { Unexpected~key:~#1 }
        }
      } {
        \__bnvs_int_incr:c { }
        \__bnvs_tl_if_empty:cTF { n } {
          \__bnvs_parse_record:xn
        } {
          \__bnvs_n_parse_record:xn
        } {
          \__bnvs_tl_use:c { root } . \__bnvs_int_use:c { }
        } { #1 }
      }
      \use_none_delimit_by_s_stop:w
    }
  }
  #1 \s_stop
}
\BNVS_new:cpn { do_range:nnnn } #1 #2 #3 #4 {
    \__bnvs_gclear_all:n { #1 }
  \tl_if_empty:nTF { #4 } {
    \tl_if_empty:nTF { #2 } {
      \tl_if_empty:nTF { #3 } {
        \__bnvs_error:n { Not~a~range:~:~#1 }
      } {
        \__bnvs_gput:nnn Z { #1 } { #3 }
        \__bnvs_gput:nnn V { #1 } { \q_nil }
      }
    } {
      \__bnvs_gput:nnn A { #1 } { #2 }
      \__bnvs_gput:nnn V { #1 } { \q_nil }
      \tl_if_empty:nF { #3 } {
        \__bnvs_gput:nnn Z { #1 } { #3 }
        \__bnvs_gput:nnn L { #1 } { \q_nil }
      }
    }
  } {
    \tl_if_empty:nTF { #2 } {
      \__bnvs_gput:nnn L { #1 } { #4 }
      \tl_if_empty:nF { #3 } {
        \__bnvs_gput:nnn Z { #1 } { #3 }
        \__bnvs_gput:nnn A { #1 } { \q_nil }
        \__bnvs_gput:nnn V { #1 } { \q_nil }
      }
    } {
      \__bnvs_gput:nnn A { #1 } { #2 }
      \__bnvs_gput:nnn L { #1 } { #4 }
      \__bnvs_gput:nnn Z { #1 } { \q_nil }
      \__bnvs_gput:nnn V { #1 } { \q_nil }
    }
  }
}
\cs_new:Npn \BNVS_exp_args:NNcv #1 #2 #3 #4 {
  \BNVS_tl_use:nc { \exp_args:NNnV #1 #2 { #3 } }
    { #4 }
}
\BNVS_new:cpn { end_return_tl:c } #1 {
  \BNVS_tl_use:nv {
    \BNVS_end: \__bnvs_tl_set:cn { #1 }
  } { #1 }
}
\BNVS_new:cpn { end_return_tl:cv } #1 #2 {
  \BNVS_tl_use:nv {
    \BNVS_end: \__bnvs_tl_set:cn { #1 }
  } { #2 }
}
\BNVS_new:cpn { parse:nn } #1 #2 {
  \BNVS_begin:
  \__bnvs_tl_set:cn { a } { #1 }
  \__bnvs_tl_put_left:cv { a } { root }
  \__bnvs_name_id_n_get:vTF { a } {
    \regex_match:nnTF { \S } { #2 } {
      \peek_remove_spaces:n {
        \peek_catcode:NTF \c_group_begin_token {
          \__bnvs_tl_if_empty:cF { n } {
\__bnvs_warning:n { Ignoring~unexpected~suffix~.n:~#1 }
          }
          \BNVS_begin:
          \__bnvs_tl_set:cv { root } { key }
          \int_set:Nn \l__bnvs_int { 0 }
          \cs_set:Npn \BNVS:nn ##1 ##2 \s_stop {
            \regex_match:nnT { \S } { ##2 } {
              \__bnvs_error:n { Unexpected~value~#2 }
            }
            \keyval_parse:nnn {
              \__bnvs_parse:n
            } {
              \__bnvs_parse:nn
            } { ##1 }
            \BNVS_end:
          }
          \BNVS:nn
        } {
          \__bnvs_tl_if_empty:cTF { n } {
            \__bnvs_parse_record:vn
          } {
            \__bnvs_n_parse_record:vn
          }
          { key } { #2 }
          \use_none_delimit_by_s_stop:w
        }
      }
      #2 \s_stop
    } {
      \__bnvs_tl_if_empty:cTF { n } {
        \__bnvs_gclear:v
      } {
        \__bnvs_n_gremove:v
      }
      { key }
    }
  } {
    \__bnvs_error:n { Invalid~key:~#2 }
  }
  \__bnvs_end_return_tl:c { id_last }
}
\BNVS_new:cpn { parse_prepare:N } #1 {
  \tl_set:Nx #1 #1
  \bool_set_false:N \l__bnvs_parse_bool
  \bool_do_until:Nn \l__bnvs_parse_bool {
    \tl_if_in:NnTF #1 {%---[
    ]} {
      \regex_replace_all:nnNF { \[ ([^\]%---)
      ]*%---[(
      ) \] } { { { \1 } } } #1 {
        \bool_set_true:N \l__bnvs_parse_bool
      }
    } {
      \bool_set_true:N \l__bnvs_parse_bool
    }
  }
  \tl_if_in:NnTF #1 {%---[
  ]} {
    \__bnvs_error:n { Unbalanced~%---[
    ]}
  } {
    \tl_if_in:NnT #1 { [%---]
    } {
      \__bnvs_error:n { Unbalanced~[ %---]
      }
    }
  }
}
\NewDocumentCommand \Beanoves { sm } {
  \tl_if_empty:NTF \@currenvir {
    \seq_gput_right:Nn \g__bnvs_def_seq { #2 }
  } {
    \tl_if_eq:NnT \@currenvir { document } {
      \__bnvs_gclear:
    }
    \BNVS_begin:
    \__bnvs_tl_clear:c { root }
    \int_zero:N \l__bnvs_int
    \__bnvs_tl_set:cn { a } { #2 }
    \tl_if_eq:NnT \@currenvir { document } {
      \seq_if_empty:NF \g__bnvs_def_seq {
        \__bnvs_tl_put_left:cx { a } {
          \seq_use:Nn \g__bnvs_def_seq , ,
        }
      }
    }
    \__bnvs_parse_prepare:N \l__bnvs_a_tl
    \IfBooleanTF {#1} {
      \__bnvs_provide_on:
    } {
      \__bnvs_provide_off:
    }
    \exp_args:NnnV
    \keyval_parse:nnn { \__bnvs_parse:n } { \__bnvs_parse:nn } \l__bnvs_a_tl
    \exp_args:NNnV
    \BNVS_end:
    \__bnvs_tl_set:cn { id_last } \l__bnvs_id_last_tl
    \ignorespaces
  }
}
\define@key{beamerframe}{beanoves}{\Beanoves*{#1}}
\cs_set_eq:NN \__bnvs_beamer@frame \beamer@frame
\cs_set:Npn \beamer@frame < #1 > {
  \BNVS_begin:
  \__bnvs_tl_clear:c { ans }
  \__bnvs_scan:nNc { #1 } \__bnvs_eval:nc { ans }
  \BNVS_tl_use:nv {
    \BNVS_end:
    \__bnvs_beamer@frame <
  } { ans } >
}
\cs_set_eq:NN \__bnvs_beamer@masterdecode \beamer@masterdecode
\cs_set:Npn \beamer@masterdecode #1 {
  \BNVS_begin:
  \__bnvs_tl_clear:c { ans }
  \__bnvs_scan:nNc { #1 } \__bnvs_eval:nc { ans }
  \BNVS_tl_use:nv {
    \BNVS_end:
    \__bnvs_beamer@masterdecode
  } { ans }
}
\BNVS_new:cpn { scan_question:T } #1 {
  \__bnvs_seq_pop_left:ccT { token } { token } {
    \__bnvs_tl_if_eq:cnTF { token } { ? } {
      \__bnvs_scan_require_open:
      #1
    } {
      \__bnvs_tl_put_right:cv { ans } { token }
    }
    \__bnvs_scan_question:T { #1 }
  }
}
\BNVS_new:cpn { scan_require_open: } {
  \__bnvs_seq_pop_left:ccTF { token } { token } {
    \tl_if_eq:NnTF \l__bnvs_token_tl { ( %)
    } {
        \__bnvs_int_set:cn { } { 1 }
        \__bnvs_tl_clear:c { query }
        \__bnvs_scan_require_close:
      } {
        \__bnvs_scan_require_open:
      }
    } {
    \__bnvs_fatal:x {Missing~'('%---)
      ~after~a~? }
  }
}
\BNVS_new:cpn { scan_require_close: } {
  \__bnvs_seq_pop_left:ccTF { token } { token } {
    \__bnvs_tl_if_eq:cnTF { token } { ( %---)
    } {
      \__bnvs_int_incr:c { }
      \__bnvs_tl_put_right:cv { query } { token }
      \__bnvs_scan_require_close:
    } {
      \__bnvs_tl_if_eq:cnTF { token } { %(---
        )
      } {
        \__bnvs_int_decr:c {}
        \int_compare:nNnTF { \__bnvs_int_use:c {} } = 0 {
        } {
          \__bnvs_tl_put_right:cv { query } { token }
          \__bnvs_scan_require_close:
        }
      } {
        \__bnvs_tl_put_right:cv { query } { token }
        \__bnvs_scan_require_close:
      }
    }
  } {
    \__bnvs_error:x { Missing~%(---
      `)' }
    \__bnvs_tl_put_right:cx { query } {
      \prg_replicate:nn { \l__bnvs_int } {%(---
      )}
    }
  }
}
\BNVS_new:cpn { scan:nNc } #1 #2 #3 {
  \BNVS_begin:
  \BNVS_set:cpn { fatal:x } ##1 {
    \msg_fatal:nnx { beanoves } { :n }
      { \tl_to_str:n { #1 }:~##1}
  }
  \BNVS_set:cpn { error:x } ##1 {
    \msg_error:nnx { beanoves } { :n }
      { \tl_to_str:n { #1 }:~##1}
  }
  \__bnvs_tl_set:cn { scan } { #1 }
  \__bnvs_tl_clear:c { ans }
  \__bnvs_seq_clear:c { token }
  \regex_split:nnN { } { #1 } \l__bnvs_token_seq
  \__bnvs_scan_question:T {
    \BNVS_tl_use:Nv #2 { query } { ans }
  }
  \BNVS_tl_use:nv {
    \BNVS_end:
    \__bnvs_tl_put_right:cn { #3 }
  } { ans }
}
\exp_args_generate:n { VVx }
\quark_new:N \q__bnvs
\BNVS_set:cpn { end_kip_export_seq:nnnccc } #1 #2 #3 #4 #5 #6 {
  \BNVS_end:
  \tl_if_empty:nTF { #2 } {
    \__bnvs_tl_set:cn { #4 } { #1 }
    \__bnvs_tl_put_left:cv { #4 } { #5 }
  } {
    \__bnvs_tl_set:cn { #4 } { #1 }
    \__bnvs_tl_set:cn { #5 } { #2 }
  }
  \__bnvs_seq_set_split:cnn { #6 } { \q__bnvs } { #3 }
  \__bnvs_seq_remove_all:cn { #6 } { }
}
\BNVS_new:cpn { end_kip_export:ccc } {
  \exp_args:Nnnx \BNVS_tl_use:nv {
    \BNVS_tl_use:Nv \__bnvs_end_kip_export_seq:nnnccc { key }
  } { id } {
    \__bnvs_seq_use:cn { path } { \q__bnvs }
  }
}
\BNVS_new_conditional:cpnn { match_pop_kip: } { T, F, TF } {
  \__bnvs_match_pop_left:cTF { key } {
    \__bnvs_match_pop_left:cTF { key } {
      \__bnvs_match_pop_left:cTF { id } {
        \__bnvs_match_pop_left:cTF { path } {
          \__bnvs_seq_set_split:cnv { path } { . } { path }
          \__bnvs_seq_remove_all:cn { path } { }
          \prg_return_true:
        } {
          \prg_return_false:
        }
      } {
        \prg_return_false:
      }
    } {
      \prg_return_false:
    }
  } {
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { kip:ccc } #1 #2 #3 { T, F, TF } {
  \BNVS_begin:
  \__bnvs_match_once:NvTF \c__bnvs_A_key_Z_regex { #1 }  {
    \__bnvs_match_pop_kip:TF {
      \__bnvs_end_kip_export:ccc { #1 } { #2 } { #3 }
      \prg_return_true:
    } {
      \BNVS_end:
      \prg_return_false:
    }
  } {
    \BNVS_end:
    \prg_return_false:
  }
}
\BNVS_new:cpn { kip_x_path_resolve:TFF } #1 #2 {
  \__bnvs_kip_x_path_resolve:TF {
    \__bnvs_seq_if_empty:cTF { path } { #1 } { #2 }
  }
}
\BNVS_new:cpn { end_kip_export: } {
  \exp_args:Nnnx
  \BNVS_tl_use:nv {
    \BNVS_tl_use:Nv \__bnvs_end_kip_export_seq:nnnccc { key }
  } { id } {
    \__bnvs_seq_use:cn { path } { \q__bnvs }
  } { key } { id } { path }
}
\BNVS_new:cpn { seq_merge:cc } #1 #2 {
  \__bnvs_seq_if_empty:cF { #2 } {
    \__bnvs_seq_set_split:cnx { #1 } { \q__bnvs } {
      \__bnvs_seq_use:cn { #1 } { \q__bnvs }
      \exp_not:n { \q__bnvs }
      \__bnvs_seq_use:cn { #2 } { \q__bnvs }
    }
    \__bnvs_seq_remove_all:cn { #1 } { }
  }
}
\BNVS_new:cpn { kip_x_path_resolve:nFF } #1 #2 #3 {
  \__bnvs_get:nvcTF #1 { a } { b } {
    \__bnvs_kip:cccTF { b } { id } { path } {
      \__bnvs_tl_set_eq:cc { key } { b }
      \__bnvs_seq_merge:cc { path } { b }
      \__bnvs_seq_clear:c { b }
      \__bnvs_seq_set_eq:cc { a } { path }
      \__bnvs_kip_x_path_resolve_loop_or_end_return:
    } {
      \__bnvs_seq_if_empty:cTF { b } {
        \__bnvs_tl_set_eq:cc { key } { b }
        \__bnvs_seq_clear:c { path }
        \__bnvs_seq_clear:c { a }
        \__bnvs_kip_x_path_resolve_loop_or_end_return:
      } {
        #2
      }
    }
  } {
    #3
  }
}
\BNVS_new:cpn { kip_x_path_resolve_VAL_loop_or_end_return:F } #1 {
  \__bnvs_kip_x_path_resolve:nFF V { #1 } {
    \__bnvs_kip_x_path_resolve:nFF A { #1 } {
      \__bnvs_kip_x_path_resolve:nFF L { #1 } { #1 }
    }
  }
}
\BNVS_new:cpn { kip_x_path_resolve_end_return_true: } {
  \__bnvs_seq_pop_left:ccTF { path } { a } {
    \__bnvs_seq_if_empty:cTF { path } {
      \__bnvs_tl_clear:c { b }
      \__bnvs_index_can:vTF { key } {
        \__bnvs_index_append:vvcTF { key } { a } { b } {
          \__bnvs_tl_set:cv { key } { b }
        } {
          \__bnvs_tl_set:cv { key } { a }
        }
      } {
        \__bnvs_tl_set:cv { key } { a }
      }
    } {
      \__bnvs_error:x { Path~too~long~.\BNVS_tl_use:c { a }
        .\__bnvs_seq_use:cn { path } . }
    }
  } {
    \__bnvs_value_resolve:vcT { key } { key } {}
  }
  \__bnvs_end_kip_export:
  \prg_return_true:
}
\BNVS_new_conditional:cpnn { kip_x_path_resolve: } { T, F, TF } {
  \BNVS_begin:
  \__bnvs_seq_set_eq:cc { a } { path }
  \__bnvs_seq_clear:c { b }
  \__bnvs_kip_x_path_resolve_loop_or_end_return:
}
\BNVS_new:cpn { kip_x_path_resolve_loop_or_end_return: } {
  \__bnvs_call:TF {
    \__bnvs_tl_set_eq:cc { a } { key }
    \__bnvs_seq_if_empty:cTF { a } {
      \__bnvs_kip_x_path_resolve_VAL_loop_or_end_return:F {
        \__bnvs_kip_x_path_resolve_end_return_true:
      }
    } {
      \__bnvs_tl_put_right:cx { a } { . \__bnvs_seq_use:cn { a } . }
      \__bnvs_kip_x_path_resolve_VAL_loop_or_end_return:F {
        \__bnvs_seq_pop_right:ccT { a } { c } {
          \__bnvs_seq_put_left:cv { b } { c }
        }
        \__bnvs_kip_x_path_resolve_loop_or_end_return:
      }
    }
  } {
    \BNVS_end:
    \prg_return_false:
  }
}
\BNVS_new:cpn { kip_n_path_resolve_or_end_return:nF } #1 #2 {
  \__bnvs_get:nvcTF { #1 } { a } { b } {
    \__bnvs_kip:cccTF { b } { id } { path } {
      \__bnvs_tl_set_eq:cc { key } { b }
      \__bnvs_seq_merge:cc { path } { b }
      \__bnvs_seq_set_eq:cc { a } { path }
      \__bnvs_seq_clear:c { b }
      \__bnvs_kip_n_path_resolve_loop_or_end_return:
    } {
      \__bnvs_seq_pop_right:ccTF { a } { c } {
        \__bnvs_seq_put_left:cv { b } { c }
        \__bnvs_kip_n_path_resolve_loop_or_end_return:
      } {
        \__bnvs_kip_n_path_resolve_end_return_true:
      }
    }
  } {
    #2
  }
}
\BNVS_new:cpn { kip_n_path_resolve_VAL_loop_or_end_return: } {
  \__bnvs_kip_n_path_resolve_or_end_return:nF V {
    \__bnvs_kip_n_path_resolve_or_end_return:nF A {
      \__bnvs_kip_n_path_resolve_or_end_return:nF L {
        \__bnvs_seq_pop_right:ccTF { a } { c } {
          \__bnvs_seq_put_left:cv { b } { c }
          \__bnvs_kip_n_path_resolve_loop_or_end_return:
        } {
          \__bnvs_kip_n_path_resolve_end_return_true:
        }
      }
    }
  }
}
\BNVS_new:cpn { kip_n_path_resolve_end_return_false: } {
  \BNVS_end:
  \prg_return_false:
}
\BNVS_new:cpn { kip_n_path_resolve_end_return_true: } {
  \__bnvs_end_kip_export:
  \prg_return_true:
}

\BNVS_new:cpn { kip_n_path_resolve_loop_or_end_return: } {
  \__bnvs_call:TF {
    \__bnvs_tl_set_eq:cc { a } { key }
    \__bnvs_seq_if_empty:cTF { a } {
      \__bnvs_seq_if_empty:cTF { b } {
        \__bnvs_kip_n_path_resolve_end_return_true:
      } {
        \__bnvs_kip_n_path_resolve_VAL_loop_or_end_return:
      }
    } {
      \__bnvs_tl_put_right:cx { a } { . \__bnvs_seq_use:cn { a } . }
      \__bnvs_kip_n_path_resolve_VAL_loop_or_end_return:
    }
  } {
    \BNVS_end:
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { kip_n_path_resolve: } { T, F, TF } {
  \BNVS_begin:
  \__bnvs_seq_set_eq:cc { a } { path }
  \__bnvs_seq_clear:c { b }
  \__bnvs_kip_n_path_resolve_loop_or_end_return:
}
\BNVS_new:cpn { round_ans:n } #1 {
  \tl_if_empty:nTF { #1 } {
    \__bnvs_tl_put_right:cn { ans } { 0 }
  } {
    \__bnvs_tl_put_right:cx { ans } { \fp_eval:n { round(#1) } }
  }
}
\BNVS_new:cpn { round:N } #1 {
  \tl_if_empty:NTF #1 {
    \tl_set:Nn #1 { 0 }
  } {
    \tl_set:Nx #1 { \fp_eval:n { round(#1) } }
  }
}
\BNVS_new:cpn { round:c } {
  \BNVS_tl_use:Nc \__bnvs_round:N
}
\BNVS_set:cpn { end_return_true:nnc } #1 #2 #3 {
  \__bnvs_tl_if_empty:cTF { ans } {
    \BNVS_end:
    \__bnvs_cache_gremove:nn { #1 } { #2 }
    \prg_return_false:
  } {
    \__bnvs_round_ans:
    \__bnvs_cache_gput:nnv { #1 } { #2 } { ans }
    \BNVS_end_tl_put_right:cv { #3 } { ans }
    \prg_return_true:
  }
}
\BNVS_set:cpn { end_return_false:nn } #1 #2 {
  \BNVS_end:
  \__bnvs_cache_gremove:nn { #1 } { #2 }
  \prg_return_false:
}
\BNVS_new:cpn { value_resolve_return:nnnT } #1 #2 #3 #4 {
  \__bnvs_tl_if_empty:cTF { #3 } {
    \prg_return_false:
  } {
    \__bnvs_cache_gput:nnv V { #2 } { #3 }
    #4
    \prg_return_true:
  }
}
\BNVS_new_conditional:cpnn { quark_if_nil:c } #1 { T, F, TF } {
  \BNVS_tl_use:Nc \quark_if_nil:NTF { #1 } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { quark_if_no_value:c } #1 { T, F, TF } {
  \BNVS_tl_use:Nc \quark_if_no_value:NTF { #1 } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { value_resolve:nc } #1 #2 { T, F, TF } {
  \__bnvs_cache_get:nncTF V { #1 } { #2 } {
    \prg_return_true:
  } {
    \__bnvs_get:nncTF V { #1 } { #2 } {
      \__bnvs_quark_if_nil:cTF { #2 } {
        \__bnvs_gput:nnn V { #1 } { \q_no_value }
        \__bnvs_first_resolve:ncTF { #1 } { #2 } {
          \__bnvs_value_resolve_return:nnnT A { #1 } { #2 } {
            \__bnvs_gput:nnn V { #1 } { \q_nil }
          }
        } {
          \__bnvs_last_resolve:ncTF { #1 } { #2 } {
            \__bnvs_value_resolve_return:nnnT Z { #1 } { #2 } {
              \__bnvs_gput:nnn V { #1 } { \q_nil }
            }
          } {
            \__bnvs_gput:nnn V { #1 } { \q_nil }
            \prg_return_false:
          }
        }
      } {
        \__bnvs_quark_if_no_value:cTF { #2 } {
          \__bnvs_fatal:n {Circular~definition:~#1}
        } {
          \__bnvs_if_resolve:vcTF { #2 } { #2 } {
            \__bnvs_value_resolve_return:nnnT V { #1 } { #2 } {
              \__bnvs_gput:nnn V { #1 } { \q_nil }
            }
          } {
            \__bnvs_gput:nnn V { #1 } { \q_nil }
            \prg_return_false:
          }
        }
      }
    } {
      \prg_return_false:
    }
  }
}
\BNVS_new_conditional:cpnn { value_resolve:vc } #1 #2 { T, F, TF } {
  \BNVS_tl_use:Nv \__bnvs_value_resolve:ncTF { #1 } { #2 } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\BNVS_new:cpn { end_put_right:vc } #1 #2 {
  \BNVS_tl_use:nv {
    \BNVS_end:
    \__bnvs_tl_put_right:cn { #2 }
  } { #1 }
}
\BNVS_new_conditional:cpnn { value_append:nc } #1 #2 { T, F, TF } {
  \BNVS_begin:
  \__bnvs_value_resolve:ncTF { #1 } { #2 } {
    \BNVS_end_tl_put_right:cv { #2 } { #2 }
    \prg_return_true:
  } {
    \BNVS_end:
    \prg_return_true:
  }
}
\BNVS_new_conditional_vc:cn { value_append } { T, F, TF }
\BNVS_new_conditional:cpnn { first_resolve:nc } #1 #2 { T, F, TF } {
  \__bnvs_cache_get:nncTF A { #1 } { #2 } {
    \prg_return_true:
  } {
    \__bnvs_get:nncTF A { #1 } { #2 } {
      \__bnvs_quark_if_nil:cTF { #2 } {
        \__bnvs_gput:nnn A { #1 } { \q_no_value }
        \__bnvs_last_resolve:ncTF { #1 } { #2 } {
          \__bnvs_tl_put_right:cn { #2 } { - }
          \__bnvs_length_append:ncTF { #1 } { #2 } {
            \__bnvs_tl_put_right:cn { #2 } { + 1 }
            \__bnvs_round:c { #2 }
            \__bnvs_tl_if_empty:cTF { #2 } {
              \__bnvs_gput:nnn A { #1 } { \q_nil }
              \prg_return_false:
            } {
              \__bnvs_gput:nnn A { #1 } { \q_nil }
              \__bnvs_cache_gput:nnv A { #1 } { #2 }
              \prg_return_true:
            }
          } {
            \__bnvs_error:n {
Unavailable~length~for~#1~(\token_to_str:N\__bnvs_first_resolve:ncTF/2) }
            \__bnvs_gput:nnn A { #1 } { \q_nil }
            \prg_return_false:
          }
        } {
          \__bnvs_error:n {
Unavailable~last~for~#1~(\token_to_str:N\__bnvs_first_resolve:ncTF/1) }
          \__bnvs_gput:nnn A { #1 } { \q_nil }
          \prg_return_false:
        }
      } {
        \__bnvs_quark_if_no_value:cTF { a } {
          \__bnvs_fatal:n {Circular~definition:~#1}
        } {
          \__bnvs_if_resolve:vcTF { #2 } { #2 } {
            \__bnvs_cache_gput:nnv A { #1 } { #2 }
            \prg_return_true:
          } {
            \prg_return_false:
          }
        }
      }
    } {
      \prg_return_false:
    }
  }
}
\BNVS_new_conditional_vc:cn { first_resolve } { T, F, TF }
\BNVS_new_conditional:cpnn { first_append:nc } #1 #2 { T, F, TF } {
  \BNVS_begin:
  \__bnvs_first_resolve:ncTF { #1 } { #2 } {
    \BNVS_end_tl_put_right:cv { #2 } { #2 }
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { last_resolve:nc } #1 #2 { T, F, TF } {
  \__bnvs_cache_get:nncTF Z { #1 } { #2 } {
    \prg_return_true:
  }  {
    \__bnvs_get:nncTF Z { #1 } { #2 } {
      \__bnvs_quark_if_nil:cTF { #2 } {
        \__bnvs_gput:nnn Z { #1 } { \q_no_value }
        \__bnvs_first_resolve:ncTF { #1 } { #2 } {
          \__bnvs_tl_put_right:cn { #2 } { + }
          \__bnvs_length_append:ncTF { #1 } { #2 } {
            \__bnvs_tl_put_right:cn { #2 } { - 1 }
            \__bnvs_round:c { #2 }
            \__bnvs_cache_gput:nnv Z { #1 } { #2 }
            \__bnvs_gput:nnn Z { #1 } { \q_nil }
            \prg_return_true:
          } {
            \__bnvs_error:x {
 Unavailable~length~for~#1~(\token_to_str:N \__bnvs_last_resolve:ncTF/1) }
            \__bnvs_gput:nnn Z { #1 } { \q_nil }
            \prg_return_false:
          }
        } {
          \__bnvs_error:x {
Unavailable~first~for~#1~(\token_to_str:N \__bnvs_last_resolve:ncTF/1) }
          \__bnvs_gput:nnn Z { #1 } { \q_nil }
          \prg_return_false:
        }
      } {
        \__bnvs_quark_if_no_value:cTF { #2 } {
          \__bnvs_fatal:n {Circular~definition:~#1}
        } {
          \__bnvs_if_resolve:vcTF { #2 } { #2 } {
            \__bnvs_cache_gput:nnv Z { #1 } { #2 }
            \prg_return_true:
          } {
            \prg_return_false:
          }
        }
      }
    } {
      \prg_return_false:
    }
  }
}
\BNVS_new_conditional_vc:cn { last_resolve } { T, F, TF }
\prg_new_conditional:Npnn \__bnvs_last_append:nc #1 #2 { T, F, TF } {
  \BNVS_begin:
  \__bnvs_last_resolve:ncTF { #1 } { #2 } {
    \BNVS_end_tl_put_right:cv { #2 } { #2 }
    \prg_return_true:
  } {
    \BNVS_end:
    \prg_return_false:
  }
}
\BNVS_new_conditional_vc:cn { last_append } { T, F, TF }
\BNVS_new_conditional:cpnn { length_resolve:nc } #1 #2 { T, F, TF } {
  \__bnvs_cache_get:nncTF L { #1 } { #2 } {
    \prg_return_true:
  } {
    \__bnvs_get:nncTF L { #1 } { #2 } {
      \__bnvs_quark_if_nil:cTF { #2 } {
        \__bnvs_gput:nnn L { #1 } { \q_no_value }
        \__bnvs_last_resolve:ncTF { #1 } { #2 } {
          \__bnvs_tl_put_right:cn { #2 } { - }
          \__bnvs_first_append:ncTF { #1 } { #2 } {
            \__bnvs_tl_put_right:cn { #2 } { + 1 }
            \__bnvs_round:c { #2 }
            \__bnvs_gput:nnn L { #1 } { \q_nil }
            \__bnvs_cache_gput:nnv L { #1 } { #2 }
            \prg_return_true:
          } {
            \__bnvs_error:n {
Unavailable~first~for~#1~(\__bnvs_length_resolve:ncTF/2) }
            \return_false:
          }
        } {
          \__bnvs_error:n {
Unavailable~last~for~#1~(\__bnvs_length_resolve:ncTF/1) }
          \return_false:
        }
      } {
        \__bnvs_quark_if_no_value:cTF { #2 } {
          \__bnvs_fatal:n {Circular~definition:~#1}
        } {
          \__bnvs_if_resolve:vcTF { #2 } { #2 } {
            \__bnvs_cache_gput:nnv L { #1 } { #2 }
            \prg_return_true:
          } {
            \prg_return_false:
          }
        }
      }
    } {
      \prg_return_false:
    }
  }
}
\BNVS_new_conditional_vc:cn { length_resolve } { T, F, TF }
\BNVS_new_conditional:cpnn { length_append:nc } #1 #2 { T, F, TF } {
  \BNVS_begin:
  \__bnvs_length_resolve:ncTF { #1 } { #2 } {
    \BNVS_end_tl_put_right:cv { #2 } { #2 }
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\BNVS_new_conditional_vc:cn { length_append } { T, F, TF }
\BNVS_new_conditional:cpnn { range_append:nc } #1 #2 { T, F, TF } {
  \BNVS_begin:
  \__bnvs_first_resolve:ncTF { #1 } { a } {
    \BNVS_tl_use:Nv \int_compare:nNnT { a } < 0 {
      \__bnvs_tl_set:cn { a } { 0 }
    }
    \__bnvs_last_resolve:ncTF { #1 } { b } {
      \BNVS_tl_use:Nv \int_compare:nNnT { b } < 0 {
        \__bnvs_tl_set:cn { b } { 0 }
      }
      \__bnvs_tl_put_right:cn { a } { - }
      \__bnvs_tl_put_right:cv { a } { b }
      \BNVS_end_tl_put_right:cv { #2 } { a }
      \prg_return_true:
    } {
      \BNVS_end_tl_put_right:cv { #2 } { a }
      \__bnvs_tl_put_right:cn { #2 } { - }
      \prg_return_true:
    }
  } {
    \__bnvs_last_resolve:ncTF { #1 } { b } {
      \BNVS_tl_use:Nv \int_compare:nNnT { b } < 0 {
        \__bnvs_tl_set:cn { b } { 0 }
      }
      \__bnvs_tl_put_left:cn { b } { - }
      \BNVS_end_tl_put_right:cv { #2 } { b }
      \prg_return_true:
    } {
      \__bnvs_value_resolve:ncTF { #1 } { b } {
      \BNVS_tl_use:Nv \int_compare:nNnT { b } < 0 {
        \__bnvs_tl_set:cn { b } { 0 }
      }
        \BNVS_end_tl_put_right:cv { #2 } { b }
        \__bnvs_tl_put_right:cn { #2 } { - }
        \prg_return_true:
      } {
        \BNVS_end:
        \prg_return_false:
      }
    }
  }
}
\BNVS_new_conditional_vc:cn { range_append } { T, F, TF }
\BNVS_new_conditional:cpnn { range_resolve:nc } #1 #2 { T, F, TF } {
  \__bnvs_tl_clear:c { #2 }
  \__bnvs_range_append:ncTF { #1 } { #2 } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\BNVS_new_conditional_vc:cn { range_resolve } { T, F, TF }
\BNVS_new_conditional:cpnn { previous_resolve:nc } #1 #2 { T, F, TF } {
  \__bnvs_cache_get:nncTF P { #1 } { #2 } {
    \prg_return_true:
  } {
    \__bnvs_first_resolve:ncTF { #1 } { #2 } {
      \__bnvs_tl_put_right:cn { #2 } { -1 }
      \__bnvs_round:c { #2 }
      \__bnvs_cache_gput:nnv P { #1 } { #2 }
      \prg_return_true:
    } {
      \prg_return_false:
    }
  }
}
\BNVS_new_conditional_vc:cn { previous_resolve } { T, F, TF }
\BNVS_new_conditional:cpnn { previous_append:nc } #1 #2 { T, F, TF } {
  \BNVS_begin:
  \__bnvs_previous_resolve:ncTF { #1 } { #2 } {
    \BNVS_end_tl_put_right:cv { #2 } { #2 }
    \prg_return_true:
  } {
    \BNVS_end:
    \prg_return_false:
  }
}
\BNVS_new_conditional_vc:cn { previous_append } { T, F, TF }
\BNVS_new_conditional:cpnn { next_resolve:nc } #1 #2 { T, F, TF } {
  \__bnvs_cache_get:nncTF N { #1 } { #2 } {
    \prg_return_true:
  } {
    \__bnvs_last_resolve:ncTF { #1 } { #2 } {
      \__bnvs_tl_put_right:cn { #2 } { +1 }
      \__bnvs_round:c { #2 }
      \__bnvs_cache_gput:nnv N { #1 } { #2 }
      \prg_return_true:
    } {
      \prg_return_false:
    }
  }
}
\BNVS_new_conditional_vc:cn { next_resolve } { T, F, TF }
\BNVS_new_conditional:cpnn { next_append:nc } #1 #2 { T, F, TF } {
  \BNVS_begin:
  \__bnvs_next_resolve:ncTF { #1 } { #2 } {
    \BNVS_end_tl_put_right:cv { #2 } { #2 }
    \prg_return_true:
  } {
    \BNVS_end:
    \prg_return_true:
  }
}
\BNVS_new_conditional_vc:cn { next_append } { T, F, TF }
\BNVS_new_conditional:cpnn { v_resolve:nc } #1 #2 { T, F, TF } {
  \__bnvs_v_get:ncTF { #1 } { #2 } {
    \__bnvs_quark_if_no_value:cTF { #2 } {
      \__bnvs_fatal:n {Circular~definition:~#1}
      \prg_return_false:
    } {
      \prg_return_true:
    }
  } {
    \__bnvs_v_gput:nn { #1 } { \q_no_value }
    \__bnvs_value_resolve:ncTF { #1 } { #2 } {
      \__bnvs_v_gput:nv { #1 } { #2 }
      \prg_return_true:
    } {
      \__bnvs_first_resolve:ncTF { #1 } { #2 } {
        \__bnvs_v_gput:nv { #1 } { #2 }
        \prg_return_true:
      } {
        \__bnvs_last_resolve:ncTF { #1 } { #2 } {
        \__bnvs_v_gput:nv { #1 } { #2 }
          \prg_return_true:
        } {
          \__bnvs_v_gremove:n { #1 }
          \prg_return_false:
        }
      }
    }
  }
}
\BNVS_new_conditional_vc:cn { v_resolve } { T, F, TF }
\BNVS_new_conditional:cpnn { v_append:nc } #1 #2 { T, F, TF } {
  \BNVS_begin:
  \__bnvs_v_resolve:ncTF { #1 } { #2 } {
    \BNVS_end_tl_put_right:cv { #2 } { #2 }
    \prg_return_true:
  } {
    \BNVS_end:
    \prg_return_false:
  }
}
\BNVS_new_conditional_vc:cn { v_append } { T, F, TF }
\BNVS_new_conditional:cpnn { index_can:n } #1 { p, T, F, TF } {
  \bool_if:nTF {
       \__bnvs_if_in_p:nn V { #1 }
    || \__bnvs_if_in_p:nn A { #1 }
    || \__bnvs_if_in_p:nn Z { #1 }
  } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { index_can:v } #1 { p, T, F, TF } {
  \BNVS_tl_use:Nv \__bnvs_index_can:nTF { #1 } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { index_resolve:nnc } #1 #2 #3 { T, F, TF } {
  \exp_args:Nx \__bnvs_value_resolve:ncTF { #1.#2 } { #3 } {
      \prg_return_true:
  } {
    \__bnvs_first_resolve:ncTF { #1 } { #3 } {
      \__bnvs_tl_put_right:cn { #3 } { + #2 - 1 }
    \__bnvs_round:c { #3 }
      \prg_return_true:
    } {
      \__bnvs_last_resolve:ncTF { #1 } { #3 } {
        \__bnvs_tl_put_right:cn { #3 } { + #2 - 1 }
      \__bnvs_round:c { #3 }
        \prg_return_true:
      } {
        \__bnvs_value_resolve:ncTF { #1 } { #3 } {
          \__bnvs_tl_put_right:cn { #3 } { + #2 - 1 }
        \__bnvs_round:c { #3 }
          \prg_return_true:
        } {
        \prg_return_false:
        }
      }
  }
  }
}
\BNVS_new_conditional:cpnn { index_resolve:nvc } #1 #2 #3 { T, F, TF } {
  \BNVS_tl_use:nv {
    \__bnvs_index_resolve:nncTF { #1 }
  } { #2 } { #3 } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { index_resolve:vvc } #1 #2 #3 { T, F, TF } {
  \BNVS_tl_use:nv {
    \BNVS_tl_use:Nv \__bnvs_index_resolve:nncTF { #1 }
  } { #2 } { #3 } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { index_append:nnc } #1 #2 #3 { T, F, TF } {
  \BNVS_begin:
  \__bnvs_index_resolve:nncTF { #1 } { #2 } { #3 } {
    \BNVS_end_tl_put_right:cv { #3 } { #3 }
    \prg_return_true:
  } {
    \BNVS_end:
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { index_append:vvc } #1 #2 #3 { T, F, TF } {
  \BNVS_tl_use:nv {
    \BNVS_tl_use:Nv \__bnvs_index_append:nncTF { #1 }
  } { #2 } { #3 } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { n_resolve:nc } #1 #2 { T, F, TF } {
  \__bnvs_n_get:ncF { #1 } { #2 } {
    \__bnvs_tl_set:cn { #2 } { 1 }
    \__bnvs_n_gput:nn { #1 } { 1 }
  }
  \prg_return_true:
}
\BNVS_new_conditional:cpnn { n_append:nc } #1 #2 { T, F, TF } {
  \BNVS_begin:
  \__bnvs_n_resolve:ncTF { #1 } { #2 } {
    \BNVS_end_tl_put_right:cv { #2 } { #2 }
    \prg_return_true:
  } {
    \BNVS_end:
    \prg_return_false:
  }
}
\BNVS_new_conditional_vc:cn { n_append } { T, F, TF }
\BNVS_new_conditional:cpnn { n_index_resolve:nc } #1 #2 { T, F, TF } {
  \__bnvs_n_resolve:ncTF { #1 } { #2 } {
    \__bnvs_index_resolve:nvcTF { #1 } { #2 } { #2 } {
      \prg_return_true:
    } {
      \prg_return_false:
    }
  } {
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { n_index_resolve:nnc } #1 #2 #3 { T, F, TF } {
  \__bnvs_n_resolve:ncTF { #1 } { #3 } {
    \__bnvs_tl_put_left:cn { #3 } { #2. }
    \__bnvs_if_resolve:vcTF { #3 } { #3 } {
      \prg_return_true:
    } {
      \prg_return_false:
    }
  } {
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { n_index_append:nc } #1 #2 { T, F, TF } {
  \BNVS_begin:
  \__bnvs_n_index_resolve:ncTF { #1 } { #2 } {
    \BNVS_end_tl_put_right:cv { #2 } { #2 }
    \prg_return_true:
  } {
    \BNVS_end:
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { n_index_append:nnc } #1 #2 #3 { T, F, TF } {
  \BNVS_begin:
  \__bnvs_n_index_resolve:nncTF { #1 } { #2 } { #3 } {
    \BNVS_end_tl_put_right:cv { #3 } { #3 }
    \prg_return_true:
  } {
    \BNVS_end:
    \prg_return_false:
  }
}
\BNVS_new_conditional_vc:cn { n_index_append } { T, F, TF }
\BNVS_new_conditional_vvc:cn { n_index_append } { T, F, TF }
\BNVS_new_conditional:cpnn { v_incr_resolve:nnc } #1 #2 #3 { T, F, TF } {
  \__bnvs_if_resolve:ncTF { #2 } { #3 } {
    \BNVS_tl_use:Nv \int_compare:nNnTF { #3 } = 0 {
      \__bnvs_v_resolve:ncTF { #1 } { #3 } {
        \prg_return_true:
      } {
        \prg_return_false:
      }
    } {
      \__bnvs_tl_put_right:cn { #3 } { + }
      \__bnvs_v_append:ncTF { #1 } { #3 } {
        \__bnvs_round:c { #3 }
        \__bnvs_v_gput:nv { #1 } { #3 }
        \prg_return_true:
      } {
        \prg_return_false:
      }
    }
  } {
    \prg_return_false:
  }
}
\BNVS_new_conditional_vnc:cn { v_incr_resolve } { T, F, TF }
\BNVS_new_conditional:cpnn { v_incr_append:nnc } #1 #2 #3 { T, F, TF } {
  \BNVS_begin:
  \__bnvs_v_incr_resolve:nncTF { #1 } { #2 } { #3 } {
    \BNVS_end_tl_put_right:cv { #3 } { #3 }
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\BNVS_new_conditional_vnc:cn { v_incr_append } { T, F, TF }
\BNVS_new_conditional_vvc:cn { v_incr_append } { T, F, TF }
\BNVS_new_conditional:cpnn { v_post_resolve:nnc } #1 #2 #3 { T, F, TF } {
  \__bnvs_v_resolve:ncTF { #1 } { #3 } {
    \BNVS_begin:
    \__bnvs_if_resolve:ncTF { #2 } { a } {
      \BNVS_tl_use:Nv \int_compare:nNnTF { a } = 0 {
        \BNVS_end:
        \prg_return_true:
      } {
        \__bnvs_tl_put_right:cn { a } { + }
        \__bnvs_tl_put_right:cv { a } { #3 }
        \__bnvs_round:c { a }
        \BNVS_end_v_gput:nc { #1 } { a }
        \prg_return_true:
      }
    } {
      \BNVS_end:
      \prg_return_false:
    }
  } {
      \prg_return_false:
  }
}
\BNVS_new_conditional_vvc:cn { v_post_resolve } { T, F, TF }
\BNVS_new_conditional:cpnn { v_post_append:nnc } #1 #2 #3 { T, F, TF } {
  \BNVS_begin:
  \__bnvs_v_post_resolve:nncTF { #1 } { #2 } { #3 } {
    \BNVS_end_tl_put_right:cv { #3 } { #3 }
    \prg_return_true:
  } {
    \prg_return_true:
  }
}
\BNVS_new_conditional_vnc:cn { v_post_append } { T, F, TF }
\BNVS_new_conditional_vvc:cn { v_post_append } { T, F, TF }
\BNVS_new_conditional:cpnn { n_incr_resolve:nnnc } #1 #2 #3 #4 { T, F, TF } {
  \__bnvs_if_resolve:ncTF { #3 } { #4 } {
\BNVS_tl_use:Nv \int_compare:nNnTF { #4 } = 0 {
      \__bnvs_n_resolve:ncTF { #1 } { #4 } {
        \__bnvs_index_resolve:nvcTF { #1 } { #4 } { #4 } {
          \prg_return_true:
        } {
          \prg_return_false:
        }
      } {
        \prg_return_false:
      }
    } {
      \__bnvs_tl_put_right:cn { #4 } { + }
      \__bnvs_n_append:ncTF { #1 } { #4 } {
        \__bnvs_round:c { #4 }
        \__bnvs_n_gput:nv { #1 } { #4 }
        \__bnvs_index_resolve:nvcTF { #2 } { #4 } { #4 } {
          \prg_return_true:
        } {
          \prg_return_false:
        }
      } {
        \prg_return_false:
      }
    }
  } {
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { n_incr_resolve:nnc } #1 #2 #3 { T, F, TF } {
  \__bnvs_if_resolve:ncTF { #2 } { #3 } {
\BNVS_tl_use:Nv \int_compare:nNnTF { #3 } = 0 {
      \__bnvs_n_resolve:ncTF { #1 } { #3 } {
        \__bnvs_index_resolve:nvcTF { #1 } { #3 } { #3 } {
          \prg_return_true:
        } {
          \prg_return_false:
        }
      } {
        \prg_return_false:
      }
    } {
      \__bnvs_tl_put_right:cn { #3 } { + }
      \__bnvs_n_append:ncTF { #1 } { #3 } {
        \__bnvs_round:c { #3 }
        \__bnvs_n_gput:nv { #1 } { #3 }
        \__bnvs_index_resolve:nvcTF { #1 } { #3 } { #3 } {
          \prg_return_true:
        } {
          \prg_return_false:
        }
      } {
        \prg_return_false:
      }
    }
  } {
    \prg_return_false:
  }
}
\BNVS_new_conditional_vnc:cn { n_incr_resolve } { T, F, TF }
\BNVS_new_conditional_vvc:cn { n_incr_resolve } { T, F, TF }
\BNVS_new_conditional:cpnn { n_incr_append:nnnc } #1 #2 #3 #4 { T, F, TF } {
  \BNVS_begin:
  \__bnvs_n_incr_resolve:nnncTF { #1 } { #2 } { #3 } { #4 }{
    \BNVS_end_tl_put_right:cv { #4 } { #4 }
    \prg_return_true:
  } {
    \BNVS_end:
    \prg_return_false:
  }
}
\BNVS_new_conditional_vvnc:cn { n_incr_append } { T, F, TF }
\BNVS_new_conditional_vvvc:cn { n_incr_append } { T, F, TF }
\BNVS_new_conditional:cpnn { n_incr_append:nnc } #1 #2 #3 { T, F, TF } {
  \BNVS_begin:
  \__bnvs_n_incr_resolve:nncTF { #1 } { #2 } { #3 } {
    \BNVS_end_tl_put_right:cv { #3 } { #3 }
    \prg_return_true:
  } {
    \BNVS_end:
    \prg_return_false:
  }
}
\BNVS_new_conditional_vnc:cn { n_incr_append } { T, F, TF }
\BNVS_new_conditional_vvc:cn { n_incr_append } { T, F, TF }
\BNVS_new_conditional:cpnn { n_post_resolve:nnc } #1 #2 #3 { T, F, TF } {
  \__bnvs_n_resolve:ncTF { #1 } { #3 } {
    \BNVS_begin:
    \__bnvs_if_resolve:ncTF { #2 } { #3 } {
      \BNVS_tl_use:Nv \int_compare:nNnTF { #3 } = 0 {
        \BNVS_end:
        \__bnvs_index_resolve:nvcTF { #1 } { #3 } { #3 } {
          \prg_return_true:
        } {
          \prg_return_false:
        }
      } {
        \__bnvs_tl_put_right:cn { #3 } { + }
        \__bnvs_n_append:ncTF { #1 } { #3 } {
          \__bnvs_round:c { #3 }
          \__bnvs_n_gput:nv { #1 } { #3 }
          \BNVS_end:
          \__bnvs_index_resolve:nvcTF { #1 } { #3 } { #3 } {
            \prg_return_true:
          } {
            \prg_return_false:
          }
        } {
          \BNVS_end:
          \prg_return_false:
        }
      }
    } {
      \BNVS_end:
      \prg_return_false:
    }
  } {
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { n_post_append:nnc } #1 #2 #3 { T, F, TF } {
  \BNVS_begin:
  \__bnvs_n_post_resolve:nncTF { #1 } { #2 } { #3 } {
    \BNVS_end_tl_put_right:cv { #3 } { #3 }
    \prg_return_true:
  } {
    \BNVS_end:
    \prg_return_false:
  }
}
\BNVS_new_conditional_vnc:cn { n_post_append } { T, F, TF }
\BNVS_new_conditional_vvc:cn { n_post_append } { T, F, TF }
\BNVS_set:cpn { round_ans: } {
  \__bnvs_round:c { ans }
}
\BNVS_new:cpn { path_resolve_n:TFF } #1 #2 {
  \__bnvs_kip_n_path_resolve:TF {
    \__bnvs_seq_if_empty:cTF { path } { #1 } { #2 }
  }
}
\BNVS_new:cpn { if_resolve_end_return_false:n } #1 {
  \BNVS_end:
  \prg_return_false:
}
\BNVS_new:cpn { path_resolve_n:T } #1 {
  \__bnvs_path_resolve_n:TFF {
    #1
  } {
    \__bnvs_if_resolve_end_return_false:n {
      Too~many~dotted~components
    }
  } {
    \__bnvs_if_resolve_end_return_false:n {
      Unknown~dotted~path
    }
  }
}
\BNVS_set:cpn { resolve_x:T } #1 {
  \__bnvs_kip_x_path_resolve:TFF {
    #1
  } {
    \__bnvs_if_resolve_end_return_false:n {
      Too~many~dotted~components
    }
  } {
    \__bnvs_if_resolve_end_return_false:n { Unknown~dotted~path }
  }
}
\BNVS_new_conditional:cpnn { path_pop_right_n:c } #1 { T, F, TF } {
  \__bnvs_seq_pop_right:ccTF { path } { #1 }
    { \prg_return_true: } { \prg_return_false: }
}
\BNVS_new:cpn { if_resolve_pop_kip_complete: } {
  \__bnvs_tl_if_blank:vT { id } {
    \__bnvs_tl_put_left:cv { key } { id_last }
    \__bnvs_tl_set:cv { id } { id_last }
  }
  \__bnvs_tl_if_blank:vTF { path } {
    \__bnvs_seq_clear:c { path }
  } {
    \__bnvs_seq_set_split:cnv { path } { . } { path }
    \__bnvs_seq_remove_all:cn { path } { }
  }
  \__bnvs_tl_set_eq:cc { key_base } { key }
  \__bnvs_seq_set_eq:cc { path_base } { path }
}
\BNVS_new:cpn { if_resolve_pop_kip:TTF } #1 #2 #3 {
  \__bnvs_split_pop_left:cTF { key } {
    \__bnvs_split_pop_left:cTF { id } {
      \__bnvs_split_pop_left:cTF { path } {
        \__bnvs_tl_if_blank:vTF { key } {
          #1
        } {
          \__bnvs_if_resolve_pop_kip_complete:
          #2
        }
      } {
\__bnvs_end_unreachable_return_false:n { if_resolve_pop_kip:TTF/2 }
      }
    } {
\__bnvs_end_unreachable_return_false:n { if_resolve_pop_kip:TTF/1 }
    }
  } { #3 }
}
\BNVS_new:cpn { if_resolve_pop_complete_white:T } #1 {
  \__bnvs_split_pop_left:cTF { n_incr } {
    \__bnvs_split_pop_left:cTF { incr } {
      \__bnvs_split_pop_left:cTF { post } {
        #1
      } {
\__bnvs_end_unreachable_return_false:n { if_resolve_pop_complete_white:T/3 }
      }
    } {
\__bnvs_end_unreachable_return_false:n { if_resolve_pop_complete_white:T/2 }
    }
  } {
\__bnvs_end_unreachable_return_false:n { if_resolve_pop_complete_white:T/1 }
  }
}
\BNVS_new:cpn { if_resolve_pop_complete_black:T } #1 {
  \__bnvs_split_pop_left:cTF { a } {
    \__bnvs_split_pop_left:cTF { a } {
      \__bnvs_split_pop_left:cTF { a } {
        \__bnvs_split_pop_left:cTF { a } {
          \__bnvs_split_pop_left:cTF { a } {
            \__bnvs_split_pop_left:cTF { a } {
              #1
            } {
\__bnvs_end_unreachable_return_false:n { if_resolve_pop_complete_black:T/6 }
            }
          } {
\__bnvs_end_unreachable_return_false:n { if_resolve_pop_complete_black:T/5 }
          }
        } {
\__bnvs_end_unreachable_return_false:n { if_resolve_pop_complete_black:T/4 }
        }
      } {
\__bnvs_end_unreachable_return_false:n { if_resolve_pop_complete_black:T/3 }
      }
    } {
\__bnvs_end_unreachable_return_false:n { if_resolve_pop_complete_black:T/2 }
    }
  } {
\__bnvs_end_unreachable_return_false:n { if_resolve_pop_complete_black:T/1 }
  }
}
\BNVS_int_new:c { split }
\BNVS_new:cpn { kip_x_path_resolve_or_end_return_false:nT } #1 #2 {
  \__bnvs_kip_x_path_resolve:TFF {
    #2
  } {
    \__bnvs_end_return_false:x { Too~many~dotted~components:~#1 }
  } {
    \__bnvs_end_return_false:x { Unknown~dotted~path:~#1 }
  }
}
\BNVS_new:cpn { if_append_break_end_return_false:nN } #1 #2 {
  \BNVS_set:cpn { if_append_loop_or_end_return: } {
    \__bnvs_end_return_false:
  }
}
\BNVS_new:cpn { end_return_false:x } #1 {
  \__bnvs_error:x { #1 }
  \__bnvs_end_return_false:
}
\cs_new:Npn \BNVS_end_tl_put_right:cv #1 #2 {
  \BNVS_tl_use:nv {
    \BNVS_end:
    \__bnvs_tl_put_right:cn { #1 }
  } { #2 }
}
\cs_new:Npn \BNVS_end_tl_set:cv #1 #2 {
  \BNVS_tl_use:nv {
    \BNVS_end:
    \__bnvs_tl_set:cn { #1 }
  } { #2 }
}
\cs_new:Npn \BNVS_end_v_gput:nc #1 #2 {
  \BNVS_tl_use:nv {
    \BNVS_end:
    \__bnvs_v_gput:nn { #1 }
  } { #2 }
}
\BNVS_new_conditional:cpnn { if_append:nc } #1 #2 { T, F, TF } {
  \BNVS_begin:
  \__bnvs_if_resolve:ncTF { #1 } { #2 } {
    \BNVS_end_tl_put_right:cv { #2 } { #2 }
    \prg_return_true:
  } {
    \BNVS_end:
    \prg_return_false:
  }
}
\BNVS_new:cpn { end_unreachable_return_false:n } #1 {
  \__bnvs_error:x { UNREACHABLE/#1 }
  \BNVS_end:
  \prg_return_false:
}
\BNVS_new_conditional:cpnn { if_resolve:nc } #1 #2 { T, F, TF } {
  \__bnvs_call:TF {
    \BNVS_begin:
    \BNVS_set:cpn { if_resolve_warning:n } ##1 {
      \__bnvs_warning:n { #1:~##1 }
      \BNVS_set:cpn { if_resolve_warning:n } {
        \use_none:n
      }
    }
  \__bnvs_regex_split:cnTF { split } { #1 } {
      \BNVS_set:cpn { if_resolve_end_return_true: } {
        \__bnvs_if_resolve_round_ans:
        \BNVS_tl_use:nv {
          \BNVS_end:
          \__bnvs_tl_set:cn { #2 }
        } { ans }
        \prg_return_true:
      }
      \BNVS_set:cpn { if_resolve_round_ans: } { \__bnvs_round_ans: }
      \__bnvs_tl_clear:c { ans }
      \__bnvs_if_resolve_loop_or_end_return:
    } {
      \__bnvs_tl_clear:c { ans }
      \__bnvs_round_ans:n { #1 }
      \BNVS_end_tl_set:cv { #2 } { ans }
      \prg_return_true:
    }
  } {
    \__bnvs_error:n { TOO_MANY_NESTED_CALLS/Resolution }
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { if_append:vc } #1 #2 { T, F, TF } {
  \BNVS_tl_use:Nv \__bnvs_if_append:ncTF { #1 } { #2 } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { if_resolve:vc } #1 #2 { T, F, TF } {
  \BNVS_tl_use:Nv \__bnvs_if_resolve:ncTF { #1 } { #2 } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\BNVS_new:cpn { if_resolve_loop_or_end_return: } {
  \__bnvs_split_pop_left:cTF { a } {
    \__bnvs_tl_put_right:cv { ans } { a }
    \__bnvs_if_resolve_pop_kip:TTF {
      \__bnvs_if_resolve_pop_kip:TTF {
\__bnvs_end_unreachable_return_false:n { if_resolve_loop_or_end_return:/3 }
      } {
        \__bnvs_if_resolve_pop_complete_white:T {
          \__bnvs_tl_if_blank:vTF { n_incr } {
            \__bnvs_tl_if_blank:vTF { incr } {
              \__bnvs_tl_if_blank:vTF { post } {
                \__bnvs_if_resolve_value_loop_or_end_return_true:F {
                  \__bnvs_seq_pop_right:ccTF { path } { a } {
                    \BNVS_tl_use:Nv \str_case:nnF { a } {
{ n         } { \BNVS_use:c { if_resolve_loop_or_end_return[.n]: } }
{ length    } { \BNVS_use:c { if_resolve_loop_or_end_return[.length]: } }
{ last      } { \BNVS_use:c { if_resolve_loop_or_end_return[.last]:  } }
{ range     } { \BNVS_use:c { if_resolve_loop_or_end_return[.range]: } }
{ previous  } { \BNVS_use:c { if_resolve_loop_or_end_return[.previous]: } }
{ next      } { \BNVS_use:c { if_resolve_loop_or_end_return[.next]:  } }
{ reset     } { \BNVS_use:c { if_resolve_loop_or_end_return[.reset]: } }
{ reset_all } { \BNVS_use:c { if_resolve_loop_or_end_return[.reset_all]: } }
                    } {
\BNVS_use:c { if_resolve_loop_or_end_return[...<integer>]: }
                    }
                  } {
\BNVS_use:c { if_resolve_loop_or_end_return[...]: }
                  }
                }
              } {
\BNVS_use:c { if_resolve_loop_or_end_return[...++]: }
              }
            } {
              \__bnvs_path_suffix:nTF { n } {
\BNVS_use:c { if_resolve_loop_or_end_return[...n+=...]: }
              } {
\BNVS_use:c { if_resolve_loop_or_end_return[...+=...]: }
              }
            }
          } {
\BNVS_use:c { if_resolve_loop_or_end_return[...++n]: }
          }
        }
      } {
\__bnvs_end_unreachable_return_false:n { if_resolve_loop_or_end_return:/2 }
      }
    } {
      \__bnvs_if_resolve_pop_complete_black:T {
        \__bnvs_path_suffix:nTF { n } {
\BNVS_use:c { if_resolve_loop_or_end_return[++...n]: }
        } {
\BNVS_use:c { if_resolve_loop_or_end_return[++...]: }
        }
      }
    } {
      \__bnvs_if_resolve_end_return_true:
    }
  } {
\__bnvs_end_unreachable_return_false:n { if_resolve_loop_or_end_return:/1 }
  }
}
\BNVS_set:cpn { if_resolve_value_loop_or_end_return_true:F } #1 {
  \__bnvs_tl_set:cx { a } {
    \BNVS_tl_use:c { key } \BNVS_tl_use:c { path }
  }
  \__bnvs_v_resolve:vcTF { a } { a } {
    \__bnvs_tl_put_right:cv { ans } { a }
    \__bnvs_if_resolve_loop_or_end_return:
  } {
    \__bnvs_value_resolve:vcTF { a } { a } {
      \__bnvs_tl_put_right:cv { ans } { a }
      \__bnvs_if_resolve_loop_or_end_return:
    } {
      #1
    }
  }
}
\BNVS_new:cpn { end_return_error:n } #1 {
      \__bnvs_error: { #1 }
      \bnvs_end:
      \prg_return_false:
}
\BNVS_new:cpn { if_resolve_loop_or_end_return[.n]: } {
  \__bnvs_path_resolve_n:T {
    \__bnvs_base_resolve_n:
    \__bnvs_n_index_append:vvcTF { key } { key_base } { ans } {
      \__bnvs_if_resolve_loop_or_end_return:
    } {
      \__bnvs_end_return_error: {
        Undefined~dotted~path
      }
    }
  }
}
\BNVS_new_conditional:cpnn { path_suffix:n } #1 { T, F, TF } {
  \__bnvs_seq_get_right:ccTF { path } { a } {
    \__bnvs_tl_if_eq:cnTF { a } { #1 } {
      \__bnvs_seq_pop_right:ccT { path } { a } { }
      \prg_return_true:
    } {
      \prg_return_false:
    }
  } {
    \prg_return_false:
  }
}
\BNVS_new:cpn { if_resolve_loop_or_end_return[.length]: } {
  \__bnvs_path_resolve_n:T {
    \__bnvs_length_append:vcTF { key } { ans } {
      \__bnvs_if_resolve_loop_or_end_return:
    } {
      \__bnvs_if_resolve_end_return_false:n { NO~length }
    }
  }
}
\BNVS_new:cpn { if_resolve_loop_or_end_return[.last]: } {
  \__bnvs_path_resolve_n:T {
    \__bnvs_last_append:vcTF { key } { ans } {
      \__bnvs_if_resolve_loop_or_end_return:
    } {
      \__bnvs_end_return_false:n { NO~last }
    }
  }
}
\BNVS_new:cpn { if_resolve_loop_or_end_return[.range]: } {
  \__bnvs_path_resolve_n:T {
    \__bnvs_range_append:vcTF { key } { ans } {
      \BNVS_set:cpn { if_resolve_round_ans: } { \prg_do_nothing: }
      \__bnvs_if_resolve_loop_or_end_return:
    } {
      \__bnvs_if_resolve_end_return_false:n { NO~range }
    }
  }
}
\BNVS_new:cpn { if_resolve_loop_or_end_return[.previous]: } {
  \__bnvs_path_resolve_n:T {
    \__bnvs_previous_append:vcTF { key } { ans } {
      \__bnvs_if_resolve_loop_or_end_return:
    } {
      \__bnvs_if_resolve_end_return_false:n { NO~previous }
    }
  }
}
\BNVS_new:cpn { if_resolve_loop_or_end_return[.next]: } {
  \__bnvs_path_resolve_n:T {
    \__bnvs_next_append:vcTF { key } { ans } {
      \__bnvs_if_resolve_loop_or_end_return:
    } {
      \__bnvs_if_resolve_end_return_false:n { NO~next }
    }
  }
}
\BNVS_new:cpn { if_resolve_loop_or_end_return[.reset]: } {
  \__bnvs_path_resolve_n:T {
    \__bnvs_v_greset:vnT { key } { } { }
    \__bnvs_value_append:vcTF { key } { ans } {
      \__bnvs_if_resolve_loop_or_end_return:
    } {
      \__bnvs_if_resolve_end_return_false:n { NO~reset }
    }
  }
}
\BNVS_new:cpn { if_resolve_loop_or_end_return[.reset_all]: } {
  \__bnvs_path_resolve_n:T {
    \__bnvs_greset_all:vnT { key } { } { }
    \__bnvs_value_append:vcTF { key } { ans } {
      \__bnvs_if_resolve_loop_or_end_return:
    } {
      \__bnvs_if_resolve_end_return_false:n { NO~reset }
    }
  }
}
\BNVS_set:cpn { if_resolve_loop_or_end_return[...<integer>]: } {
  \__bnvs_path_resolve_n:T {
    \__bnvs_index_append:vvcTF { key } { a } { ans } {
      \__bnvs_if_resolve_loop_or_end_return:
    } {
      \__bnvs_if_resolve_end_return_false:n { NO~integer }
    }
  }
}
\BNVS_set:cpn { if_resolve_loop_or_end_return[...]: } {
  \__bnvs_path_resolve_n:T {
    \__bnvs_value_append:vcTF { key } { ans } {
      \__bnvs_if_resolve_loop_or_end_return:
    } {
      \__bnvs_if_resolve_end_return_false:n { NO~value }
    }
  }
}
\BNVS_set:cpn { if_resolve_loop_or_end_return[...++]: } {
  \__bnvs_path_suffix:nTF { reset } {
    \__bnvs_path_resolve_n:T {
      \__bnvs_v_greset:vnT { key } { } { }
      \__bnvs_v_post_append:vncTF { key } { 1 }  { ans } {
        \__bnvs_if_resolve_loop_or_end_return:
      } {
        \__bnvs_if_resolve_end_return_false:n { NO~post }
      }
    }
  } {
    \__bnvs_path_suffix:nTF { reset_all } {
      \__bnvs_path_resolve_n:T {
        \__bnvs_greset_all:vnT { key } { } { }
        \__bnvs_v_post_append:vncTF { key } { 1 }  { ans } {
          \__bnvs_if_resolve_loop_or_end_return:
        } {
          \__bnvs_if_resolve_end_return_false:n { NO~post }
        }
      }
    } {
      \__bnvs_path_resolve_n:T {
        \__bnvs_v_post_append:vncTF { key } { 1 }  { ans } {
          \__bnvs_if_resolve_loop_or_end_return:
        } {
          \__bnvs_if_resolve_end_return_false:n { NO~post }
        }
      }
    }
  }
}
\BNVS_set:cpn { if_resolve_loop_or_end_return[...n+=...]: } {
  \__bnvs_path_resolve_n:T {
    \__bnvs_base_resolve_n:
    \__bnvs_n_incr_append:vvvcTF { key } { key_base }  { incr }  { ans } {
      \__bnvs_if_resolve_loop_or_end_return:
    } {
      \__bnvs_if_resolve_end_return_false:n {
        NO~n~incrementation
      }
    }
  }
}
\BNVS_set:cpn { if_resolve_loop_or_end_return[...+=...]: } {
  \__bnvs_path_resolve_n:T {
    \__bnvs_v_incr_append:vvcTF { key }  { incr }  { ans } {
      \__bnvs_if_resolve_loop_or_end_return:
    } {
      \__bnvs_if_resolve_end_return_false:n {
        NO~incremented~value
      }
    }
  }
}
\BNVS_new:cpn { base_resolve_n: } {
  \__bnvs_seq_if_empty:cF { path_base } {
    \__bnvs_seq_pop_right:cc { path_base } { a }
    \__bnvs_seq_if_empty:cF { path_base } {
      \__bnvs_tl_put_right:cx { key_base } {
        . \__bnvs_seq_use:cn { path_base } { . }
      }
    }
  }
}
\BNVS_new:cpn { base_resolve: } {
  \__bnvs_seq_if_empty:cF { path_base } {
    \__bnvs_tl_put_right:cx { key_base } {
      . \__bnvs_seq_use:cn { path_base } { . }
    }
  }
}
\BNVS_new:cpn { if_resolve_loop_or_end_return[...++n]: } {
  \__bnvs_path_resolve_n:T {
    \__bnvs_base_resolve:
    \__bnvs_n_incr_append:vvncTF { key } { key_base } { 1 }  { ans } {
      \__bnvs_if_resolve_loop_or_end_return:
    } {
      \__bnvs_if_resolve_end_return_false:n { NO~...++n }
    }
  }
}
\BNVS_set:cpn { if_resolve_loop_or_end_return[++...n]: } {
  \__bnvs_path_resolve_n:T {
    \__bnvs_base_resolve_n:
    \__bnvs_n_incr_append:vvncTF { key } { key_base } { 1 }  { ans } {
      \__bnvs_if_resolve_loop_or_end_return:
    } {
      \__bnvs_if_resolve_end_return_false:n { NO~++...n }
    }
  }
}
\BNVS_new:cpn { if_resolve_loop_or_end_return[++...]: } {
  \__bnvs_path_suffix:nTF { reset } {
    \__bnvs_path_resolve_n:T {
      \__bnvs_v_incr_append:vncTF { key } { 1 } { ans } {
        \__bnvs_v_greset:vnT { key } { } { }
        \__bnvs_if_resolve_loop_or_end_return:
      } {
        \__bnvs_v_greset:vnT { key } { } { }
        \__bnvs_if_resolve_end_return_false:n { No~increment }
      }
    }
  } {
    \__bnvs_path_suffix:nTF { reset_all } {
      \__bnvs_path_resolve_n:T {
        \__bnvs_v_incr_append:vncTF { key } { 1 } { ans } {
          \__bnvs_greset_all:vnT { key } { } { }
          \__bnvs_if_resolve_loop_or_end_return:
        } {
          \__bnvs_greset_all:vnT { key } { } { }
          \__bnvs_if_resolve_end_return_false:n { No~increment }
        }
      }
    } {
      \__bnvs_path_resolve_n:T {
        \__bnvs_v_incr_append:vncTF { key } { 1 } { ans } {
          \__bnvs_if_resolve_loop_or_end_return:
        } {
          \__bnvs_if_resolve_end_return_false:n { No~increment }
        }
      }
    }
  }
}
\regex_const:Nn \c__bnvs_A_cln_Z_regex {
  \A \s* (?:
    ( [^:]+? )
    | ( [^:]+? ) \s* : (?: ( \s* [^:]*? ) | : ( \s* [^:]*? ) )
    | :: \s* (?: ( [^:]+? ) \s* : \s* ( [^:]+? ) )?
    | : \s* (?: ( [^:]+? ) \s* :: \s* ( [^:]*? ) )?
  )
  \s* \Z
}
\BNVS_set:cpn { query_eval_end_return_true: } {
  \group_end:
  \prg_return_true:
}
\BNVS_set:cpn { query_eval_end_return_false: } {
  \group_end:
  \prg_return_false:
}
\BNVS_new:cpn { query_eval_break:n } #1 {
  \BNVS_set:cpn { query_eval_loop_or_end_return: } {
    \group_end:
    \prg_return_false:
  }
}
\BNVS_new:cpn { query_eval_unreachable: } {
  \__bnvs_query_eval_break_end_return_false:n { UNREACHABLE }
}
\BNVS_new:cpn { if_blank:cTF } #1 {
  \BNVS_tl_use:Nc \tl_if_blank:VTF { #1 }
}
\BNVS_new_conditional:cpnn { match_pop_left:c } #1 { T, F, TF } {
  \BNVS_tl_use:nc {
    \BNVS_seq_use:Nc \seq_pop_left:NNTF { match }
  } { #1 } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { query_eval_match_branch: } { T, F, TF } {
  \__bnvs_match_pop_left:cT V {
    \__bnvs_match_pop_left:cT V {
      \__bnvs_if_blank:cTF V {
        \__bnvs_match_pop_left:cT A {
          \__bnvs_match_pop_left:cT Z {
            \__bnvs_match_pop_left:cT L {
              \__bnvs_if_blank:cTF A {
                \__bnvs_match_pop_left:cT L {
                  \__bnvs_match_pop_left:cT Z {
                    \__bnvs_if_blank:cTF Z {
                      \__bnvs_if_blank:cTF L {
                        \__bnvs_match_pop_left:cT Z {
                          \__bnvs_match_pop_left:cT L {
                            \__bnvs_if_blank:cTF L {
                              \__bnvs_if_blank:cTF Z {
                                \BNVS_use:c { query_eval_return[:]: }
                              } {
                                \BNVS_use:c { query_eval_return[:Z]: }
                              }
                            } {
                              \__bnvs_if_blank:cTF Z {
\__bnvs_error:n { Missing~first~or~last }
\__bnvs_query_eval_break_end_return_false:
                              } {
                                \BNVS_use:c { query_eval_return[:Z::L]: }
                              }
                            }
                          }
                        }
                      } {
\__bnvs_error:n { Missing~first~or~last }
\__bnvs_query_eval_break_end_return_false:
                      }
                    } {
                      \__bnvs_if_blank:cTF L {
                        \__bnvs_query_eval_unreachable:
                      } {
                        \BNVS_use:c { query_eval_return[:Z::L]: }
                      }
                    }
                  }
                }
              } {
                \__bnvs_if_blank:cTF Z {
                  \__bnvs_if_blank:cTF L {
                    \BNVS_use:c { query_eval_return[A:]: }
                  } {
                    \BNVS_use:c { query_eval_return[A::L]: }
                  }
                } {
                  \__bnvs_if_blank:cTF L {
                    \BNVS_use:c { query_eval_return[A:Z]: }
                  } {
\__bnvs_error:n { Only~two~of~first,~last~or~length }
\__bnvs_query_eval_break_end_return_false:
                  }
                }
              }
            }
          }
        }
      } {
        \BNVS_use:c { query_eval_return[V]: }
      }
    }
  }
}
\BNVS_new:cpn { query_eval_return[V]: } {
  \__bnvs_if_resolve:vcTF { V } { ans } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\BNVS_new:cpn { query_eval_return[A:Z]: } {
  \__bnvs_if_resolve:vcTF { A } { ans } {
    \__bnvs_tl_put_right:cn { ans } { - }
    \__bnvs_if_append:vcTF { Z } { ans } {
      \prg_return_true:
    } {
      \prg_return_false:
    }
  } {
    \prg_return_false:
  }
}
\BNVS_new:cpn { query_eval_return[A::L]: } {
  \__bnvs_if_resolve:vcTF { A } { A } {
    \__bnvs_if_resolve:vcTF { L } { ans } {
      \__bnvs_tl_put_right:cn { ans } { + }
      \__bnvs_tl_put_right:cv { ans } { A }
      \__bnvs_tl_put_right:cn { ans } { -1 }
      \__bnvs_round_ans:
      \__bnvs_tl_put_left:cn { ans } { - }
      \__bnvs_tl_put_left:cv { ans } { A }
      \prg_return_true:
    } {
      \prg_return_false:
    }
  } {
    \prg_return_false:
  }
}
\BNVS_new:cpn { query_eval_return[A:]: } {
  \__bnvs_if_resolve:vcTF { A } { ans } {
    \__bnvs_tl_put_right:cn { ans } { - }
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\BNVS_new:cpn { query_eval_return[:Z::L]: } {
  \__bnvs_if_resolve:vcTF { Z } { Z } {
    \__bnvs_if_resolve:vcTF { L } { ans } {
      \__bnvs_tl_put_left:cn  { ans } { 1-}
      \__bnvs_tl_put_right:cn { ans } { + }
      \__bnvs_tl_put_right:cv { ans } { Z }
      \__bnvs_round_ans:
      \__bnvs_tl_put_right:cn { ans } { - }
      \__bnvs_tl_put_right:cv { ans } { Z }
      \prg_return_true:
    } {
      \prg_return_false:
    }
  } {
    \prg_return_false:
  }
}
\BNVS_new:cpn { query_eval_return[:]: } {
  \__bnvs_tl_set:cn { ans } { - }
  \prg_return_true:
}
\BNVS_new:cpn { query_eval_return[:Z]: } {
  \__bnvs_tl_set:cn { ans } { - }
  \__bnvs_if_append:vcTF { Z } { ans } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { query_eval:nc } #1 #2 { T, F, TF } {
  \__bnvs_call_greset:
  \__bnvs_match_once:NnTF \c__bnvs_A_cln_Z_regex { #1 } {
    \BNVS_begin:
    \__bnvs_query_eval_match_branch:TF {
      \BNVS_end_tl_set:cv { #2 } { ans }
      \prg_return_true:
    } {
      \BNVS_end:
      \prg_return_false:
    }
  } {
    \__bnvs_error:n { Syntax~error:~#1 }
    \prg_return_false:
  }
}
\regex_const:Nn \c__bnvs_comma_regex { \s* , \s* }
\BNVS_new:cpn { eval:nc } #1 #2 {
  \BNVS_begin:
  \__bnvs_seq_clear:c { query }
  \__bnvs_seq_clear:c { ans }
  \regex_split:NnN \c__bnvs_comma_regex { #1 } \l__bnvs_query_seq
  \__bnvs_seq_map_inline:cn { query } {
    \__bnvs_tl_clear:c { ans }
    \__bnvs_query_eval:ncTF { ##1 } { ans } {
      \__bnvs_seq_put_right:cv { ans } { ans }
    } {
      \seq_map_break:n {
        \__bnvs_error:n { Circular/Undefined~dependency~in~#1}
      }
    }
  }
  \exp_args:NNnx
  \BNVS_end:
  \__bnvs_tl_put_right:cn { #2 } { \__bnvs_seq_use:cn { ans } , }
}
\NewDocumentCommand \BeanovesEval { O{} m } {
  \BNVS_begin:
  \keys_define:nn { BeanovesEval } {
    in .tl_set:N = \l__bnvs_BeanovesEval_tl,
    in .initial:n = { },
    see .bool_set:N = \l__bnvs_BeanovesEval_bool,
    see .default:n = true,
    see .initial:n = false,
  }
  \keys_set:nn { BeanovesEval } { #1 }
  \__bnvs_tl_clear:c { ans }
  \__bnvs_eval:nc { #2 } { ans }
  \__bnvs_tl_if_empty:cTF { BeanovesEval } {
    \bool_if:nTF { \l__bnvs_BeanovesEval_bool } {
      \BNVS_tl_use:Nv \BNVS_end: { ans }
    } {
      \BNVS_end:
    }
  } {
    \bool_if:nTF { \l__bnvs_BeanovesEval_bool } {
      \cs_set:Npn \BNVS_end:Nn ##1 ##2 {
        \BNVS_end:
        \tl_set:Nn ##1 { ##2 }
        ##2
      }
      \BNVS_tl_use:nv {
        \exp_last_unbraced:NV \BNVS_end:Nn \l__bnvs_BeanovesEval_tl
      } { ans }
    } {
      \cs_set:Npn \BNVS_end:Nn ##1 ##2 {
        \BNVS_end:
        \tl_set:Nn ##1 { ##2 }
      }
      \BNVS_tl_use:nv {
        \exp_last_unbraced:NV \BNVS_end:Nn \l__bnvs_BeanovesEval_tl
      } { ans }
    }
  }
}
\NewDocumentCommand \BeanovesReset { s O{} m } {
  \__bnvs_name_id_n_get:nTF { #3 } {
    \BNVS_tl_use:nv {
      \IfBooleanTF { #1 } {
        \__bnvs_greset_all:nnF
      } {
        \__bnvs_v_greset:nnF
      }
    } { key } { #2 } {
    }
  } {
    \__bnvs_warning:n { Bad~name:~#3 }
  }
  \ignorespaces
}
\makeatother
\ExplSyntaxOff
%% 
%% beanoves --- beamer named overlay specifications
%% 
%% Copyright (C) 2023 by Jérôme LAURENS <jerome.laurens@u-bourgogne.fr>
%% 
%% This work may be distributed and/or modified under the
%% conditions of the LaTeX Project Public License (LPPL), either
%% version 1.3c of this license or (at your option) any later
%% version.  The latest version of this license is in the file:
%% 
%% https://www.latex-project.org/lppl.txt
%% 
%% This work is "maintained" (as per LPPL maintenance status) by
%% Jérôme LAURENS.
%% 
%% This work consists of the file  beanoves.dtx
%% and the derived files           beanoves.ins,
%%                                 beanoves.pdf,
%%                                 beanoves.sty and
%%                                 beanoves-debug.sty.
%% 
%%
%% End of file `beanoves.sty'.
