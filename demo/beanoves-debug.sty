%%
%% This is file `beanoves-debug.sty',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% beanoves.dtx  (with options: `package,debug')
%% 
\NeedsTeXFormat{LaTeX2e}[2020/01/01]
\ProvidesExplPackage
  {beanoves-debug}
  {2024/01/11}
  {1.0}
  {Named overlay specifications for beamer}
\cs_new:Npn \BNVS:c    #1    { __bnvs_#1     }
\cs_new:Npn \BNVS_l:cn #1 #2 { l__bnvs_#1_#2 }
\cs_new:Npn \BNVS_g:cn #1 #2 { g__bnvs_#1_#2 }
\cs_new:Npn \BNVS_use_raw:N #1 { #1 }
\cs_new:Npn \BNVS_use_raw:c #1 {
  \exp_last_unbraced:No
  \BNVS_use_raw:N { \cs:w #1 \cs_end: }
}
\cs_new:Npn \BNVS_use:c #1 {
  \BNVS_use_raw:c { \BNVS:c { #1 } }
}
\cs_new:Npn \BNVS_use_raw:NN #1 #2 {
  #1 #2
}
\cs_new:Npn \BNVS_use_raw:nN #1 #2 {
  #1 #2
}
\cs_new:Npn \BNVS_use_raw:Nc #1 #2 {
  \exp_last_unbraced:NNo
  \BNVS_use_raw:NN #1 { \cs:w #2 \cs_end: }
}
\cs_new:Npn \BNVS_use_raw:nc #1 #2 {
  \exp_last_unbraced:Nno
  \BNVS_use_raw:nN { #1 } { \cs:w #2 \cs_end: }
}
\cs_new:Npn \BNVS_use:Nc #1 #2 {
  \BNVS_use_raw:Nc #1 { \BNVS:c { #2 } }
}
\cs_new:Npn \BNVS_use:nc #1 #2 {
  \BNVS_use_raw:nc { #1 } { \BNVS:c { #2 } }
}
\cs_set_eq:NN \BNVS_use_raw_saved:N \BNVS_use_raw:N
\cs_set:Npn \BNVS_use_raw:N #1 {
  \cs_if_exist:NF #1 {
    \BNVS_fatal:x { Unknown~command~\token_to_str:N #1~(c) }
  }
  #1
}
\cs_set_eq:NN \BNVS_use_raw_saved:NN \BNVS_use_raw:NN
\cs_set:Npn \BNVS_use_raw:NN #1 #2 {
  \cs_if_exist:NF #2 {
    \BNVS_fatal:x { Unknown~command~\token_to_str:N #2~(N) }
  }
  \BNVS_use_raw_saved:NN #1 #2
}
\cs_set_eq:NN \BNVS_use_raw_saved:nN \BNVS_use_raw:nN
\cs_set:Npn \BNVS_use_raw:nN #1 #2 {
  \cs_if_exist:NF #2 {
    \BNVS_fatal:x { Unknown~command~\token_to_str:N #2~(n) }
  }
  \BNVS_use_raw_saved:nN { #1 } #2
}

\cs_new:Npn \BNVS_log:n #1 { }
\cs_generate_variant:Nn \BNVS_log:n { x }
\cs_new:Npn \BNVS_DEBUG_on: {
  \cs_set:Npn \BNVS_DEBUG_log:n { \BNVS_log:n }
}
\cs_new:Npn \BNVS_DEBUG_off: {
  \cs_set:Npn \BNVS_DEBUG_log:n { \use_none:n }
}
\BNVS_DEBUG_off:
\cs_new:Npn \BNVS_new:cpn #1 {
\BNVS_DEBUG_log:n {New=>#1}
  \cs_new:cpn { \BNVS:c { #1 } }
}
\cs_new:Npn \BNVS_undefine:c #1 {
  \cs_undefine:c { \BNVS:c { #1 } }
}
\cs_new:Npn \BNVS_set:cpn #1 {
\BNVS_DEBUG_log:n {BNVS_set:cpn=>#1}
  \cs_set:cpn { \BNVS:c { #1 } }
}
\cs_generate_variant:Nn \cs_generate_variant:Nn { c }
\cs_new:Npn \BNVS_generate_variant:cn #1 {
  \cs_generate_variant:cn { \BNVS:c { #1 } }
}
\msg_new:nnn { beanoves } { :n } { #1 }
\msg_new:nnn { beanoves } { :nn } { #1~(#2) }
\BNVS_new:cpn { warning:n } {
  \msg_warning:nnn { beanoves } { :n }
}
\BNVS_generate_variant:cn { warning:n } { x }
\cs_new:Npn \BNVS_error:n {
  \msg_error:nnn { beanoves } { :n }
}
\cs_new:Npn \BNVS_error:x {
  \msg_error:nnx { beanoves } { :n }
}
\cs_new:Npn \BNVS_fatal:n {
  \msg_fatal:nnn { beanoves } { :n }
}
\cs_new:Npn \BNVS_fatal:x {
  \msg_fatal:nnx { beanoves } { :n }
}
\cs_new:Npn \BNVS_log_a:nn #1 #2 {
  \msg_term:nnn { beanoves } { :n } { #1~#2 }
}
\cs_generate_variant:Nn \BNVS_log_a:nn { xn }
\int_zero_new:N \l__BNVS_DEBUG_group_int
\cs_set:Npn \BNVS_log:n {
  \BNVS_log_a:xn
  { ▃▃ \prg_replicate:nn {\l__BNVS_DEBUG_group_int} {▁▃} \space }
}
\cs_new:Npn \BNVS_N_new:c #1 {
\BNVS_log:x { New => \token_to_str:c { BNVS_#1:c } }
\BNVS_log:x { New => \token_to_str:c { BNVS_#1_new:c } }
\BNVS_log:x { New => \token_to_str:c { BNVS_#1_use:c } }
\BNVS_log:x { New => \token_to_str:c { BNVS_#1_use:Nc } }
\BNVS_log:x { New => \token_to_str:c { BNVS_#1_use:nc } }
  \cs_new:cpn { BNVS_#1:c } ##1 {
    l \BNVS:c{ ##1 } \tl_if_empty:nF { ##1 } { _ } #1
  }
  \cs_new:cpn { BNVS_#1_new:c } ##1 {
\BNVS_log:x { New => \token_to_str:c { \use:c { BNVS_#1:c } { ##1 } } }
    \use:c { #1_new:c } { \use:c { BNVS_#1:c } { ##1 } }
  }
  \cs_new:cpn { BNVS_#1_undefine:c } ##1 {
    \cs_undefine:c { \use:c { BNVS_#1:c } { ##1 } }
  }
  \cs_new:cpn { BNVS_#1_use:c } ##1 {
    \use:c { \use:c { BNVS_#1:c } { ##1 } }
  }
  \cs_new:cpn { BNVS_#1_use:Nc } ##1 ##2 {
    \BNVS_use_raw:Nc
      ##1 { \use:c { BNVS_#1:c } { ##2 } }
  }
  \cs_new:cpn { BNVS_#1_use:nc } ##1 ##2 {
    \BNVS_use_raw:nc
      { ##1 } { \use:c { BNVS_#1:c } { ##2 } }
  }
}
\cs_new:Npn \BNVS_v_new:c #1 {
\BNVS_log:x { New => \token_to_str:c { BNVS_#1_use:Nv } }
\BNVS_log:x { New => \token_to_str:c { BNVS_#1_use:cv } }
\BNVS_log:x { New => \token_to_str:c { BNVS_#1_use:nv } }
  \cs_new:cpn { BNVS_#1_use:Nv } ##1 ##2 {
    \BNVS_use_raw:nc
      { \exp_args:NV ##1 }
      { \BNVS_use_raw:c { BNVS_#1:c } { ##2 } }
  }
  \cs_new:cpn { BNVS_#1_use:cv } ##1 ##2 {
    \BNVS_use_raw:nc
      { \exp_args:NnV \BNVS_use:c { ##1 } }
      { \BNVS_use_raw:c { BNVS_#1:c } { ##2 } }
  }
  \cs_new:cpn { BNVS_#1_use:nv } ##1 ##2 {
    \BNVS_use_raw:nc
      { \exp_args:NnV \use:n { ##1 } }
      { \BNVS_use_raw:c { BNVS_#1:c } { ##2 } }
  }
}
\cs_new:Npn \BNVS_undefine_all:c #1 {
  \cs_undefine:c { BNVS_#1:c }
  \cs_undefine:c { BNVS_#1_new:c }
  \cs_undefine:c { BNVS_#1_use:c }
  \cs_undefine:c { BNVS_#1_use:nc }
  \cs_undefine:c { BNVS_#1_use:Nc }
  \cs_undefine:c { BNVS_#1_use:nv }
  \cs_undefine:c { BNVS_#1_use:Nv }
  \cs_undefine:c { BNVS_#1_use:cv }
}
\BNVS_N_new:c { bool }
\BNVS_N_new:c { int }
\BNVS_v_new:c { int }
\BNVS_N_new:c { tl }
\BNVS_v_new:c { tl }
\BNVS_N_new:c { str }
\BNVS_v_new:c { str }
\BNVS_N_new:c { seq }
\BNVS_v_new:c { seq }
\cs_new:Npn \BNVS_use:Ncn #1 #2 #3 {
  \BNVS_use_raw:c { BNVS_#3_use:Nc }   #1   { #2 }
}
\cs_new:Npn \BNVS_use:ncn #1 #2 #3 {
  \BNVS_use_raw:c { BNVS_#3_use:nc } { #1 } { #2 }
}
\cs_new:Npn \BNVS_use:Nvn #1 #2 #3 {
  \BNVS_use_raw:c { BNVS_#3_use:Nv }   #1   { #2 }
}
\cs_new:Npn \BNVS_use:nvn #1 #2 #3 {
  \BNVS_use_raw:c { BNVS_#3_use:nv } { #1 } { #2 }
}
\cs_new:Npn \BNVS_use:Ncncn #1 #2 #3 {
  \BNVS_use:ncn {
    \BNVS_use:Ncn   #1   { #2 } { #3 }
  }
}
\cs_new:Npn \BNVS_use:ncncn #1 #2 #3 {
  \BNVS_use:ncn {
    \BNVS_use:ncn { #1 } { #2 } { #3 }
  }
}
\cs_new:Npn \BNVS_use:Nvncn #1 #2 #3 {
  \BNVS_use:ncn {
    \BNVS_use:Nvn   #1   { #2 } { #3 }
  }
}
\cs_new:Npn \BNVS_use:nvncn #1 #2 #3 {
  \BNVS_use:ncn {
    \BNVS_use:nvn { #1 } { #2 } { #3 }
  }
}
\cs_new:Npn \BNVS_use:Ncncncn #1 #2 #3 #4 #5 {
  \BNVS_use:ncn {
    \BNVS_use:Ncncn   #1   { #2 } { #3 } { #4 } { #5 }
  }
}
\cs_new:Npn \BNVS_use:ncncncn #1 #2 #3 #4 #5 {
  \BNVS_use:ncn {
    \BNVS_use:ncncn { #1 } { #2 } { #3 } { #4 } { #5 }
  }
}
\cs_new:Npn \BNVS_new_c:nc #1 #2 {
  \BNVS_new:cpn { #1_#2:c } {
    \BNVS_use_raw:c { BNVS_#1_use:nc } { \BNVS_use_raw:c { #1_#2:N } }
  }
}
\cs_new:Npn \BNVS_new_cn:nc #1 #2 {
  \BNVS_new:cpn { #1_#2:cn } ##1 {
    \BNVS_use:ncn { \BNVS_use_raw:c { #1_#2:Nn } } { ##1 } { #1 }
  }
}
\cs_new:Npn \BNVS_new_cnn:ncN #1 #2 #3 {
  \BNVS_new:cpn { #2:cnn } ##1 {
    \BNVS_use:Ncn { #3 } { ##1 } { #1 }
  }
}
\cs_new:Npn \BNVS_new_cnn:nc #1 #2 {
  \BNVS_use_raw:nc {
    \BNVS_new_cnn:ncN { #1 } { #1_#2 }
  } { #1_#2:Nnn }
}
\cs_new:Npn \BNVS_new_cnv:ncN #1 #2 #3 {
  \BNVS_new:cpn { #2:cnv } ##1 ##2 {
    \BNVS_tl_use:nv {
      \BNVS_use:Ncn #3 { ##1 } { #1 } {  ##2 }
    }
  }
}
\cs_new:Npn \BNVS_new_cnv:nc #1 #2 {
  \BNVS_use_raw:nc {
    \BNVS_new_cnv:ncN { #1 } { #1_#2 }
  } { #1_#2:Nnn }
}
\cs_new:Npn \BNVS_new_cnx:ncN #1 #2 #3 {
  \BNVS_new:cpn { #2:cnx } ##1 ##2 {
    \exp_args:Nnx \use:n {
      \BNVS_use:Ncn #3 { ##1 } { #1 } {  ##2 }
    }
  }
}
\cs_new:Npn \BNVS_new_cnx:nc #1 #2 {
  \BNVS_use_raw:nc {
    \BNVS_new_cnx:ncN { #1 } { #1_#2 }
  } { #1_#2:Nnn }
}
\cs_new:Npn \BNVS_new_cc:ncNn #1 #2 #3 #4 {
  \BNVS_new:cpn { #2:cc } ##1 ##2 {
    \BNVS_use:Ncncn #3 { ##1 } { #1 } { ##2 } { #4 }
  }
}
\cs_new:Npn \BNVS_new_cc:ncn #1 #2 {
  \BNVS_use_raw:nc {
    \BNVS_new_cc:ncNn { #1 } { #1_#2 }
  } { #1_#2:NN }
}
\cs_new:Npn \BNVS_undefine_cc:nc #1 #2 {
  \BNVS_undefine:c { #1_#2:cc }
}
\cs_new:Npn \BNVS_new_cc:nc #1 #2 {
  \BNVS_new_cc:ncn { #1 } { #2 } { #1 }
}
\cs_new:Npn \BNVS_new_cn:ncNn #1 #2 #3 #4 {
  \BNVS_new:cpn { #2:cn } ##1 {
    \BNVS_use:Ncn #3 { ##1 } { #1 }
  }
}
\cs_new:Npn \BNVS_new_cn:ncn #1 #2 {
  \BNVS_use_raw:nc {
    \BNVS_new_cn:ncNn { #1 } { #1_#2 }
  } { #1_#2:Nn }
}
\cs_new:Npn \BNVS_new_cv:ncNn #1 #2 #3 #4 {
  \BNVS_new:cpn { #2:cv } ##1 ##2 {
    \BNVS_use:nvn {
      \BNVS_use:Ncn #3 { ##1 } { #1 }
    } { ##2 } { #4 }
  }
}
\cs_new:Npn \BNVS_new_cv:ncn #1 #2 {
  \BNVS_use_raw:nc {
    \BNVS_new_cv:ncNn { #1 } { #1_#2 }
  } { #1_#2:Nn }
}
\cs_new:Npn \BNVS_new_cv:nc #1 #2 {
  \BNVS_new_cv:ncn { #1 } { #2 } { #1 }
}
\cs_new:Npn \BNVS_undefine_cv:nc #1 #2 {
  \BNVS_undefine:c { #1_#2:cv }
}
\cs_new:Npn \BNVS_l_use:Ncn #1 #2 #3 {
  \BNVS_use_raw:Nc   #1   { \BNVS_l:cn { #2 } { #3 } }
}
\cs_new:Npn \BNVS_l_use:ncn #1 #2 #3 {
  \BNVS_use_raw:nc { #1 } { \BNVS_l:cn { #2 } { #3 } }
}
\cs_new:Npn \BNVS_g_use:Ncn #1 #2 #3 {
  \BNVS_use_raw:Nc   #1   { \BNVS_g:cn { #2 } { #3 } }
}
\cs_new:Npn \BNVS_g_use:ncn #1 #2 #3 {
  \BNVS_use_raw:nc { #1 } { \BNVS_g:cn { #2 } { #3 } }
}
\cs_new:Npn \BNVS_g_prop_use:Nc #1 #2 {
  \BNVS_use_raw:Nc   #1   { \BNVS_g:cn { #2 } { prop } }
}
\cs_new:Npn \BNVS_g_prop_use:nc #1 #2 {
  \BNVS_use_raw:nc { #1 } { \BNVS_g:cn { #2 } { prop } }
}
\cs_new:Npn \BNVS_exp_args:Nvvv #1 #2 #3 #4 {
  \BNVS_use:ncncncn { \exp_args:NVVV #1 }
    { #2 } { tl } { #3 } { tl } { #4 } { tl }
}
\cs_generate_variant:Nn \prg_new_conditional:Npnn { c }
\cs_new:Npn \BNVS_new_conditional:cpnn #1 {
\BNVS_log:x {New => \token_to_str:c { \BNVS:c { #1 } } [TF?] }
  \prg_new_conditional:cpnn { \BNVS:c { #1 } }
}
\cs_generate_variant:Nn \cs_split_function:N { c }
\cs_new:Npn \BNVS_undefine_conditional:c #1 {
  \BNVS_undefine:c {
    \exp_last_unbraced:Nf \use_i:nnn { \cs_split_function:c { #1 } }
    _p:
    \exp_last_unbraced:Nf \use_ii:nnn { \cs_split_function:c { #1 } }
  }
  \clist_map_inline:nn { T, F, TF } {
    \BNVS_undefine:c { #1##1 }
  }
}
\cs_new:Npn \BNVS_prg_undefine_conditional:c #1 {
  \cs_undefine:c {
    \exp_last_unbraced:Nf \use_i:nnn { \cs_split_function:c { #1 } }
    _p:
    \exp_last_unbraced:Nf \use_ii:nnn { \cs_split_function:c { #1 } }
  }
  \clist_map_inline:nn { T, F, TF } {
    \cs_undefine:c { #1##1 }
  }
}
\cs_generate_variant:Nn \prg_generate_conditional_variant:Nnn { c }
\cs_new:Npn \BNVS_generate_conditional_variant:cnn #1 {
\BNVS_DEBUG_log:n { Variant => #1[TF] }
  \prg_generate_conditional_variant:cnn { \BNVS:c { #1 } }
}
\cs_new:Npn \BNVS_new_conditional_vn:cNnn #1 #2 #3 #4 {
  \BNVS_new_conditional:cpnn { #1:vn } ##1 ##2 { #4 } {
    \BNVS_use:Nvn #2 { ##1 } { #3 } { ##2 } {
      \prg_return_true:
    } {
      \prg_return_false:
    }
  }
}
\cs_new:Npn \BNVS_new_conditional_vn:cnn #1 #2 {
  \BNVS_use:nc {
    \BNVS_new_conditional_vn:cNnn { #1 }
  } { #1:nn TF } { #2 }
}
\cs_new:Npn \BNVS_new_conditional_vc:cNnn #1 #2 #3 #4 {
  \BNVS_new_conditional:cpnn { #1:vc } ##1 ##2 { #4 } {
    \BNVS_use:Nvn #2 { ##1 } { #3 } { ##2 } {
      \prg_return_true:
    } {
      \prg_return_false:
    }
  }
}
\cs_new:Npn \BNVS_new_conditional_vc:cnn #1 {
  \BNVS_use:nc {
    \BNVS_new_conditional_vc:cNnn { #1 }
  } { #1:ncTF }
}
\cs_new:Npn \BNVS_new_conditional_vc:cNn #1 #2 #3 {
  \BNVS_new_conditional:cpnn { #1:vc } ##1 ##2 { #3 } {
    \BNVS_tl_use:Nv #2 { ##1 } { ##2 } {
      \prg_return_true:
    } {
      \prg_return_false:
    }
  }
}
\cs_new:Npn \BNVS_new_conditional_vc:cn #1 {
  \BNVS_use:nc {
    \BNVS_new_conditional_vc:cNn { #1 }
  } { #1:ncTF }
}
\cs_new:Npn \BNVS_regex_use:Nc #1 #2 {
  \BNVS_use_raw:Nc #1 { c \BNVS:c { #2 } _regex }
}
\BNVS_new_conditional:cpnn { if_extract_once:Ncn } #1 #2 #3 { T, F, TF } {
  \BNVS_use:ncn {
    \regex_extract_once:NnNTF #1 { #3 }
  } { #2 } { seq } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { match_if_once:Nn } #1 #2 { T, F, TF } {
  \BNVS_use:ncn {
    \regex_extract_once:NnNTF #1 { #2 }
  } { match } { seq } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { if_extract_once:Ncv } #1 #2 #3 { T, F, TF } {
  \BNVS_seq_use:nc {
    \BNVS_tl_use:nv {
      \regex_extract_once:NnNTF #1
    } { #3 }
  } { #2 } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { match_if_once:Nv } #1 #2 { T, F, TF } {
  \BNVS_seq_use:nc {
    \BNVS_tl_use:nv {
      \regex_extract_once:NnNTF #1
    } { #2 }
  } { match } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { match_if_once:nn } #1 #2 { T, F, TF } {
  \BNVS_seq_use:nc {
    \regex_extract_once:nnNTF { #1 } { #2 }
  } { match } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { if_regex_split:cnc } #1 #2 #3 { T, F, TF } {
  \BNVS_seq_use:nc {
    \BNVS_regex_use:Nc \regex_split:NnNTF { #1 } { #2 }
  } { #3 } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { if_regex_split:cn } #1 #2 { T, F, TF } {
  \BNVS_seq_use:nc {
    \BNVS_regex_use:Nc \regex_split:NnNTF { #1 } { #2 }
  } { split } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\cs_new:Npn \BNVS_new_conditional_vnc:cNn #1 #2 #3 {
  \BNVS_new_conditional:cpnn { #1:vnc } ##1 ##2 ##3 { #3 } {
    \BNVS_tl_use:Nv #2 { ##1 } { ##2 } { ##3 } {
      \prg_return_true:
    } {
      \prg_return_false:
    }
  }
}
\cs_new:Npn \BNVS_new_conditional_vnc:cn #1 {
  \BNVS_use:nc {
    \BNVS_new_conditional_vnc:cNn { #1 }
  } { #1:nncTF }
}
\cs_new:Npn \BNVS_new_conditional_vvnc:cNn #1 #2 #3 {
  \BNVS_new_conditional:cpnn { #1:vvnc } ##1 ##2 ##3 ##4 { #3 } {
    \BNVS_tl_use:nv {
      \BNVS_tl_use:Nv #2 { ##1 }
    } { ##2 } { ##3 } { ##4 } {
      \prg_return_true:
    } {
      \prg_return_false:
    }
  }
}
\cs_new:Npn \BNVS_new_conditional_vvnc:cn #1 {
  \BNVS_use:nc {
    \BNVS_new_conditional_vvnc:cNn { #1 }
  } { #1:nnncTF }
}
\cs_new:Npn \BNVS_new_conditional_vvc:cNn #1 #2 #3 {
  \BNVS_new_conditional:cpnn { #1:vvc } ##1 ##2 ##3 { #3 } {
    \BNVS_tl_use:nv {
      \BNVS_tl_use:Nv #2 { ##1 }
    } { ##2 } { ##3 } {
      \prg_return_true:
    } {
      \prg_return_false:
    }
  }
}
\cs_new:Npn \BNVS_new_conditional_vvvc:cNn #1 #2 #3 {
  \BNVS_new_conditional:cpnn { #1:vvvc } ##1 ##2 ##3 ##4 { #3 } {
    \BNVS_tl_use:nv {
      \BNVS_tl_use:nv {
        \BNVS_tl_use:Nv #2 { ##1 }
      } { ##2 }
    } { ##3 } { ##4 } {
      \prg_return_true:
    } {
      \prg_return_false:
    }
  }
}
\cs_new:Npn \BNVS_new_conditional_vvc:cn #1 {
  \BNVS_use:nc {
    \BNVS_new_conditional_vvc:cNn { #1 }
  } { #1:nncTF }
}
\cs_new:Npn \BNVS_new_conditional_vvvc:cn #1 {
  \BNVS_use:nc {
    \BNVS_new_conditional_vvvc:cNn { #1 }
  } { #1:nnncTF }
}
\cs_new:Npn \BNVS_new_tl_c:c {
  \BNVS_new_c:nc { tl }
}
\BNVS_new_tl_c:c { clear }
\BNVS_new_tl_c:c { use }
\BNVS_new_tl_c:c { count }

\BNVS_new:cpn { tl_set_eq:cc } #1 #2 {
  \BNVS_use:ncncn { \tl_set_eq:NN } { #1 } { tl } { #2 } { tl }
}
\cs_new:Npn \BNVS_new_tl_cn:c {
  \BNVS_new_cn:nc { tl }
}
\cs_new:Npn \BNVS_new_tl_cv:c #1 {
  \BNVS_new_cv:ncn { tl } { #1 } { tl }
}
\BNVS_new_tl_cn:c { set }
\BNVS_new_tl_cv:c { set }
\BNVS_new:cpn { tl_set:cx } {
  \exp_args:Nnx \__bnvs_tl_set:cn
}
\BNVS_new_tl_cn:c { put_right }
\BNVS_new_tl_cv:c { put_right }
\BNVS_new:cpn { tl_put_right:cx } {
  \exp_args:Nnnx \BNVS_use:c { tl_put_right:cn }
}
\BNVS_new_tl_cn:c { put_left }
\BNVS_new_tl_cv:c { put_left }
\BNVS_new:cpn { tl_put_left:cx } {
  \exp_args:Nnnx \BNVS_use:c { tl_put_left:cn }
}
\cs_new:Npn \BNVS_new_conditional_c:ncNn #1 #2 #3 #4 {
  \BNVS_new_conditional:cpnn { #2 } ##1 { #4 } {
    \BNVS_use:Ncn #3 { ##1 } { #1 } {
      \prg_return_true:
    } {
      \prg_return_false:
    }
  }
}
\cs_new:Npn \BNVS_new_conditional_c:ncn #1 #2 {
  \BNVS_use_raw:nc {
    \BNVS_new_conditional_c:ncNn { #1 } { #1_#2:c }
  } { #1_#2:NTF }
}
\BNVS_new_conditional_c:ncn { tl } { if_empty } { p, T, F, TF }
\BNVS_new_conditional:cpnn { tl_if_blank:v } #1 { T, F, TF } {
  \BNVS_tl_use:Nv \tl_if_blank:nTF { #1 } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\cs_new:Npn \BNVS_new_conditional_cn:ncNn #1 #2 #3 #4 {
  \BNVS_new_conditional:cpnn { #2:cn } ##1 ##2 { #4 } {
    \BNVS_use:Ncn #3 { ##1 } { #1 } { ##2 } {
      \prg_return_true:
    } {
      \prg_return_false:
    }
  }
}
\cs_new:Npn \BNVS_new_conditional_cn:ncn #1 #2 {
  \BNVS_use_raw:nc {
    \BNVS_new_conditional_cn:ncNn { #1 } { #1_#2 }
  } { #1_#2:NnTF }
}
\BNVS_new_conditional_cn:ncn { tl } { if_eq } { T, F, TF }
\cs_new:Npn \BNVS_new_conditional_cv:ncNn #1 #2 #3 #4 {
  \BNVS_new_conditional:cpnn { #2:cv } ##1 ##2 { #4 } {
    \BNVS_use:nvn {
      \BNVS_use:Ncn #3 { ##1 } { #1 }
    } { ##2 } { #1 } {
      \prg_return_true:
    } {
      \prg_return_false:
    }
  }
}
\cs_new:Npn \BNVS_new_conditional_cv:ncn #1 #2 {
  \BNVS_use_raw:nc {
    \BNVS_new_conditional_cv:ncNn { #1 } { #1_#2 }
  } { #1_#2:NnTF }
}
\BNVS_new_conditional_cv:ncn { tl } { if_eq } { T, F, TF }
\cs_new:Npn \BNVS_new_conditional_vn:ncNn #1 #2 #3 #4 {
  \BNVS_new_conditional:cpnn { #2:vn } ##1 ##2 { #4 } {
    \BNVS_use:Nvn #3 { ##1 } { #1 } { ##2 } {
      \prg_return_true:
    } {
      \prg_return_false:
    }
  }
}
\cs_new:Npn \BNVS_new_conditional_vn:ncn #1 #2 {
  \BNVS_use_raw:nc {
    \BNVS_new_conditional_vn:ncNn { #1 } { #1_#2 }
  } { #1_#2:nnTF }
}
\BNVS_new_conditional_vn:ncn { str } { if_eq } { T, F, TF }
\cs_new:Npn \BNVS_new_conditional_vv:ncNn #1 #2 #3 #4 {
  \BNVS_new_conditional:cpnn { #2:vv } ##1 ##2 { #4 } {
    \BNVS_use:nvn {
      \BNVS_use:Nvn #3 { ##1 } { #1 }
    }  { ##2 } { #1 } {
      \prg_return_true:
    } {
      \prg_return_false:
    }
  }
}
\cs_new:Npn \BNVS_new_conditional_vv:ncn #1 #2 {
  \BNVS_use_raw:nc {
    \BNVS_new_conditional_vv:ncNn { #1 } { #1_#2 }
  } { #1_#2:nnTF }
}
\BNVS_new_conditional_vv:ncn { str } { if_eq } { T, F, TF }
\BNVS_new_c:nc   { seq } { count }
\BNVS_new_c:nc   { seq } { clear }
\BNVS_new_cn:nc  { seq } { use }
\BNVS_new_cn:nc  { seq } { item }
\BNVS_new_cn:nc  { seq } { remove_all }
\BNVS_new_cn:nc  { seq } { map_inline }
\BNVS_new_cc:nc  { seq } { set_eq }
\BNVS_new_cv:ncn { seq } { put_left  } { tl }
\BNVS_new_cn:ncn { seq } { put_right } { tl }
\BNVS_new_cv:ncn { seq } { put_right } { tl }
\BNVS_new_cnn:nc { seq } { set_split }
\BNVS_new_cnv:nc { seq } { set_split }
\BNVS_new_cnx:nc { seq } { set_split }
\BNVS_new_cc:ncn { seq } { pop_left  } { tl }
\BNVS_new_cc:ncn { seq } { pop_right } { tl }
\cs_new:Npn \BNVS_new_conditional_cc:ncnn #1 #2 #3 #4 {
  \BNVS_new_conditional:cpnn { #1_#2:cc } ##1 ##2 { #4 } {
    \BNVS_use:ncncn {
      \BNVS_use_raw:c { #1_#2:NNTF }
    } { ##1 } { #1 } { ##2 } { #3 } {
      \prg_return_true:
    } {
      \prg_return_false:
    }
  }
}
\BNVS_new_conditional_c:ncn { seq } { if_empty } { T, F, TF }
\BNVS_new_conditional_cc:ncnn
  { seq } { get_right } { tl } { T, F, TF }
\BNVS_new_conditional_cc:ncnn
  { seq } { pop_left  } { tl } { T, F, TF }
\BNVS_new_conditional_cc:ncnn
  { seq } { pop_right } { tl } { T, F, TF }
\BNVS_new_c:nc   { int } { new  }
\BNVS_new_c:nc   { int } { use  }
\BNVS_new_c:nc   { int } { zero }
\BNVS_new_c:nc   { int } { incr }
\BNVS_new_c:nc   { int } { decr }
\BNVS_new_cn:nc  { int } { set  }
\BNVS_new_cv:ncn { int } { set  } { int }
\BNVS_new_conditional:cpnn { if_prop_get:Nnc } #1 #2 #3 { T, F, TF } {
  \BNVS_use:ncn {
    \prop_get:NnNTF #1 { #2 }
  } { #3 } { tl } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\cs_set_eq:NN \BeanovesDebugOn \BNVS_DEBUG_on:
\cs_set_eq:NN \BeanovesDebugOff \BNVS_DEBUG_off:
\cs_generate_variant:Nn \BNVS_DEBUG_log:n { x, V }
\cs_new:Npn \BNVS_DEBUG_b:nn #1 #2 {
  \BNVS_DEBUG_log:x { #1~#2 }
}
\str_new:N \l__BNVS_DEBUG_group_str
\cs_new:Npn \BNVS_DEBUG_end_set:n #1 {
  \cs_set:Npn \BNVS_end: {
    \int_compare:nNnTF { #1 } > { \int_use:N \l__BNVS_DEBUG_group_int } {
      \BNVS_error:x {Internal~error:~too~many~group~end.}
    } {
      \int_compare:nNnT { #1 } < { \int_use:N \l__BNVS_DEBUG_group_int } {
        \BNVS_error:x {Internal~error:~missing~group~end.}
      }
    }
    \group_end:
    \str_if_empty:NTF \l__BNVS_DEBUG_group_str {
      \BNVS_DEBUG_log:x { Top~level }
    } {
      \BNVS_DEBUG_log:x
        { Back~to~\l__BNVS_DEBUG_group_str / \int_use:N \l__BNVS_DEBUG_group_int }
    }
  }
}
\cs_new:Npn \BNVS_begin: {
  \group_begin:
  \str_clear:N \l__BNVS_DEBUG_group_str
  \int_incr:N \l__BNVS_DEBUG_group_int
  \exp_args:Nx \BNVS_DEBUG_end_set:n
    { \int_use:N \l__BNVS_DEBUG_group_int }
}
\cs_new:Npn \BNVS_DEBUG_end_set:nn #1 #2 {
  \str_set:Nn \l__BNVS_DEBUG_group_str { #2 }
  \cs_set:Npn \BNVS_end: {
    \str_if_eq:VnF \l__BNVS_DEBUG_group_str { #2 } {
      \BNVS_error:x
        { Wrong~grouping~\l__BNVS_DEBUG_group_str!=#2 }
    }
    \int_compare:nNnTF { #1 } > { \int_use:N \l__BNVS_DEBUG_group_int } {
      \BNVS_error:n {Internal~error:~too~many~group~end.}
    } {
      \int_compare:nNnT { #1 } < { \int_use:N \l__BNVS_DEBUG_group_int } {
        \BNVS_error:n {Internal~error:~missing~group~end.}
      }
    }
    \BNVS_DEBUG_log:x {END~#2/\int_use:N \l__BNVS_DEBUG_group_int}
    \group_end:
    \str_if_empty:NTF \l__BNVS_DEBUG_group_str {
      \BNVS_DEBUG_log:x { Top~level }
    } {
      \BNVS_DEBUG_log:x
        { Back~to~\l__BNVS_DEBUG_group_str / \int_use:N \l__BNVS_DEBUG_group_int }
    }
  }
}
\cs_set:Npn \BNVS_DEBUG_begin:n #1 {
  \BNVS_begin:
  \BNVS_DEBUG_log:x {BEGIN~#1/\int_use:N \l__BNVS_DEBUG_group_int}
  \str_set:Nx \l__BNVS_DEBUG_group_str { #1 }
  \exp_args:Nxx
  \BNVS_DEBUG_end_set:nn { \int_use:N \l__BNVS_DEBUG_group_int } { #1 }
}
\cs_set_eq:NN \BNVS_end: \group_end:
\bool_new:N \l__bnvs_TEST_ignore_bool
\bool_set_false:N \l__bnvs_TEST_ignore_bool
\cs_new:Npn \BNVS_DEBUG_log:nn #1 {
  \exp_args:Nx
  \BNVS_DEBUG_b:nn
  { ▄▄ \prg_replicate:nn {\l__BNVS_DEBUG_group_int + 1} {#1} }
}
\cs_generate_variant:Nn \BNVS_DEBUG_log:nn { nx, nV }
\ProvideDocumentEnvironment {BNVS/failure} {} {} {}
\bool_new:N \l__bnvs_TEST_bool
\tl_new:N \g__bnvs_TEST_tl
\tl_new:N \l__bnvs_TEST_banner_tl
\tl_new:N \l__bnvs_TEST_done_tl
\tl_clear:N \l__bnvs_TEST_done_tl
\tl_new:N \l__bnvs_TEST_tl
\tl_new:N \l__bnvs_TEST_A_tl
\tl_new:N \l__bnvs_TEST_B_tl
\tl_new:N \l__bnvs_TEST_C_tl
\str_new:N \l__bnvs_TEST_str
\str_new:N \l__bnvs_TEST_A_str
\str_new:N \l__bnvs_TEST_B_str
\seq_new:N \l__bnvs_TEST_seq
\seq_new:N \l__bnvs_TEST_A_seq
\seq_new:N \l__bnvs_TEST_B_seq
\int_new:N \l__bnvs_TEST_int
\int_new:N \l__bnvs_TEST_group_int
\prop_new:N \l__bnvs_TEST_prop
\prop_new:N \g__bnvs_TEST_prop
\regex_const:Nn \c__bnvs_TEST_comma_regex { , }
\NewDocumentEnvironment{BNVS/test} {} {
  \color{red}\bfseries\ExplSyntaxOn
  \debug_on:n { check-declarations }
  \__bnvs_gclear_all:
  \int_gset:Nn \g__bnvs_call_int { 128 }
  \int_set_eq:NN \l__bnvs_TEST_group_int \l__BNVS_DEBUG_group_int
  \__bnvs_provide_off:
  \BNVS_DEBUG_log_set:cnnc { if_resolve_query:ncTF } { QUERY } { ? } { ans }
  \BNVS_TEST_BEGIN:n
} {
  \assert_equal:xxn {
    \int_use:N \l__BNVS_DEBUG_group_int
  } {
    \int_use:N \l__bnvs_TEST_group_int
  } { Bad~group~nesting }
  \tl_use:N \l__bnvs_TEST_done_tl
  \__bnvs_gclear:
  \ExplSyntaxOff\ignorespacesafterend
}
\keys_define:nn { BNVS/test } {
  banner  .code:n = \tl_set:Nn \l__bnvs_TEST_banner_tl { #1 },
  :N      .code:n = \tl_set:No \l__bnvs_TEST_banner_tl {
    \token_to_str:N #1
  },
  :Nn     .code:n = \exp_args:NNo \tl_set:No \l__bnvs_TEST_banner_tl {
    \exp_last_unbraced:No \token_to_str:N { \use_i:nn #1 }
    \use_ii:nn #1
  },
  :c      .code:n = \tl_set:No \l__bnvs_TEST_banner_tl {
    \token_to_str:c { #1 }
  },
  :cn     .code:n = \tl_set:No \l__bnvs_TEST_banner_tl {
    \token_to_str:c { \use_i:nn #1 } \use_ii:nn #1
  },
  bnvs:c  .code:n = \tl_set:No \l__bnvs_TEST_banner_tl {
    \token_to_str:c { \BNVS:c { #1 } }
  },
  bnvs:cn .code:n = \tl_set:No \l__bnvs_TEST_banner_tl {
    \token_to_str:c { \BNVS:c { \use_i:nn #1 } } \use_ii:nn #1
  },
  debug  .code:n = \BNVS_DEBUG_on:,
  reset  .code:n = \reset:n { #1 },
  ignore .code:n = \bool_set:Nn \l__bnvs_TEST_ignore_bool { \BNVS_use_raw:c { c_#1_bool } },
  ignore .default:n = true,
  noigre .code:n = \bool_set:Nn \l__bnvs_TEST_ignore_bool { !(\BNVS_use_raw:c { c_#1_bool }) },
  noigre .default:n = false,
  noigre .code:n = {}, % comment this line to ignore no tests
}
\int_new:N \l__bnvs_TEST_A_int
\int_new:N \l__bnvs_TEST_B_int
\cs_new:Npn \BNVS_TEST_BEGIN:n #1 {
  \cs_set:Npn \reset:n ##1 {
    \BNVS_begin:
    \BNVS_DEBUG_off:
    \tl_if_empty:nF { ##1 } {
      \__bnvs_gclear:
      \__bnvs_n_gclear:
      \__bnvs_v_gclear:
      \__bnvs_cache_gclear:
    }
    \Beanoves { FIRST = 220+2, LENGTH = 440+5, LAST = 660+6 }
    \BNVS_end:
    \__bnvs_provide_off:
  }
  \cs_set:Npn \reset_X: {
    \reset:n { YES }
    \BNVS_begin:
    \BNVS_DEBUG_off:
    \Beanoves {
      X1  = FIRST,
      X2  = LAST-LENGTH+1,
      A1  = FIRST:,
      A2  = LAST-LENGTH+1:,
      AA1 = FIRST::,
      AA2 = LAST-LENGTH+1::,
      Z1  = :LAST,
      Z2  = :FIRST+LENGTH-1,
      AL11 = FIRST::LENGTH,
      AL12 = FIRST::LAST-FIRST+1,
      AL21 = LAST-LENGTH+1::LENGTH,
      AL22 = LAST-LENGTH+1::LAST-FIRST+1,
      AZ11 = FIRST:LAST,
      AZ12 = FIRST:FIRST+LENGTH-1,
      AZ21 = LAST-LENGTH+1:LAST,
      AZ22 = LAST-LENGTH+1:FIRST+LENGTH-1,
      LZ11 = ::LENGTH:LAST,
      LZ12 = ::LENGTH:FIRST+LENGTH-1,
      LZ21 = ::LAST-FIRST+1:LAST,
      LZ22 = ::LAST-FIRST+1:FIRST+LENGTH-1,
      ZL11 = :LAST::LENGTH,
      ZL12 = :LAST::LAST-FIRST+1,
      ZL21 = :FIRST+LENGTH-1::LENGTH,
      ZL22 = :FIRST+LENGTH-1::LAST-FIRST+1,
    }
    \BNVS_end:
  }
  \tl_if_empty:nF { #1 } { \keys_set_known:nn {BNVS/test} {#1} }
  \bool_if:NTF \l__bnvs_TEST_ignore_bool {
    \tl_clear:N \l__bnvs_TEST_done_tl
    \RenewDocumentEnvironment{BNVS/test}{+b}{
      \BNVS_set:cpn { end_test: } {
        \BNVS_set:cpn { end_test: } { }
        \end{BNVS/test}
      }
    } {
      \__bnvs_end_test:
    }
    \begin{BNVS/test}
  } {
    \cs_set:Npn \banner:n ##1 {
      \__bnvs_call_greset:
      \BNVS_log_a:xn { ▶︎▶︎▶︎▶︎▶︎~TEST~##1~/~line:~\the\inputlineno} {}
    }
    \RenewDocumentEnvironment{BNVS/failure}{}
      {\begin{list}{\llap{\emoji{no-entry}\hspace{1em}}}{%
         \setlength{\itemindent}{0pt}%
         \setlength{\leftmargin}{0pt}%
         \setlength{\labelwidth}{0pt}%
         \addtolength{\topsep}{-0.5\parskip}%
         \listparindent \parindent
         \setlength{\parsep}{\parskip}}}
      {\end{list}}
    \cs_set_eq:NN \test_extract:nnnn \BNVS_TEST_extract:nnnn
    \cs_set_eq:NN \test_extract:Nnnn \BNVS_TEST_extract:Nnnn
    \cs_set_eq:NN \test_split:Nnnn \BNVS_TEST_split:Nnnn
    \cs_set_eq:NN \assert_equal:nnn \BNVS_ASSERT_equal:nnn
    \cs_set_eq:NN \assert_equal:xnn \BNVS_ASSERT_equal:xnn
    \cs_set_eq:NN \assert_equal:xxn \BNVS_ASSERT_equal:xxn
    \cs_set_eq:NN \assert_size_equal:nnn \BNVS_ASSERT_size_equal:nnn
    \cs_set_eq:NN \assert_size_not_equal:nnn \BNVS_ASSERT_size_not_equal:nnn
    \cs_set_eq:NN \assert_equal_tl:vnn \BNVS_ASSERT_equal_tl:vnn
    \cs_set_eq:NN \test_fail:n \BNVS_TEST_fail:n
    \cs_set_eq:NN \test_fail:x \BNVS_TEST_fail:x
    \cs_set:Npn \assert_equal_ans:nn {
      \assert_equal_tl:vnn { ans }
    }
    \cs_set:Npn \preflight:n ##1 {
      \banner:n { ##1 }
      \BNVS_begin:
      \int_set_eq:NN \l__bnvs_TEST_group_int \l__BNVS_DEBUG_group_int
      \__bnvs_tl_clear:c { ans }
    }
    \cs_set:Npn \preflight:nn ##1 ##2 {
      \tl_if_empty:nTF { ##1 } {
        \banner:n { ##2 }
      } {
        \regex_match:nnTF { ^X } { ##1 } {
          \banner:n { ##2~/~##1 }
          \group_begin:
          \BNVS_DEBUG_off:
          \Beanoves { ##1 }
        } {
          \banner:n { ##2~/~X=##1 }
          \group_begin:
          \BNVS_DEBUG_off:
          \Beanoves { X = ##1 }
        }
        \group_end:
        \BNVS_DEBUG_log_gprop:n {}
      }
      \BNVS_begin:
      \int_set_eq:NN \l__bnvs_TEST_group_int \l__BNVS_DEBUG_group_int
      \__bnvs_tl_clear:c { ans }
    }
    \cs_set:Npn \preflight:nnn ##1 ##2 ##3 {
      \tl_if_empty:nTF { ##1 } {
        \banner:n { ##2~/~##3~/ }
      } {
        \regex_match:nnTF { ^X } { ##1 } {
          \banner:n { ##2~/~##1->##2~/ }
          \group_begin:
          \BNVS_DEBUG_off:
          \Beanoves { ##1 }
        } {
          \banner:n { ##2~/~X=##1->##2~/ }
          \group_begin:
          \BNVS_DEBUG_off:
          \Beanoves { X = ##1 }
        }
        \group_end:
        \BNVS_DEBUG_log_gprop:n {}
      }
      \BNVS_begin:
      \int_set_eq:NN \l__bnvs_TEST_group_int \l__BNVS_DEBUG_group_int
      \__bnvs_tl_clear:c { ans }
    }
    \cs_set:Npn \postflight: {
      \assert_equal:xxn {
        \int_use:N \l__BNVS_DEBUG_group_int
      } {
        \int_use:N \l__bnvs_TEST_group_int
      } { Bad~group~nesting }
      \BNVS_end:
    }
    \cs_set:Npn \flight:nT ##1 ##2 {
      \bool_if:NF \l__bnvs_TEST_ignore_bool {
        \preflight:n { ##1 }
        ##2
        \postflight:
      }
    }
    \cs_set:Npn \flight:nnT ##1 ##2 ##3 {
      \bool_if:NF \l__bnvs_TEST_ignore_bool {
        \preflight:nn { ##1 } { ##2 }
        ##3
        \postflight:
      }
    }
    \cs_set:Npn \flight:nnnT ##1 ##2 ##3 ##4 {
      \bool_if:NF \l__bnvs_TEST_ignore_bool {
        \preflight:nnn { ##1 } { ##2 } { ##3 }
        ##4
        \postflight:
      }
    }
    \cs_set:Npn \Test_resolve_x_path:nnnnnn ##1 ##2 ##3 ##4 ##5 ##6 {
      \flight:nnT { ##1 } { ##6 } {
        \tl_set:Nx \l__bnvs_id_tl { ?! }
        \tl_set:Nx \l__bnvs_FQ_name_tl { \l__bnvs_id_tl ##2 }
        \seq_set_split:Nnn \l__bnvs_path_seq {.} { ##3 }
        \seq_remove_all:Nn \l__bnvs_path_seq { }
        \__bnvs_if_resolve_Fip_x_path:TF {
          \BNVS_ASSERT_equal_tl:vnn {id } { ?! } { ##6-id }
          \BNVS_ASSERT_equal_tl:vnn { id } { ?! } { ##6-id }
          \assert_equal_tl:vnn { id } { ?! } { ##6-id }
          \exp_args:NNV
          \regex_match:NnTF \c__bnvs_A_FQ_name_Z_regex \l__bnvs_FQ_name_tl {
            \tl_if_in:VnTF \l__bnvs_FQ_name_tl { ! } {
              \assert_equal_tl:vnn { FQ_name } { ?!##4 } { ##6-?!name }
            } {
              \assert_equal_tl:vnn { FQ_name } {   ##4 } { ##6-name }
            }
          } {
            \assert_equal_tl:vnn { FQ_name } { ##4 } { ##6-target }
          }
          \assert_equal:xnn { \__bnvs_seq_use:cn { path } . } { ##5 } { ##6-path }
        } {
          \test_fail:n { ##6-CALL }
        }
        \__bnvs_gclear:
      }
    }
    \cs_set:Npn \Test_if_resolve_path_n:nnnnnn ##1 ##2 ##3 ##4 ##5 ##6 {
      \__bnvs_gclear_all:
      \flight:nnT { ##1 } { ##6 } {
        \tl_set:Nx \l__bnvs_id_tl { ?! }
        \tl_set:Nx \l__bnvs_FQ_name_tl { \l__bnvs_id_tl ##2 }
        \seq_set_split:Nnn \l__bnvs_path_seq {.} { ##3 }
        \seq_remove_all:Nn \l__bnvs_path_seq { }
        \__bnvs_if_resolve_Fip_n_path:TF {
          \assert_equal_tl:vnn { id } { ?! } { ##6-id }
          \exp_args:NNV
          \regex_match:NnTF \c__bnvs_A_FQ_name_Z_regex \l__bnvs_FQ_name_tl {
            \tl_if_in:VnTF \l__bnvs_FQ_name_tl { ! } {
              \assert_equal_tl:vnn { FQ_name } { ?!##4 } { ##6-?!name }
            } {
              \assert_equal_tl:vnn { FQ_name } {   ##4 } { ##6-name }
            }
          } {
            \assert_equal_tl:vnn { FQ_name } { ##4 } { ##6-target }
          }
          \assert_equal:xnn { \__bnvs_seq_use:cn { path } . } { ##5 } { ##6-path }
        } {
          \test_fail:n { ##6-CALL }
        }
      }
    }
    \cs_set:Npn \Test_generic_ncTF:Nnnnn ##1 ##2 ##3 ##4 ##5 {
      \flight:nnT { ##2 } { ##5 } {
        \__bnvs_int_set:cn { TEST_A } { \int_use:N \l__BNVS_DEBUG_group_int }
        \exp_args:Nx
        ##1 { \tl_if_empty:nTF { ##3 } { ?!X } { ##3 } } { ans } {
          \assert_equal_ans:nn { ##4 } { ##5-TRUE }
        } {
          \test_fail:x { ##5-FALSE(cs:~\token_to_str:N ##1) }
        }
        \int_compare:nNnF { \l__bnvs_TEST_A_int } = { \l__BNVS_DEBUG_group_int } {
          \test_fail:n { ##5~group:~\token_to_str:N~##1 }
        }
      }
    }
    \cs_generate_variant:Nn \Test_generic_ncTF:Nnnnn { c }
    \cs_set:Npn \Test_what_action_ncTF:nnnnnn ##1 ##2 ##3 ##4 ##5 ##6 {
      \cs_if_exist:cTF { __bnvs_##1_##2:ncTF } {
        \Test_generic_ncTF:cnnnn { __bnvs_##1_##2:ncTF } { ##3 } { ##4 } { ##5 } { ##6 }
      } {
        \test_fail:x { ##6-NO~\token_to_str:N\__bnvs_##1_##2:ncTF }
      }
    }
    \cs_set:Npn \Test_generic_X_ncTF:Nnnn ##1 ##2 {
      \Test_generic_ncTF:Nnnnn ##1 { ##2 } {}
    }
    \cs_generate_variant:Nn \Test_generic_X_ncTF:Nnnn { c }
    \cs_set:Npn \Test_what_action_X_ncTF:nnnnn ##1 ##2 ##3 ##4 ##5 {
      \cs_if_exist:cTF { __bnvs_##1_##2:ncTF } {
        \BNVS_use:Nc
        \Test_generic_X_ncTF:Nnnn { ##1_##2:ncTF } { ##3 } { ##4 } { ##5 }
      } {
        \test_fail:x { ##5-NO~\token_to_str:N\__bnvs_##1_##2:ncTF }
      }
    }
    \cs_set:Npn \Test_generic_nncTF:Nnnnnn ##1 ##2 ##3 ##4 ##5 ##6 {
      \flight:nnT { ##2 } { ##6 } {
        \exp_args:Nx
        ##1 { \tl_if_empty:nTF { ##3 } { ?!X } { ##3 } } { ##4 } { ans } {
          \assert_equal_ans:nn { ##5 } { ##6-TRUE }
        } {
          \test_fail:n { ##6-FALSE(\token_to_str:N ##1) }
        }
      }
    }
    \cs_generate_variant:Nn \Test_generic_nncTF:Nnnnnn { c }
    \cs_set:Npn \Test_what_action_nncTF:nnnnnnn ##1 ##2 ##3 ##4 ##5 ##6 ##7 {
      \cs_if_exist:cTF {__bnvs_##1_##2:nncTF} {
        \Test_generic_nncTF:cnnnnn { __bnvs_##1_##2:nncTF } { ##3 } { ##4 } { ##5 } { ##6 } { ##7 }
      } {
        \test_fail:x { ##7-NO~\token_to_str:N\__bnvs_##1_##2:nncTF }
      }
    }
    \cs_set:Npn \Test_generic_X_nncTF:Nnnnnn ##1 ##2 ##3 ##4 ##5 {
      \flight:nnT { ##2 } { ##5 } {
        ##1 { ?!X } { ##3 } { ans } {
          \assert_equal_ans:nn { ##4 } { ##5-X-TRUE }
        } {
          \test_fail:n { ##5-X-FALSE(\token_to_str:N ##1) }
        }
      }
    }
    \cs_generate_variant:Nn \Test_generic_X_nncTF:Nnnnnn { c }
    \cs_set:Npn \Test_what_action_X_nncTF:nnnnnn ##1 ##2 ##3 ##4 ##5 ##6 {
      \cs_if_exist:cTF { __bnvs_##1_##2:nnNTF } {
        \Test_generic_X_nncTF:cnnnnn { __bnvs_##1_##2:nncTF } { ##3 } { ##4 } { ##5 } { ##6 }
      } {
        \test_fail:x { ##6-NO~\token_to_str:N\__bnvs_##1_##2:nnNTF }
      }
    }
    \cs_set:Npn \Test_generic_check_value_X:Nnnnn ##1 ##2 ##3 ##4 ##5 {
      \flight:nnnT { ##2 } { ##5 } { ##2~/~##3 } {
        \group_begin:
        \__bnvs_if_resolve_V:ncTF { ?!X } { a } {
          \group_end:
          ##1 { ?!X } { ##3 } { ans } {
            \assert_equal_ans:nn { ##4 } { ##5-b }
          } {
            \test_fail:x { ##5-c^^JUnexpected~F~in~\token_to_str:N ##1 }
          }
        } {
          \group_end:
          \test_fail:n { ##5-d(if_resolve_V:ncTF) }
        }
      }
    }
    \cs_generate_variant:Nn \Test_generic_check_value_X:Nnnnn { c }
    \cs_set:Npn \Test_what_action_check_value_X_ncTF:nnnnnn ##1 ##2 ##3 ##4 ##5 ##6 {
      \cs_if_exist:cTF {__bnvs_##1_##2:ncTF} {
        \Test_generic_check_value_X:cnnnn { __bnvs_##1_##2:ncTF } { ##3 } { ##4 } { ##5 } { ##6 }
      } {
        \test_fail:x { ##6-NO~\token_to_str:N\__bnvs_##1_##2:ncTF }
      }
    }
    \cs_set:Npn \Test_generic_check_value_nncTF:Nnnnnn ##1 ##2 ##3 ##4 ##5 ##6 {
      \flight:nnnT { ##2 } { ##6 } { ##2~/~##4 } {
        \group_begin:
        \exp_args:Nx
        \__bnvs_if_resolve_V:ncTF { \tl_if_empty:nTF { ##3 } { ?!X } { ##3 } } { a } {
          \group_end:
          \exp_args:Nx
          ##1 { \tl_if_empty:nTF { ##3 } { ?!X } { ##3 } } { ##4 } { ans } {
            \assert_equal_ans:nn { ##5 } { ##6-b }
          } {
            \test_fail:n { ##6-c^^JUnexpected~F~in~\token_to_str:N ##1 }
          }
        } {
          \group_end:
          \test_fail:n { ##6-d(if_resolve_V:ncTF-2) }
        }
      }
    }
    \cs_generate_variant:Nn \Test_generic_check_value_nncTF:Nnnnnn { c }
    \cs_set:Npn \Test_what_action_check_value_nncTF:nnnnnnn ##1 ##2 ##3 ##4 ##5 ##6 ##7 {
      \cs_if_exist:cTF { __bnvs_##1_##2:nncTF } {
        \Test_generic_check_value_nncTF:cnnnnn { __bnvs_##1_##2:nncTF } { ##3 } { ##4 } { ##5 } { ##6 } { ##7 }
      } {
        \test_fail:x { ##7-NO~\token_to_str:N\__bnvs_##1_##2:nncTF }
      }
    }
    \cs_set:Npn \Test_what_if_resolve_X_ncTF:nnnn ##1 {
      \Test_what_action_X_ncTF:nnnnn { if_resolve } { ##1 }
    }
    \cs_set:Npn \Test_what_if_append_X_ncTF:nnnn ##1 {
      \Test_what_action_X_ncTF:nnnnn { if_append } { ##1 }
    }
    \cs_set:Npn \Test_what_if_assign_X_ncTF:nnnn ##1 {
      \Test_what_action_X_ncTF:nnnnn { if_assign } { ##1 }
    }
    \cs_set:Npn \Test_what_if_resolve_ncTF:nnnnn ##1 {
      \Test_what_action_ncTF:nnnnnn { if_resolve } { ##1 }
    }
    \cs_set:Npn \Test_what_if_append_ncTF:nnnnn ##1 {
      \Test_what_action_ncTF:nnnnnn { if_append } { ##1 }
    }
    \cs_set:Npn \Test_if_resolve_index_X:nnnn {
      \Test_what_action_X_nncTF:nnnnnn { if_resolve } { index }
    }
    \cs_set:Npn \Test_if_append_index_X:nnnn {
      \Test_what_action_X_nncTF:nnnnnn { if_append } { index }
    }
    \cs_set:Npn \Test_if_resolve_index:nnnnn {
      \Test_what_action_nncTF:nnnnnnn { if_resolve } { index }
    }
    \cs_set:Npn \Test_if_append_index:nnnnn {
      \Test_what_action_nncTF:nnnnnnn { if_append } { index }
    }
    \cs_set:Npn \Test_if_resolve_range:nnn {
      \Test_what_action_X_ncTF:nnnnn { if_resolve } { range }
    }
    \cs_set:Npn \Test_if_append_range:nnn {
      \Test_what_action_X_ncTF:nnnnn { if_append } { range }
    }
    \cs_set:Npn \Test_n_if_get:nnnn {
      \Test_generic_ncTF:Nnnnn \__bnvs_n_if_get:ncTF
    }
    \cs_set:Npn \Test_n_if_get_X:nnn {
      \Test_generic_X_ncTF:Nnnn \__bnvs_n_if_get:ncTF
    }
    \cs_set:Npn \Test_if_resolve_n:nnnn {
      \Test_what_action_ncTF:nnnnnn { if_resolve } { n }
    }
    \cs_set:Npn \Test_if_append_n:nnnn {
      \Test_what_action_ncTF:nnnnnn { if_append } { n }
    }
    \cs_set:Npn \Test_resolve_n_X:nnn {
      \Test_what_action_X_ncTF:nnnnn { if_resolve } { n }
    }
    \cs_set:Npn \Test_if_append_n_X:nnn {
      \Test_what_action_X_ncTF:nnnnn { if_append } { n }
    }
    \cs_set:Npn \Test_if_resolve_n_index_X:nnn {
      \Test_what_action_X_ncTF:nnnnn { if_resolve } { n_index }
    }
    \cs_set:Npn \Test_if_append_n_index_X:nnn {
      \Test_what_action_X_ncTF:nnnnn  { if_append }{ n_index }
    }
    \cs_set:Npn \Test_if_resolve_n_index:nnnn {
      \Test_what_action_ncTF:nnnnnn { if_resolve } { n_index }
    }
    \cs_set:Npn \Test_if_append_n_index:nnnn {
      \Test_what_action_ncTF:nnnnnn  { if_append }{ n_index }
    }
    \cs_set:Npn \Test_if_resolve_n_incr:nnnnn {
      \Test_what_action_nncTF:nnnnnnn { if_resolve } { n_incr }
    }
    \cs_set:Npn \Test_if_append_n_incr:nnnnn {
      \Test_what_action_nncTF:nnnnnnn { if_append } { n_incr }
    }
    \cs_set:Npn \Test_if_resolve_n_post:nnnnn {
      \Test_what_action_nncTF:nnnnnnn { if_resolve } { n_post }
    }
    \cs_set:Npn \Test_if_append_n_post:nnnnn {
      \Test_what_action_nncTF:nnnnnnn { if_append } { n_post }
    }
    \cs_set:Npn \Test_if_resolve_v_incr:nnnnn {
      \Test_what_action_check_value_nncTF:nnnnnnn { if_resolve } { v_incr }
    }
    \cs_set:Npn \Test_if_append_v_incr:nnnnn {
      \Test_what_action_check_value_nncTF:nnnnnnn { if_append } { v_incr }
    }
    \cs_set:Npn \Test_if_resolve_v_post:nnnnn {
      \Test_what_action_check_value_nncTF:nnnnnnn { if_resolve } { v_post }
    }
    \cs_set:Npn \Test_if_append_v_post:nnnnn {
      \Test_what_action_check_value_nncTF:nnnnnnn { if_append } { v_post }
    }
    \cs_set:Npn \Test_if_append:nnnn {
      \Test_what_action_ncTF:nnnnnn { if } { append }
    }
    \cs_set:Npn \Test_if_resolve:nnnn {
      \Test_what_action_ncTF:nnnnnn { if } { resolve }
    }
    \cs_set:Npn \Test_regex:nnnn ##1 {
      \bool_if:NTF \l__bnvs_TEST_ignore_bool {
        \use_none:nnn
      } {
        \tl_if_exist:cTF { c__bnvs_##1_regex } {
          \BNVS_TEST_extract:cnnn { c__bnvs_##1_regex }
        } {
          \test_fail:n { Bad~name:~##1}
          \use_none:nnn
        }
      }
    }
    \cs_set:Npn \Test_query:nnnn ##1 ##2 ##3 ##4 {
      \flight:nnnT { ##1 } { ##4 } { ##2==##3 } {
        \__bnvs_tl_clear:c { TEST_A }
        \__bnvs_if_resolve_query:ncTF { ##2 } { TEST_A } {
          \assert_equal_tl:vnn { TEST_A } { ##3 } {
            Test~\cs{__bnvs_if_resolve_query:nc}:~##4-a
          }
        } {
          \test_fail:n { ##4-CALL }
        }
      }
    }
    \cs_set:Npn \Test_resolve:nnnn ##1 ##2 ##3 ##4 {
      \flight:nnT { ##1 } { ##4 } {
        \BeanovesResolve[in=\l__bnvs_ans_tl]{ ##2 }
        \assert_equal_ans:nn { ##3 } { ##4 }
      }
    }
    \BNVS_log_a:nn {▶︎▶︎▶︎▶︎▶︎▶︎▶︎▶︎▶︎▶︎} {}
    \BNVS_log_a:xn {TEST~\l__bnvs_TEST_banner_tl\space file:~\BeanovesCurrentTestFile, line:~\the\inputlineno} {}
    \tl_set:Nn \l__bnvs_TEST_done_tl {
      \BNVS_log_a:xn { TEST~\l__bnvs_TEST_banner_tl...~DONE} {}
      \BNVS_log_a:nn {◀︎◀︎◀︎◀︎◀︎◀︎◀︎◀︎◀︎◀} {}
    }
  }
}
\cs_new:Npn \BeanovesCurrentTestFile {
  \tl_if_empty:VF \CurrentFilePath { \CurrentFilePath / }
  \CurrentFile
}
\cs_set:Npn \BNVS_TEST_extract:nnnn #1 #2 #3 #4 {
  \BNVS_begin:
  \tl_if_empty:nT { #3 } {
    \__bnvs_match_if_once:nnT { #1 } { #2 } {
      \test_fail:n { #4-a }
    }
  } {
    \__bnvs_match_if_once:nnTF { #1 } { #2 } {
      \tl_set:Nx \l__bnvs_a_tl { \__bnvs_seq_use:cn { match } , }
      \seq_set_from_clist:Nn \l__bnvs_split_seq { #3 }
      \seq_pop_left:NNT \l__bnvs_match_seq \l__bnvs_b_tl {
        \__bnvs_tl_if_empty:cTF { b } {
          \seq_put_left:Nn \l__bnvs_match_seq { #2 }
        } {
          \seq_put_left:NV \l__bnvs_match_seq \l__bnvs_b_tl
        }
      }
      \tl_set:Nx \l__bnvs_b_tl { \__bnvs_seq_use:cn { split } , }
      \assert_equal:xxn { \l__bnvs_a_tl } { \l__bnvs_b_tl } { #4-seq }
    } {
      \test_fail:n { #4-a }
    }
  }
  \BNVS_end:
}
\cs_set:Npn \BNVS_TEST_extract:Nnnn #1 #2 #3 #4 {
  \BNVS_begin:
  \regex_extract_once:NnNTF #1 { #2 } \l__bnvs_match_seq {
    \tl_set:Nx \l__bnvs_a_tl { \__bnvs_seq_use:cn { match } , }
    \seq_set_from_clist:Nn \l__bnvs_match_seq { #3 }
    \seq_pop_left:NNT \l__bnvs_match_seq \l__bnvs_b_tl {
      \__bnvs_tl_if_empty:cTF { b } {
        \seq_put_left:Nn \l__bnvs_match_seq { #2 }
      } {
        \seq_put_left:NV \l__bnvs_match_seq \l__bnvs_b_tl
      }
    }
    \tl_set:Nx \l__bnvs_b_tl { \__bnvs_seq_use:cn { match } , }
    \assert_equal:xxn { \l__bnvs_a_tl } { \l__bnvs_b_tl } { #4-seq }
  } {
    \tl_if_empty:nF { #3 } {
      \test_fail:n { #4-a }
    }
  }
  \BNVS_end:
}
\cs_generate_variant:Nn
  \BNVS_TEST_extract:Nnnn { cnnn }
\cs_set:Npn \BNVS_TEST_split:Nnnn #1 #2 #3 #4 {
  \BNVS_begin:
  \regex_split:NnNTF #1 { #2 } \l__bnvs_split_seq {
    \tl_set:Nx \l__bnvs_a_tl { \__bnvs_seq_use:cn { split } , }
    \seq_set_from_clist:Nn \l__bnvs_split_seq { #3 }
    \tl_set:Nx \l__bnvs_b_tl { \__bnvs_seq_use:cn { split } , }
    \assert_equal:xxn { \l__bnvs_a_tl } { \l__bnvs_b_tl } { #4-seq }
  } {
    \tl_if_empty:nF { #3 } {
      \test_fail:n { #4-a }
    }
  }
  \BNVS_end:
}
\cs_generate_variant:Nn \msg_error:nnnn { nnnx }
\cs_set:Npn \BNVS_ASSERT_equal:nnn #1 #2 #3 {
  \tl_if_eq:nnF { #1 } { #2 } {
    \msg_error:nnnx { beanoves } { :nn } { FAILED~`#1'!=`#2' } { \BeanovesCurrentTestFile :\the\inputlineno :#3}
    \begin{BNVS/failure}
    \item FAILURE~`#1'!=`#2'~(\BeanovesCurrentTestFile :\the\inputlineno)
    \item #3
    \end{BNVS/failure}
  }
}
\box_new:N \l__bnvs_TEST_A_box
\box_new:N \l__bnvs_TEST_B_box
\cs_set:Npn \BNVS_ASSERT_size_equal:nnn #1 #2 #3 {
  \hbox_set:Nn \l__bnvs_TEST_A_box { #1 }
  \hbox_set:Nn \l__bnvs_TEST_B_box { #2 }
  \bool_if:nTF {
         \dim_compare_p:nNn {
\box_wd:N \l__bnvs_TEST_A_box } = { \box_wd:N \l__bnvs_TEST_B_box
    } && \dim_compare_p:nNn {
\box_ht:N \l__bnvs_TEST_A_box } = { \box_ht:N \l__bnvs_TEST_B_box
    } && \dim_compare_p:nNn {
\box_dp:N \l__bnvs_TEST_A_box } = { \box_dp:N \l__bnvs_TEST_B_box
    }
  } {
    \cs_set:Nn \BNVS_ASSERT: {}
  } {
    \cs_set:Nn \BNVS_ASSERT: {
      \msg_error:nnxx { beanoves } { :nn } {
        FAILED~\tl_to_str:n { #1 } != \tl_to_str:n { #2 }
      } { \BeanovesCurrentTestFile :\the\inputlineno :#3 }
      \begin{BNVS/failure}
      \item FAILURE~\tl_to_str:n { #1 } != \tl_to_str:n { #2 }~(\BeanovesCurrentTestFile :\the\inputlineno)
      \item #3
      \end{BNVS/failure}
    }
  }
  \BNVS_ASSERT:
}
\cs_set:Npn \BNVS_ASSERT_size_not_equal:nnn #1 #2 #3 {
  \hbox_set:Nn \l__bnvs_TEST_A_box { #1 }
  \hbox_set:Nn \l__bnvs_TEST_B_box { #2 }
  \bool_if:nTF {
         \dim_compare_p:nNn {
\box_wd:N \l__bnvs_TEST_A_box } = { \box_wd:N \l__bnvs_TEST_B_box
    } && \dim_compare_p:nNn {
\box_ht:N \l__bnvs_TEST_A_box } = { \box_ht:N \l__bnvs_TEST_B_box
    } && \dim_compare_p:nNn {
\box_dp:N \l__bnvs_TEST_A_box } = { \box_dp:N \l__bnvs_TEST_B_box
    }
  } {
    \cs_set:Nn \BNVS_ASSERT: {
      \msg_error:nnxx { beanoves } { :nn } {
        FAILED~\tl_to_str:n { #1 } != \tl_to_str:n { #2 }
      } { \BeanovesCurrentTestFile :\the\inputlineno :#3 }
      \begin{BNVS/failure}
      \item FAILURE~\tl_to_str:n { #1 } != \tl_to_str:n { #2 }~(\BeanovesCurrentTestFile :\the\inputlineno)
      \item #3
      \end{BNVS/failure}
    }
  } {
    \cs_set:Nn \BNVS_ASSERT: {}
  }
  \BNVS_ASSERT:
}
\cs_set:Npn \BNVS_TEST_fail:n #1 {
  \msg_error:nnnx { beanoves } { :nn } { TEST~FAILED } { \BeanovesCurrentTestFile :\the\inputlineno :#1~(\int_use:N \g__bnvs_call_int)}
  \begin{BNVS/failure}
  \item FAILURE~unexpected~branch~(\BeanovesCurrentTestFile :\the\inputlineno)
  \item #1
  \end{BNVS/failure}
}
\cs_generate_variant:Nn \BNVS_ASSERT_equal:nnn { x, xx }
\cs_set:Npn \BNVS_ASSERT_equal_tl:vnn {
  \BNVS_tl_use:Nv \BNVS_ASSERT_equal:nnn
}
\cs_generate_variant:Nn \BNVS_TEST_fail:n { x }
\cs_new:Npn \BNVS_DEBUG_log_f:c #1 {
  \BNVS_DEBUG_log:x { \token_to_str:c { \BNVS:c { #1 } } }
}
\cs_new:Npn \BNVS_DEBUG_log_f:ncn #1 #2 #3 {
  \BNVS_DEBUG_log:x { #1 \token_to_str:c { \BNVS:c { #2 } } #3 }
}
\cs_new:Npn \BNVS_DEBUG_log_tl:c #1 {
  \BNVS_DEBUG_log:x {
    \BNVS_tl_use:Nc \token_to_str:N { #1 }
    -> / \BNVS_tl_use:Nv \tl_to_str:n { #1 } /
  }
}
\cs_new:Npn \BNVS_DEBUG_log_int:c #1 {
  \BNVS_DEBUG_log:x {
    \BNVS_int_use:Nc \token_to_str:N { #1 }
    -> / \BNVS_int_use:Nv \tl_to_str:n { #1 } /
  }
}
\cs_new:Npn \BNVS_DEBUG_log_arg:nc #1 #2 {
  \BNVS_DEBUG_log:x {
    \tl_to_str:n { #1 }
    -> / \tl_to_str:n { #2 } /
  }
}
\cs_generate_variant:Nn \tl_to_str:n { v }
\cs_new:Npn \BNVS_DEBUG_log_tl:nc #1 #2 {
  \BNVS_DEBUG_log:x {
    \tl_if_empty:nF { #1 } { #1 -> }
    \BNVS_tl_use:Nc \token_to_str:N  { #2 }
    -> / \BNVS_tl_use:Nv \tl_to_str:n { #2 } /
  }
}
\cs_new:Npn \BNVS_DEBUG_tl:c #1 {
  \BNVS_DEBUG_log:x {
    \BNVS_tl_use:Nc \token_to_str:N { #1 }
    -> / \BNVS_tl_use:Nv \tl_to_str:n { #1 } /
  }
}

\cs_new:Npn \BNVS_DEBUG_log_arg:nn #1 #2 {
  \BNVS_DEBUG_log:x { \tl_to_str:n { #1 } -> / \tl_to_str:n { #2 } / }
}
\cs_new:Npn \BNVS_DEBUG_log_arg:nnnc #1 #2 {
  \BNVS_DEBUG_log_arg:nn { #1 } { #2 }
  \BNVS_DEBUG_log_arg:nc
}
\cs_new:Npn \BNVS_DEBUG_log_arg:nnnn #1 #2 {
  \BNVS_DEBUG_log_arg:nn { #1 } { #2 }
  \BNVS_DEBUG_log_arg:nn
}
\cs_new:Npn \BNVS_DEBUG_log_arg:nnnnnc #1 #2 {
  \BNVS_DEBUG_log_arg:nn { #1 } { #2 }
  \BNVS_DEBUG_log_arg:nnnc
}
\cs_new:Npn \BNVS_DEBUG_log_arg:nnnnnn #1 #2 {
  \BNVS_DEBUG_log_arg:nn { #1 } { #2 }
  \BNVS_DEBUG_log_arg:nnnn
}
\cs_new:Npn \BNVS_DEBUG_log_arg:nnnnnnnc #1 #2 {
  \BNVS_DEBUG_log_arg:nn { #1 } { #2 }
  \BNVS_DEBUG_log_arg:nnnnnc
}
\cs_new:Npn \BNVS_DEBUG_log_f:cnn #1 {
  \BNVS_DEBUG_log_f:c { #1 }
  \BNVS_DEBUG_log_arg:nn
}
\cs_new:Npn \BNVS_DEBUG_log_f:cnnnn #1 {
  \BNVS_DEBUG_log_f:c { #1 }
  \BNVS_DEBUG_log_arg:nnnn
}
\cs_new:Npn \BNVS_DEBUG_log_f:cnnnnnn #1 {
  \BNVS_DEBUG_log_f:c { #1 }
  \BNVS_DEBUG_log_arg:nnnnnn
}
\cs_new:Npn \BNVS_DEBUG_log_f:cnnnc #1 {
  \BNVS_DEBUG_log_f:c { #1 }
  \BNVS_DEBUG_log_arg:nnnc
}
\cs_new:Npn \BNVS_DEBUG_log_f:cnnnnc #1 #2 {
  \BNVS_DEBUG_log_f:ncn { } { #1 } { #2 }
  \BNVS_DEBUG_log_arg:nnnc
}
\cs_new:Npn \BNVS_DEBUG_log_f:cnnnnnnc #1 #2 {
  \BNVS_DEBUG_log_f:ncn { } { #1 } { #2 }
  \BNVS_DEBUG_log_arg:nnnnnc
}
\cs_new:Npn \BNVS_DEBUG_log_cs:nN #1 #2 {
  \BNVS_DEBUG_log:x { \tl_to_str:n { #1 } == \token_to_str:N #2 }
}
\cs_new:Npn \BNVS_DEBUG_log_seq:N #1 {
  \BNVS_DEBUG_log:x {
    \token_to_str:N #1 => / \seq_count:N #1 / \seq_use:Nn #1 . /
  }
}
\cs_new:Npn \BNVS_DEBUG_log_seq:nN #1 #2 {
  \BNVS_DEBUG_log:x {
    \tl_to_str:n { #1 } => / \seq_count:N #2 / \seq_use:Nn #2 . /
  }
}
\cs_generate_variant:Nn \tl_to_str:n { x }
\cs_new:Npn \BNVS_DEBUG_log_seq:xc #1 #2 {
  \BNVS_DEBUG_log:x {
    #1
    => / \seq_count:c { l__bnvs_#2_seq }
       / \seq_use:cn { l__bnvs_#2_seq } . /
  }
}
\cs_new:Npn \BNVS_DEBUG_log_seq:c #1 {
  \BNVS_DEBUG_log:x {
    \token_to_str:c { l__bnvs_#1_seq }
    => / \seq_count:c { l__bnvs_#1_seq }
       / \seq_use:cn { l__bnvs_#1_seq } . /
  }
}
\tl_new:N \BNVS_DEBUG_tl
\cs_new:Npn \BNVS_DEBUG_log_cs_set:cpn #1 {
  \tl_set:Nn \BNVS_DEBUG_tl { #1 }
  \tl_replace_once:Nnn \BNVS_DEBUG_tl { : } { _ }
  \cs_set:cpn { BNVS_DEBUG_log_ \BNVS_DEBUG_tl :nn }
}
\cs_new:Npn \BNVS_DEBUG_log_set:cn #1 #2 {
  \BNVS_DEBUG_log_cs_set:cpn { #1 } ##1 ##2 {
    \BNVS_DEBUG_log_f:ncn { ##1 } { #1 } { ##2 }
    #2
  }
}
\cs_new:Npn \BNVS_DEBUG_log_set:cnn #1 #2 #3 {
  \BNVS_DEBUG_log_cs_set:cpn { #1 } ##1 ##2 {
    \BNVS_DEBUG_log_f:ncn { ##1 } { #1 } { ##2 }
    \BNVS_DEBUG_log_arg:nn { #2 } { #3 }
  }
}
\cs_new:Npn \BNVS_DEBUG_log_set:cnnc #1 #2 #3 #4 {
  \BNVS_DEBUG_log_cs_set:cpn { #1 } ##1 ##2 {
    \BNVS_DEBUG_log_f:ncn { ##1 } { #1 } { ##2 }
    \BNVS_DEBUG_log_arg:nnnc { #2 } { #3 } { IN } { #4 }
    \cs_if_exist:cT { l__bnvs_#4_tl } {
      \BNVS_DEBUG_log_tl:c { #4 }
    }
  }
}
\cs_new:Npn \BNVS_DEBUG_log_set:cnnnn #1 #2 #3 #4 #5 {
  \BNVS_DEBUG_log_cs_set:cpn { #1 } ##1 ##2 {
    \BNVS_DEBUG_log_f:ncn { ##1 } { #1 } { ##2 }
    \BNVS_DEBUG_log_arg:nnnn { #2 } { #3 } { #4 } { #5 }
  }
}
\cs_new:Npn \BNVS_DEBUG_log_set:cnnnnc #1 #2 #3 #4 #5 #6 {
  \BNVS_DEBUG_log_cs_set:cpn { #1 } ##1 ##2 {
    \BNVS_DEBUG_log_f:ncn { ##1 } { #1 } { ##2 }
    \BNVS_DEBUG_log_arg:nnnnnc { #2 } { #3 } { #4 } { #5 } { IN } { #6 }
  }
}
\cs_new:Npn \BNVS_DEBUG_log_set:cnnnnnnc #1 #2 #3 #4 #5 #6 #7 #8 {
  \BNVS_DEBUG_log_cs_set:cpn { #1 } ##1 ##2 {
    \BNVS_DEBUG_log_f:ncn { ##1 } { #1 } { ##2 }
    \BNVS_DEBUG_log_arg:nnnnnnnc { #2 } { #3 } { #4 } { #5 } { #6 } { #7 } { IN } { #8 }
  }
}
\tl_new:N \l__bnvs_id_last_tl
\tl_set:Nn \l__bnvs_id_last_tl { ?! }
\tl_new:N \l__bnvs_a_tl
\tl_new:N \l__bnvs_b_tl
\tl_new:N \l__bnvs_c_tl
\tl_new:N \l__bnvs_V_tl
\tl_new:N \l__bnvs_A_tl
\tl_new:N \l__bnvs_L_tl
\tl_new:N \l__bnvs_Z_tl
\tl_new:N \l__bnvs_ans_tl
\tl_new:N \l__bnvs_FQ_name_tl
\tl_new:N \l__bnvs_FQ_name_base_tl
\tl_new:N \l__bnvs_ref_tl
\tl_new:N \l__bnvs_ref_base_tl
\tl_new:N \l__bnvs_id_tl
\tl_new:N \l__bnvs_n_tl
\tl_new:N \l__bnvs_path_tl
\tl_new:N \l__bnvs_group_tl
\tl_new:N \l__bnvs_scan_tl
\tl_new:N \l__bnvs_query_tl
\tl_new:N \l__bnvs_token_tl
\tl_new:N \l__bnvs_root_tl
\tl_new:N \l__bnvs_n_incr_tl
\tl_new:N \l__bnvs_incr_tl
\tl_new:N \l__bnvs_plus_tl
\tl_new:N \l__bnvs_rhs_tl
\tl_new:N \l__bnvs_post_tl
\tl_new:N \l__bnvs_suffix_tl
\int_new:N \g__bnvs_call_int
\int_new:N \l__bnvs_int
\int_new:N \l__bnvs_i_int
\seq_new:N \g__bnvs_def_seq
\seq_new:N \l__bnvs_ans_seq
\seq_new:N \l__bnvs_match_seq
\seq_new:N \l__bnvs_split_seq
\seq_new:N \l__bnvs_path_seq
\seq_new:N \l__bnvs_path_base_seq
\seq_new:N \l__bnvs_path_head_seq
\seq_new:N \l__bnvs_path_tail_seq
\seq_new:N \l__bnvs_query_seq
\seq_new:N \l__bnvs_token_seq
\bool_new:N \l__bnvs_in_frame_bool
\bool_set_false:N \l__bnvs_in_frame_bool
\bool_new:N \l__bnvs_parse_bool
\bool_new:N \l__bnvs_provide_bool
\BNVS_new:cpn { provide_on: } {
  \bool_set_true:N \l__bnvs_provide_bool
\BNVS_DEBUG_log:n { PROVIDE...ON }
}
\BNVS_new:cpn { provide_off: } {
  \bool_set_false:N \l__bnvs_provide_bool
\BNVS_DEBUG_log:n { PROVIDE...OFF }
}
\__bnvs_provide_off:
\BNVS_new_conditional:cpnn { if_provide: } { p, T, F, TF } {
  \bool_if:NTF \l__bnvs_provide_bool {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\int_const:Nn \c__bnvs_max_call_int { 8192 }
\BNVS_new:cpn  { call_greset: } {
\BNVS_DEBUG_log_f:c { call_greset: }
\BNVS_DEBUG_log:x { \token_to_str:N \g__bnvs_call_int: \int_use:N \g__bnvs_call_int }
  \int_gset:Nn \g__bnvs_call_int { \c__bnvs_max_call_int }
}
\BNVS_new_conditional:cpnn { if_call: } { T, F, TF } {
  \int_gdecr:N \g__bnvs_call_int
\BNVS_DEBUG_log_f:c { if_call:TF }
\BNVS_DEBUG_log:x { \token_to_str:N \g__bnvs_call_int: \int_use:N \g__bnvs_call_int }
  \int_compare:nNnTF \g__bnvs_call_int > 0 {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\prop_new:N \g__bnvs_prop
\cs_new:Npn \BNVS_DEBUG_log_gprop:n #1 {
  \int_compare:nNnT { \prop_count:N \g__bnvs_prop } < {
    \tl_if_empty:nTF { #1 } { 20 } { #1 }
  } {
    \prop_map_inline:Nn \g__bnvs_prop {
      \BNVS_DEBUG_log:n { ##1 -> ##2 }
    }
  }
  \BNVS_DEBUG_log_cache_gprop:n {#1}
  \BNVS_DEBUG_log_v_gprop:n {#1}
  \BNVS_DEBUG_log_n_gprop:n {#1}
}
\NewDocumentCommand\BeanovesLogGProp {O{20}} { \BNVS_DEBUG_log_gprop:n {#1} }
\BNVS_new:cpn { gput:nnn } #1 #2 {
  \prop_gput:Nnn \g__bnvs_prop { #2 / #1 }
}
\BNVS_set:cpn { gput:nnn } #1 #2 #3 {
  \prop_gput:Nnn \g__bnvs_prop { #2 / #1 } { #3 }
\BNVS_DEBUG_log_f:cnnnnnn { gput:nnn }
  { SUBKEY } { #1 } { FQ_NAME } { #2 } { VALUE } { #3 }
\BNVS_DEBUG_log_gprop:n {}
}
\BNVS_new:cpn { gput:nvn } #1 {
  \BNVS_tl_use:nv {
    \__bnvs_gput:nnn { #1 }
  }
}
\BNVS_new:cpn { gput:nnv } #1 #2 {
  \BNVS_tl_use:nv {
    \__bnvs_gput:nnn { #1 } { #2 }
  }
}
\BNVS_new:cpn { item:nn } #1 #2 {
  \prop_item:Nn \g__bnvs_prop { #2 / #1 }
}
\BNVS_new:cpn { gremove:nn } #1 #2 {
  \prop_gremove:Nn \g__bnvs_prop { #2 / #1 }
\BNVS_DEBUG_log_f:cnnnn { gremove:nn } { SUBKEY } { #1 } { FQ_NAME } { #2 }
\BNVS_DEBUG_log_gprop:n {}
}
\BNVS_new:cpn { gclear:n } #1 {
  \clist_map_inline:nn { V, A, Z, L } {
    \__bnvs_gremove:nn { ##1 } { #1 }
  }
  \__bnvs_cache_gclear:n { #1 }
\BNVS_DEBUG_log_f:cnn { gclear:nn } { FQ_NAME } { #1 }
\BNVS_DEBUG_log_gprop:n {}
}
\BNVS_new:cpn { gclear: } {
  \prop_gclear:N \g__bnvs_prop
\BNVS_DEBUG_log_f:c { gclear:nn }
\BNVS_DEBUG_log_gprop:n {}
}
\BNVS_generate_variant:cn { gclear:n } { V }
\BNVS_new:cpn { gclear:v } {
   \BNVS_tl_use:Nc \__bnvs_gclear:V
}
\BNVS_new_conditional:cpnn { if_in:nn } #1 #2 { p, T, F, TF } {
  \prop_if_in:NnTF \g__bnvs_prop { #2 / #1 } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { if_in:n } #1 { p, T, F, TF } {
  \bool_if:nTF {
       \__bnvs_if_in_p:nn V { #1 }
    || \__bnvs_if_in_p:nn A { #1 }
    || \__bnvs_if_in_p:nn Z { #1 }
  } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { if_in:v } #1 { p, T, F, TF } {
  \BNVS_tl_use:Nv \__bnvs_if_in:nTF { #1 }
    { \prg_return_true: } { \prg_return_false: }
}

\BNVS_new:cpn { gprovide:nnnT } #1 #2 #3 #4 {
  \prop_if_in:NnF \g__bnvs_prop { #2 / #1 } {
    #4
    \prop_gput:Nnn \g__bnvs_prop { #2 / #1 } { #3 }
\BNVS_DEBUG_log_f:cnnnnnn { gprovide:nnnT }
  { SUBKEY } { #1 } { FQ_NAME } { #2 } { VALUE } { #3 }
\BNVS_DEBUG_log_gprop:n {}
  }
}
\BNVS_new_conditional:cpnn { if_get:nnc } #1 #2 #3 { T, F, TF } {
  \BNVS_tl_use:nc {
    \prop_get:NnNTF \g__bnvs_prop { #2 / #1 }
  } { #3 } {
\BNVS_DEBUG_log_f:cnnnnnnc { if_get:nncTF } { ...TRUE } { SUBKEY } { #1 } { FQ_NAME } { #2 } { => } { #3 }
\BNVS_DEBUG_log_tl:c { #3 }
    \prg_return_true:
  } {
\BNVS_DEBUG_log_f:cnnnnnnc { if_get:nncTF } { ...FALSE } { SUBKEY } { #1 } { FQ_NAME } { #2 } { => } { #3 }
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { if_get:nvc } #1 #2 #3 { T, F, TF } {
  \BNVS_tl_use:nv {
    \__bnvs_if_get:nncTF { #1 }
  } { #2 } { #3 } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\prop_new:N \g__bnvs_cache_prop
\cs_new:Npn \BNVS_DEBUG_log_cache_gprop:n #1 {
  \int_compare:nNnT { \prop_count:N \g__bnvs_cache_prop } < {
    \tl_if_empty:nTF { #1 } { 20 } { #1 }
  } {
    \prop_map_inline:Nn \g__bnvs_cache_prop {
      \BNVS_DEBUG_log:n { c: ##1 -> ##2 }
    }
  }
}
\NewDocumentCommand\BeanovesLogCProp {O{20}} { \BNVS_DEBUG_log_cache_gprop:n {#1} }
\BNVS_new:cpn { cache_gput:nnn } #1 #2 {
  \prop_gput:Nnn \g__bnvs_cache_prop { #2 / #1 }
}
\BNVS_set:cpn { cache_gput:nnn } #1 #2 #3 {
\BNVS_DEBUG_log_f:c { cache_gput:nnn }
\BNVS_DEBUG_log_arg:nn { SUBKEY } { #1 }
\BNVS_DEBUG_log_arg:nn { FQ_NAME } { #2 }
\BNVS_DEBUG_log_arg:nn { VALUE } { #3 }
  \prop_gput:Nnn \g__bnvs_cache_prop { #2 / #1 } { #3 }
}
\BNVS_new:cpn { cache_gput:nvn } #1 {
  \BNVS_tl_use:nv {
    \__bnvs_cache_gput:nnn { #1 }
  }
}
\BNVS_new:cpn { cache_gput:nnv } #1 #2 {
  \BNVS_tl_use:nv {
    \__bnvs_cache_gput:nnn { #1 } { #2 }
  }
}
\BNVS_new:cpn { cache_gput:nvv } #1 #2 {
  \BNVS_tl_use:nv {
    \__bnvs_cache_gput:nvn { #1 } { #2 }
  }
}
\BNVS_new:cpn { cache_item:nn } #1 #2 {
  \prop_item:Nn \g__bnvs_cache_prop { #2 / #1 }
}
\BNVS_new:cpn { cache_gremove:nn } #1 #2 {
  \prop_gremove:Nn \g__bnvs_cache_prop { #2 / #1 }
}
\BNVS_new:cpn { cache_gclear:n } #1 {
  \clist_map_inline:nn { V, A, Z, L, P, N } {
    \prop_gremove:Nn \g__bnvs_cache_prop { #1 / ##1 }
  }
}
\BNVS_new:cpn { cache_gclear: } {
  \prop_gclear:N \g__bnvs_cache_prop
\BNVS_DEBUG_log_f:c { cache_gclear: }
\BNVS_DEBUG_log_gprop:n { }
}
\prg_new_conditional:Npnn \__bnvs_cache_if_in:nn #1 #2 { p, T, F, TF } {
  \prop_if_in:NnTF \g__bnvs_cache_prop { #2 / #1 } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { cache_if_get:nnc } #1 #2 #3 { T, F, TF } {
  \BNVS_tl_use:nc {
    \prop_get:NnNTF \g__bnvs_cache_prop { #2 / #1 }
  } { #3 } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\prop_new:N \g__bnvs_v_prop
\cs_new:Npn \BNVS_DEBUG_log_v_gprop:n #1 {
  \int_compare:nNnT { \prop_count:N \g__bnvs_v_prop } < {
    \tl_if_empty:nTF { #1 } { 20 } { #1 }
  } {
    \prop_map_inline:Nn \g__bnvs_v_prop {
      \BNVS_DEBUG_log:n { v: ##1 -> ##2 }
    }
  }
}
\NewDocumentCommand\BeanovesLogVProp {O{20}} { \BNVS_DEBUG_log_v_gprop:n {#1} }
\BNVS_new:cpn { v_gput:nn } {
  \prop_gput:Nnn \g__bnvs_v_prop
}
\BNVS_set:cpn { v_gput:nn } #1 #2 {
  \prop_gput:Nnn \g__bnvs_v_prop { #1 } { #2 }
\BNVS_DEBUG_log_f:cnnnn { v_gput:nn } { FQ_NAME } { #1 } { VALUE } { #2 }
\BNVS_DEBUG_log_gprop:n {}
}
\BNVS_new:cpn { v_gput:nv } #1 {
  \BNVS_tl_use:nv {
    \__bnvs_v_gput:nn { #1 }
  }
}
\BNVS_new:cpn { v_item:n } #1 {
  \prop_item:Nn \g__bnvs_v_prop { #1 }
}
\BNVS_new:cpn { v_gremove:n } {
  \prop_gremove:Nn \g__bnvs_v_prop
}
\BNVS_set:cpn { v_gremove:n } #1 {
  \prop_gremove:Nn \g__bnvs_v_prop { #1 }
\BNVS_DEBUG_log_f:cnn { v_gremove:n } { FQ_NAME } { #1 }
\BNVS_DEBUG_log_gprop:n {}
}
\BNVS_new:cpn { v_gclear: } {
  \prop_gclear:N \g__bnvs_v_prop
\BNVS_DEBUG_log_f:c { v_gclear:n }
\BNVS_DEBUG_log_gprop:n {}
}
\BNVS_new_conditional:cpnn { v_if_in:n } #1 { p, T, F, TF } {
  \prop_if_in:NnTF \g__bnvs_v_prop { #1 } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { v_if_get:nc } #1 #2 { T, F, TF } {
  \BNVS_tl_use:nc {
    \prop_get:NnNTF \g__bnvs_v_prop { #1 }
  } { #2 } {
\BNVS_DEBUG_log_f:cnnnc { v_if_get:ncTF } { ...TRUE } { FQ_NAME } { #1 } { #2 }
    \prg_return_true:
  } {
\BNVS_DEBUG_log_f:cnnnc { v_if_get:ncTF } { ...FALSE } { FQ_NAME } { #1 } { #2 }
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { v_if_greset:nn } #1 #2 { T, F, TF } {
  \__bnvs_v_if_in:nTF { #1 } {
\BNVS_DEBUG_log_f:ncn { } { v_if_greset:nnTF } { }
\BNVS_DEBUG_log_arg:nnnn { FQ_NAME } { #1 } { VALUE } { #2 }
    \__bnvs_v_gremove:n { #1 }
    \tl_if_empty:nF { #2 } {
      \__bnvs_v_gput:nn { #1 } { #2 }
    }
\BNVS_DEBUG_log_f:ncn { } { v_if_greset:nnTF } { ...TRUE }
    \prg_return_true:
  } {
\BNVS_DEBUG_log_f:ncn { } { v_if_greset:nnTF } { ...FALSE }
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { v_if_greset:nv } #1 #2 { T, F, TF } {
  \BNVS_tl_use:nv { \__bnvs_v_if_greset:nnTF { #1 } } { #2 }
    { \prg_return_true: } { \prg_return_false: }
}
\BNVS_new_conditional:cpnn { v_if_greset:vn } #1 #2 { T, F, TF } {
  \BNVS_tl_use:Nv \__bnvs_v_if_greset:nnTF { #1 } { #2 }
    { \prg_return_true: } { \prg_return_false: }
}
\BNVS_new_conditional:cpnn { if_greset_all:nn } #1 #2 { T, F, TF } {
  \__bnvs_if_in:nTF { #1 } {
\BNVS_DEBUG_log_f:cnnnn { if_greset_all:nnTF } { FQ_NAME } { #1 } { VALUE } { #2 }
    \BNVS_DEBUG_begin:n { if_greset_all:nn }
    \clist_map_inline:nn { V, A, Z, L } {
      \__bnvs_if_get:nncT { ##1 } { #1 } { a } {
        \__bnvs_quark_if_nil:cT { a } {
          \__bnvs_cache_if_get:nncTF { ##1 } { #1 } { a } {
            \__bnvs_gput:nnv { ##1 } { #1 } { a }
          } {
            \__bnvs_gput:nnn { ##1 } { #1 } { 1 }
          }
        }
      }
    }
    \BNVS_end:
    \__bnvs_cache_gclear:n { #1 }
    \__bnvs_v_if_greset:nnT { #1 } { #2 } {}
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { if_greset_all:vn } #1 #2 { T, F, TF } {
  \BNVS_tl_use:Nv \__bnvs_if_greset_all:nnTF { #1 } { #2 }
    { \prg_return_true: } { \prg_return_false: }
}
\BNVS_new:cpn { gclear_all: } {
  \__bnvs_gclear:
  \__bnvs_cache_gclear:
  \__bnvs_n_gclear:
  \__bnvs_v_gclear:
}
\BNVS_new:cpn { gclear_all:n } #1 {
  \__bnvs_gclear:n { #1 }
  \__bnvs_cache_gclear:n { #1 }
  \__bnvs_n_gremove:n { #1 }
  \__bnvs_v_gremove:n { #1 }
}
\prop_new:N \g__bnvs_n_prop
\cs_new:Npn \BNVS_DEBUG_log_n_gprop:n #1 {
  \int_compare:nNnT { \prop_count:N \g__bnvs_n_prop } < {
    \tl_if_empty:nTF { #1 } { 20 } { #1 }
  } {
    \prop_map_inline:Nn \g__bnvs_n_prop {
      \BNVS_DEBUG_log:n { n: ##1 -> ##2 }
    }
  }
}
\NewDocumentCommand\BeanovesLogNProp {O{20}} { \BNVS_DEBUG_log_n_gprop:n {#1} }
\BNVS_new:cpn { n_gput:nn } {
  \prop_gput:Nnn \g__bnvs_n_prop
}
\BNVS_set:cpn { n_gput:nn } #1 #2 {
  \prop_gput:Nnn \g__bnvs_n_prop { #1 } { #2 }
\BNVS_DEBUG_log_f:cnnnn { n_gput:nn } { FQ_NAME } { #1 } { VALUE } { #2 }
\BNVS_DEBUG_log_gprop:n {}
}
\cs_generate_variant:Nn \__bnvs_n_gput:nn { nV }
\BNVS_new:cpn { n_gput:nv } #1 {
  \BNVS_tl_use:nc {
    \__bnvs_n_gput:nV { #1 }
  }
}
\BNVS_new:cpn { n_gprovide:nn } #1 #2 {
  \prop_if_in:NnF \g__bnvs_n_prop { #1 } {
    \prop_gput:Nnn \g__bnvs_n_prop { #1 } { #2 }
  }
\BNVS_DEBUG_log_f:cnnnn { n_gprovide:nn } { FQ_NAME } { #1 } { VALUE } { #2 }
\BNVS_DEBUG_log_gprop:n {}
}
\BNVS_new:cpn { n_item:n } #1 {
  \prop_item:Nn \g__bnvs_n_prop { #1 }
}
\BNVS_set:cpn { n_item:n } #1 {
  \prop_item:Nn \g__bnvs_n_prop { #1 }
}
\BNVS_new:cpn { n_gremove:n } {
  \prop_gremove:Nn \g__bnvs_n_prop
}
\BNVS_set:cpn { n_gremove:n } #1 {
  \prop_gremove:Nn \g__bnvs_n_prop { #1 }
\BNVS_DEBUG_log_f:cnn { n_gremove:n } { FQ_NAME } { #1 }
\BNVS_DEBUG_log_gprop:n {}
}
\BNVS_generate_variant:cn { n_gremove:n } { V }
\BNVS_new:cpn { n_gremove:v } {
  \BNVS_tl_use:nc {
    \__bnvs_n_gremove:V
  }
}
\BNVS_new:cpn { n_gclear: } {
  \prop_gclear:N \g__bnvs_n_prop
\BNVS_DEBUG_log_f:c { n_gclear: }
\BNVS_DEBUG_log_gprop:n { }
}
\cs_generate_variant:Nn \__bnvs_n_gremove:n { V }
\prg_new_conditional:Npnn \__bnvs_n_if_in:n #1 { p, T, F, TF } {
  \prop_if_in:NnTF \g__bnvs_n_prop { #1 } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\prg_new_conditional:Npnn \__bnvs_n_if_get:nc #1 #2 { T, F, TF } {
  \__bnvs_if_prop_get:NncTF \g__bnvs_n_prop { #1 } { #2 } {
\BNVS_DEBUG_log_f:cnnnc { n_if_get:ncTF } { ...TRUE } { FQ_NAME } { #1 } { #2 }
    \prg_return_true:
  } {
\BNVS_DEBUG_log_f:cnnnc { n_if_get:ncTF } { ...FALSE } { FQ_NAME } { #1 } { #2 }
    \prg_return_false:
  }
}
\regex_const:Nn \c__bnvs_short_regex {
  [[:alpha:]_][[:alnum:]_]*
}
\regex_const:Nn \c__bnvs_id_regex {
  (?: \ur{c__bnvs_short_regex} | [?] )? !
}
\regex_const:Nn \c__bnvs_path_regex {
  (?: \. \ur{c__bnvs_short_regex} | \. [-+]? \d+ )*
}
\regex_const:Nn \c__bnvs_A_FQ_name_Z_regex {
  \A ( ( \ur{c__bnvs_id_regex} ? ) \ur{c__bnvs_short_regex} )
  ( \ur{c__bnvs_path_regex} ) \Z
}
\regex_const:Nn \c__bnvs_A_FQ_name_n_Z_regex {
  \A ( ( \ur{c__bnvs_id_regex} ? )
  \ur{c__bnvs_short_regex}
  (?: \. \ur{c__bnvs_short_regex} | \. [-+]? \d+ )*? )
  ( \. n )? \Z
}
\regex_const:Nn \c__bnvs_colons_regex { :(:+)? }
\regex_const:Nn \c__bnvs_split_regex {
  \s* ( ? :
      \+\+
    ( ( \ur{c__bnvs_id_regex}? ) \ur{c__bnvs_short_regex} )
    ( \ur{c__bnvs_path_regex} )
    | ( ( \ur{c__bnvs_id_regex}? ) \ur{c__bnvs_short_regex} )
      ( \ur{c__bnvs_path_regex} )
      (?: \.(\+)\+n
      |  \s* (\+?)= \s* ( \S+ )
      | (\+)\+
    )?
  ) \s*
}
\RequirePackage{keyval}
\define@key{beamerframe}{beanoves~id}[]{
  \tl_set:Nx \l__bnvs_id_last_tl { #1 ! }
  \BNVS_log_a:nn {THIS_IS_KEY} {}
}
\AddToHook{env/beamer@frameslide/before}{
  \__bnvs_call_greset:
  \__bnvs_n_gclear:
  \__bnvs_v_gclear:
  \bool_set_true:N \l__bnvs_in_frame_bool
  \BNVS_log_a:nn {THIS_IS_BEFORE} {}
}
\AddToHook{env/beamer@frameslide/after}{
  \bool_set_false:N \l__bnvs_in_frame_bool
  \BNVS_log_a:nn {THIS_IS_AFTER} {}
}
\BNVS_new_conditional:cpnn { split_if_pop_left:c } #1 { T, F, TF } {
  \__bnvs_seq_pop_left:ccTF { split } { #1 } {
\BNVS_DEBUG_log_f:ncn { } { split_if_pop_left:cTF } { ...TRUE }
\BNVS_DEBUG_log_tl:c { #1 }
    \prg_return_true:
  } {
\BNVS_DEBUG_log_f:ncn { } { split_if_pop_left:cTF } { ...FALSE }
    \prg_return_false:
  }
}
\exp_args_generate:n { VVV }
\BNVS_new_conditional:cpnn { range_if_set:cccn } #1 #2 #3 #4 { T, F, TF } {
\BNVS_DEBUG_log_set:cn { range_if_set:cccnTF } {
  \BNVS_DEBUG_log_tl:c { #1 }
  \BNVS_DEBUG_log_tl:c { #2 }
  \BNVS_DEBUG_log_tl:c { #3 }
  \BNVS_DEBUG_log_arg:nn { IN } { #4 }
  \BNVS_DEBUG_log_gprop:n {}
}
\BNVS_DEBUG_log_range_if_set_cccnTF:nn { } { ... }
  \BNVS_DEBUG_begin:n { range_if_set:cccn }
  \__bnvs_tl_clear:c { a }
  \__bnvs_tl_clear:c { b }
  \__bnvs_tl_clear:c { c }
  \__bnvs_if_regex_split:cnTF { colons } { #4 } {
    \__bnvs_seq_pop_left:ccT { split } { a } {
      \__bnvs_seq_pop_left:ccT { split } { b } {
        \__bnvs_tl_if_empty:cTF { b } {
          \__bnvs_split_if_pop_left:cTF { b } {
            \__bnvs_seq_pop_left:ccT { split } { c } {
              \__bnvs_tl_if_empty:cTF { c } {
                \BNVS_error:n { Invalid~range~expression(1):~#4 }
              } {
                \int_compare:nNnT { \__bnvs_tl_count:c { c } } > { 1 } {
                  \BNVS_error:n { Invalid~range~expression(2):~#4 }
                }
                \__bnvs_split_if_pop_left:cTF { c } {
                  \__bnvs_seq_if_empty:cF { split } {
                    \BNVS_error:n { Invalid~range~expression(3):~#4 }
                  }
                } {
                  \BNVS_error:n { Internal~error }
                }
              }
            }
          } {
          }
        } {
          \int_compare:nNnT { \__bnvs_tl_count:c { b } } > { 1 } {
            \BNVS_error:n { Invalid~range~expression(4):~#4 }
          }
          \__bnvs_seq_pop_left:ccT { split } { c } {
            \__bnvs_split_if_pop_left:cTF { b } {
              \__bnvs_tl_if_empty:cTF { b } {
                \__bnvs_seq_pop_left:cc { split } { b }
                \__bnvs_seq_if_empty:cF { split } {
                  \BNVS_error:n { Invalid~range~expression(5):~#4 }
                }
              } {
                \BNVS_error:n { Invalid~range~expression(6):~#4 }
              }
            } {
              \__bnvs_tl_clear:c { b }
            }
          }
        }
      }
    }
    \cs_set:Npn \BNVS_next: { }
    \__bnvs_tl_if_empty:cT { a } {
      \__bnvs_tl_if_empty:cT { b } {
        \__bnvs_tl_if_empty:cT { c } {
          \cs_set:Npn \BNVS_next: {
            \BNVS_error:n { Invalid~range~expression(7):~#3 }
          }
        }
      }
    }
    \BNVS_next:
    \cs_set:Npn \BNVS:nnn ##1 ##2 ##3 {
      \BNVS_end:
      \__bnvs_tl_set:cn { #1 } { ##1 }
      \__bnvs_tl_set:cn { #2 } { ##2 }
      \__bnvs_tl_set:cn { #3 } { ##3 }
    }
    \BNVS_exp_args:Nvvv \BNVS:nnn { a } { b } { c }
    \prg_return_true:
  } {
\BNVS_DEBUG_log_range_if_set_cccnTF:nn { ... } { ...FALSE }
    \BNVS_end:
    \prg_return_false:
  }
}
\BNVS_new:cpn { range:nnnn } #1 {
\BNVS_DEBUG_log_set:cnn { range:nnnn } { FQ NAME } { #1 }
\BNVS_DEBUG_log_range_nnnn:nn { } { ... }
\BNVS_DEBUG_log_gprop:n {}
  \__bnvs_if_provide:TF {
\BNVS_DEBUG_log_range_nnnn:nn { ... } { ...PROVIDE... }
    \__bnvs_if_in:nnTF A { #1 } {
      \use_none:nnn
    } {
      \__bnvs_if_in:nnTF Z { #1 } {
        \use_none:nnn
      } {
        \__bnvs_if_in:nnTF L { #1 } {
          \use_none:nnn
        } {
          \__bnvs_do_range:nnnn { #1 }
        }
      }
    }
  } {
\BNVS_DEBUG_log_range_nnnn:nn { ... } { .../DO~RANGE }
    \__bnvs_do_range:nnnn { #1 }
  }
}
\BNVS_new:cpn { range:nvvv } #1 #2 #3 #4 {
  \BNVS_tl_use:nv {
    \BNVS_tl_use:nv {
      \BNVS_tl_use:nv {
        \BNVS_use:c { range:nnnn } { #1 }
      } { #2 }
    } { #3 }
  } { #4 }
}
\BNVS_new:cpn { parse_record:n } #1 {
\BNVS_DEBUG_log_set:cnn { parse_record_n } { KEY } { #1 }
\BNVS_DEBUG_log_parse_record_n:nn { } { ... }
  \__bnvs_if_provide:TF {
    \__bnvs_gprovide:nnnT V { #1 } { 1 } {
      \__bnvs_gclear:n { #1 }
    }
  } {
    \__bnvs_gclear:n { #1 }
    \__bnvs_gput:nnn V { #1 } { 1 }
  }
\BNVS_DEBUG_log_parse_record_n:nn { ... } { ...END }
}
\BNVS_new:cpn { parse_record:v } {
  \BNVS_tl_use:nv {
    \__bnvs_parse_record:n
  }
}
\BNVS_new:cpn { parse_record:nn } #1 #2 {
\BNVS_DEBUG_log_set:cnnnn { parse_record:nn }
  { KEY } { #1 } { VALUE } { #2 }
\BNVS_DEBUG_log_parse_record_nn:nn { } { ... }
  \__bnvs_range_if_set:cccnTF { a } { b } { c } { #2 } {
    \__bnvs_range:nvvv { #1 } { a } { b } { c }
\BNVS_DEBUG_log_parse_record_nn:nn { ... } { ...RANGE... }
  } {
    \__bnvs_if_provide:TF {
      \__bnvs_gprovide:nnnT V { #1 } { #2 } {
        \__bnvs_gclear_all:n { #1 }
      }
    } {
      \__bnvs_gclear_all:n { #1 }
      \__bnvs_gput:nnn V { #1 } { #2 }
    }
\BNVS_DEBUG_log_parse_record_nn:nn { ... } { ...VALUE }
  }
}
\cs_generate_variant:Nn \__bnvs_parse_record:nn { x }
\BNVS_new:cpn { parse_record:vn } {
  \BNVS_tl_use:nv {
    \__bnvs_parse_record:nn
  }
}
\BNVS_new:cpn { n_parse_record:n } #1 {
\BNVS_DEBUG_log_set:cnn { n_parse_record:n } { KEY } { #1 }
\BNVS_DEBUG_log_n_parse_record_n:nn { } { ... }
  \bool_if:NTF \l__bnvs_n_provide_bool {
    \__bnvs_n_gprovide:nn
  } {
    \__bnvs_n_gput:nn
  }
  { #1 } { 1 }
\BNVS_DEBUG_log_n_parse_record_n:nn { ... } { }
}
\BNVS_new:cpn { n_parse_record:v } {
  \BNVS_tl_use:cv { n_parse_record:n }
}
\BNVS_new:cpn { n_parse_record:nn } #1 #2 {
\BNVS_DEBUG_log_set:cnnnn
  { n_parse_record:nn } { KEY } { #1 } { VALUE } { #2 }
\BNVS_DEBUG_log_n_parse_record_nn:nn { } { ... }
  \__bnvs_range_if_set:cccnTF { a } { b } { c } { #2 } {
    \BNVS_error:n { Unexpected~range:~#2 }
  } {
    \__bnvs_if_provide:TF {
      \__bnvs_n_gprovide:nn { #1 } { #2 }
    } {
      \__bnvs_n_gput:nn { #1 } { #2 }
    }
\BNVS_DEBUG_log_n_parse_record_nn:nn { ... } { ...DONE }
  }
}
\BNVS_new:cpn { n_parse_record:vn } {
  \BNVS_tl_use:cv { n_parse_record:nn }
}
\BNVS_new_conditional:cpnn { if_id_FQ_name_n_get:n } #1 { T, F, TF } {
\BNVS_DEBUG_log_set:cn { if_id_FQ_name_n_get:n } {
  \BNVS_DEBUG_log_arg:nn { IN } { #1 }
  \BNVS_DEBUG_tl:c { FQ_name }
  \BNVS_DEBUG_tl:c { id }
  \BNVS_DEBUG_tl:c { n }
  \BNVS_DEBUG_tl:c { id_last }
}
  \BNVS_DEBUG_begin:n { if_id_FQ_name_n_get:n }
  \__bnvs_match_if_once:NnTF \c__bnvs_A_FQ_name_n_Z_regex { #1 } {
    \__bnvs_if_match_pop_left:cTF { n } {
      \__bnvs_if_match_pop_left:cTF { FQ_name } {
        \__bnvs_if_match_pop_left:cTF { id } {
          \__bnvs_if_match_pop_left:cTF { n } {
            \cs_set:Npn \BNVS:nnn ##1 ##2 ##3 {
              \BNVS_end:
              \__bnvs_tl_set:cn { id } { ##1 }
              \__bnvs_tl_set:cn { FQ_name } { ##2 }
              \__bnvs_tl_set:cn { n } { ##3 }
            }
            \__bnvs_tl_if_empty:cTF { id } {
              \BNVS_exp_args:Nvvv
              \BNVS:nnn { id_last } { FQ_name } { n }
              \__bnvs_tl_put_left:cv { FQ_name } { id_last }
            } {
              \BNVS_exp_args:Nvvv
              \BNVS:nnn { id } { FQ_name } { n }
              \__bnvs_tl_set:cv { id_last } { id }
            }
\BNVS_DEBUG_log_if_id_FQ_name_n_get_n:nn { } { ...TRUE }
            \prg_return_true:
          } {
            \BNVS_end:
            \BNVS_error:n { LOGICALLY_UNREACHABLE_A_FQ_name_n_Z/n }
            \prg_return_false:
          }
        } {
          \BNVS_end:
          \BNVS_error:n { LOGICALLY_UNREACHABLE_A_FQ_name_n_Z/id }
          \prg_return_false:
        }
      } {
        \BNVS_end:
        \BNVS_error:n { LOGICALLY_UNREACHABLE_A_FQ_name_n_Z/FQ_name }
        \prg_return_false:
      }
    } {
      \BNVS_end:
      \BNVS_error:n { LOGICALLY_UNREACHABLE_A_FQ_name_n_Z/n }
      \prg_return_false:
    }
  } {
    \BNVS_end:
\BNVS_DEBUG_log_if_id_FQ_name_n_get_n:nn { } { ...FALSE }
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { if_id_FQ_name_n_get:v } #1 { T, F, TF } {
  \BNVS_tl_use:nv { \BNVS_use:c { if_id_FQ_name_n_get:nTF } } { #1 } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\BNVS_new:cpn { parse:n } #1 {
\BNVS_DEBUG_log_set:cnn { parse:n } { KEY } { #1 }
\BNVS_DEBUG_log_parse_n:nn { } { ... }
  \peek_remove_spaces:n {
    \peek_catcode:NTF \c_group_begin_token {
      \__bnvs_tl_if_empty:cTF { root } {
        \BNVS_error:n { Unexpected~list~at~top~level. }
      } {
        \BNVS_DEBUG_begin:n { parse:n }
        \__bnvs_int_incr:c { i }
        \__bnvs_tl_put_right:cx { root } { \__bnvs_int_use:c { i } . }
        \cs_set:Npn \bnvs:w ####1 ####2 \s_stop {
          \regex_match:nnT { \S* } { ####2 } {
            \BNVS_error:n { Unexpected~####2 }
          }
          \keyval_parse:nnn {
            \__bnvs_parse:n
          } {
            \__bnvs_parse:nn
          } { ####1 }
          \BNVS_end:
        }
        \bnvs:w #1 \s_stop
      }
    } {
      \__bnvs_tl_if_empty:cTF { root } {
        \__bnvs_if_id_FQ_name_n_get:nTF { #1 } {
          \__bnvs_tl_if_empty:cTF { n } {
            \__bnvs_parse_record:v
          } {
            \__bnvs_n_parse_record:v
          }
          { FQ_name }
\BNVS_DEBUG_log_parse_n:nn { ... } { ...COMPLETE }
        } {
          \BNVS_error:n { Unexpected~name:~#1 }
        }
      } {
        \__bnvs_int_incr:c { i }
        \__bnvs_tl_if_empty:cTF { n } {
          \__bnvs_parse_record:xn
        } {
          \__bnvs_n_parse_record:xn
        } {
          \__bnvs_tl_use:c { root } \__bnvs_int_use:c { i }
        } { #1 }
      }
    }
  }
\BNVS_DEBUG_log_parse_n:nn { ... } { ...DONE }
}
\BNVS_new:cpn { do_range:nnnn } #1 #2 #3 #4 {
    \__bnvs_gclear_all:n { #1 }
\BNVS_DEBUG_log_set:cn { do_range:nnnn } {
  \BNVS_DEBUG_log_arg:nn { KEY } { #1 }
  \BNVS_DEBUG_log_arg:nn { FIRST } { #2 }
  \BNVS_DEBUG_log_arg:nn { LAST } { #3 }
  \BNVS_DEBUG_log_arg:nn { LENGTH } { #4 }
  \BNVS_DEBUG_log_gprop:n {}
}
\BNVS_DEBUG_log_do_range_nnnn:nn {  } { ... }
  \tl_if_empty:nTF { #4 } {
    \tl_if_empty:nTF { #2 } {
      \tl_if_empty:nTF { #3 } {
        \BNVS_error:n { Not~a~range:~:~#1 }
      } {
        \__bnvs_gput:nnn Z { #1 } { #3 }
        \__bnvs_gput:nnn V { #1 } { \q_nil }
      }
    } {
      \__bnvs_gput:nnn A { #1 } { #2 }
      \__bnvs_gput:nnn V { #1 } { \q_nil }
      \tl_if_empty:nF { #3 } {
        \__bnvs_gput:nnn Z { #1 } { #3 }
        \__bnvs_gput:nnn L { #1 } { \q_nil }
      }
    }
  } {
    \tl_if_empty:nTF { #2 } {
      \__bnvs_gput:nnn L { #1 } { #4 }
      \tl_if_empty:nF { #3 } {
        \__bnvs_gput:nnn Z { #1 } { #3 }
        \__bnvs_gput:nnn A { #1 } { \q_nil }
        \__bnvs_gput:nnn V { #1 } { \q_nil }
      }
    } {
      \__bnvs_gput:nnn A { #1 } { #2 }
      \__bnvs_gput:nnn L { #1 } { #4 }
      \__bnvs_gput:nnn Z { #1 } { \q_nil }
      \__bnvs_gput:nnn V { #1 } { \q_nil }
    }
  }
\BNVS_DEBUG_log_do_range_nnnn:nn { ... } { ...DONE }
}
\cs_new:Npn \BNVS_exp_args:NNcv #1 #2 #3 #4 {
  \BNVS_tl_use:nc { \exp_args:NNnV #1 #2 { #3 } }
    { #4 }
}
\cs_new:Npn \BNVS_tl_set_after:ncv #1 #2 {
  \BNVS_tl_use:nv {
    #1 \__bnvs_tl_set:cn { #2 }
  }
}
\cs_new:Npn \BNVS_end_tl_set:cv #1 {
  \BNVS_tl_use:nv {
    \BNVS_end: \__bnvs_tl_set:cn { #1 }
  }
}
\BNVS_new:cpn { parse:nn } #1 #2 {
\BNVS_DEBUG_log_set:cnnnn { parse:nn } { KEY } { #1 } { VALUE } { #2 }
\BNVS_DEBUG_log_parse_nn:nn { } { ... }
  \BNVS_DEBUG_begin:n { parse:nn }
  \__bnvs_tl_set:cn { a } { #1 }
  \__bnvs_tl_put_left:cv { a } { root }
  \__bnvs_if_id_FQ_name_n_get:vTF { a } {
\BNVS_DEBUG_log_parse_nn:nn { ... } { ... }
\BNVS_DEBUG_log_tl:c { FQ_name }
\BNVS_DEBUG_log_tl:c { id }
    \regex_match:nnTF { \S } { #2 } {
      \peek_remove_spaces:n {
        \peek_catcode:NTF \c_group_begin_token {
          \__bnvs_tl_if_empty:cF { n } {
\__bnvs_warning:n { Ignoring~unexpected~suffix~.n:~#1 }
          }
          \BNVS_DEBUG_begin:n { parse:nn(2) }
          \__bnvs_gput:nvn V { FQ_name } { \q_nil }
          \__bnvs_tl_set:cv { root } { FQ_name }
          \__bnvs_tl_put_right:cn { root } { . }
          \__bnvs_int_set:cn { i } { 0 }
\BNVS_DEBUG_log_parse_nn:nn { ... } { ...GO~RECURSIVE... }
\BNVS_DEBUG_log_tl:c { root }
          \cs_set:Npn \BNVS:w ##1 ##2 \s_stop {
            \regex_match:nnT { \S } { ##2 } {
              \BNVS_error:n { Unexpected~value~#2 }
            }
            \keyval_parse:nnn {
              \__bnvs_parse:n
            } {
              \__bnvs_parse:nn
            } { ##1 }
            \BNVS_end:
          }
          \BNVS:w
        } {
          \__bnvs_tl_if_empty:cTF { n } {
            \__bnvs_parse_record:vn
          } {
            \__bnvs_n_parse_record:vn
          }
          { FQ_name } { #2 }
          \use_none_delimit_by_s_stop:w
        }
      }
      #2 \s_stop
    } {
\BNVS_DEBUG_log_parse_nn:nn { ... } { ...REMOVE/1... }
\BNVS_DEBUG_log_tl:c { FQ_name }
      \__bnvs_tl_if_empty:cTF { n } {
        \__bnvs_gclear:v
      } {
        \__bnvs_n_gremove:v
      }
      { FQ_name }
    }
  } {
    \BNVS_error:n { Invalid~name:~#2 }
  }
\BNVS_DEBUG_log_parse_nn:nn { ... } { ...REMOVE/2... }
\BNVS_DEBUG_log_tl:c { FQ_name }
\BNVS_DEBUG_log_tl:c { id }
  \BNVS_end_tl_set:cv { id_last } { id_last }
}
\BNVS_new:cpn { parse_prepare:N } #1 {
  \tl_set:Nx #1 #1
  \bool_set_false:N \l__bnvs_parse_bool
  \bool_do_until:Nn \l__bnvs_parse_bool {
    \tl_if_in:NnTF #1 {%---[
    ]} {
      \regex_replace_all:nnNF { \[ ([^\]%---)
      ]*%---[(
      ) \] } { { { \1 } } } #1 {
        \bool_set_true:N \l__bnvs_parse_bool
      }
    } {
      \bool_set_true:N \l__bnvs_parse_bool
    }
  }
  \tl_if_in:NnTF #1 {%---[
  ]} {
    \BNVS_error:n { Unbalanced~%---[
    ]}
  } {
    \tl_if_in:NnT #1 { [%---]
    } {
      \BNVS_error:n { Unbalanced~[ %---]
      }
    }
  }
}
\cs_new:Npn \BNVS_end_tl_put_right:cv #1 #2 {
  \BNVS_tl_use:nv {
    \BNVS_end:
    \__bnvs_tl_put_right:cn { #1 }
  } { #2 }
}
\cs_new:Npn \BNVS_end_v_gput:nv #1 {
  \BNVS_tl_use:nv {
    \BNVS_end:
    \__bnvs_v_gput:nn { #1 }
  }
}
\NewDocumentCommand \Beanoves { sm } {
\BNVS_DEBUG_log:x { \token_to_str:N \Beanoves \IfBooleanT {#1} { * }... }
\BNVS_DEBUG_log_arg:nn { IN } { #2 }
  \tl_if_empty:NTF \@currenvir {
    \seq_gput_right:Nn \g__bnvs_def_seq { #2 }
  } {
    \tl_if_eq:NnT \@currenvir { document } {
      \__bnvs_gclear:
    }
    \BNVS_DEBUG_begin:n { Beanoves }
    \__bnvs_tl_clear:c { root }
    \__bnvs_int_zero:c { i }
    \__bnvs_tl_set:cn { a } { #2 }
    \tl_if_eq:NnT \@currenvir { document } {
      \seq_if_empty:NF \g__bnvs_def_seq {
        \__bnvs_tl_put_left:cx { a } {
          \seq_use:Nn \g__bnvs_def_seq , ,
        }
      }
    }
    \__bnvs_parse_prepare:N \l__bnvs_a_tl
\BNVS_DEBUG_log:x { ...\token_to_str:N \Beanoves \IfBooleanT {#1} { * }... }
\BNVS_DEBUG_log_tl:c { a }
    \IfBooleanTF {#1} {
      \__bnvs_provide_on:
    } {
      \__bnvs_provide_off:
    }
    \BNVS_tl_use:nv {
      \keyval_parse:nnn { \__bnvs_parse:n } { \__bnvs_parse:nn }
    } { a }
    \BNVS_end_tl_set:cv { id_last } { id_last }
    \ignorespaces
  }
}
\define@key{beamerframe}{beanoves}{\Beanoves*{#1}}
\makeatletter
\cs_set:Npn \__bnvs@frame < #1 > {
  \BNVS_DEBUG_begin:n { bnvs@frame }
  \__bnvs_tl_clear:c { ans }
  \__bnvs_scan:nNc { #1 } \__bnvs_if_resolve:ncTF { ans }
\BNVS_DEBUG_log:n { bnvs@frame:~#1 }
\BNVS_DEBUG_log_tl:c { ans }
  \BNVS_set:cpn { :n } ##1 { \BNVS_end: \__bnvs_saved@frame < ##1 > }
  \BNVS_tl_use:cv { :n } { ans }
}
\cs_set:Npn \__bnvs@masterdecode #1 {
  \BNVS_DEBUG_begin:n { bnvs@masterdecode }
  \__bnvs_tl_clear:c { ans }
  \__bnvs_scan:nNc { #1 } \__bnvs_if_resolve_queries:ncTF { ans }
\BNVS_DEBUG_log:n { ********************************************* }
\BNVS_DEBUG_log:n { bnvs@masterdecode:~<#1> }
\BNVS_DEBUG_log_tl:c { ans }
  \BNVS_tl_use:nv {
    \BNVS_end:
    \__bnvs_saved@masterdecode
  } { ans }
}
\cs_new:Npn \BeanovesOff {
  \cs_set_eq:NN \beamer@frame \__bnvs_saved@frame
  \cs_set_eq:NN \beamer@masterdecode \__bnvs_saved@masterdecode
}
\cs_new:Npn \BeanovesOn {
  \cs_set_eq:NN \beamer@frame \__bnvs@frame
  \cs_set_eq:NN \beamer@masterdecode \__bnvs@masterdecode
}
\AddToHook{begindocument/before}{
  \cs_if_exist:NTF \beamer@frame {
    \cs_set_eq:NN \__bnvs_saved@frame \beamer@frame
    \cs_set_eq:NN \__bnvs_saved@masterdecode \beamer@masterdecode
  } {
    \cs_set:Npn \__bnvs_saved@frame < #1 > {
      \BNVS_error:n {Missing~package~beamer}
    }
    \cs_set:Npn \__bnvs_saved@masterdecode < #1 > {
      \BNVS_error:n {Missing~package~beamer}
    }
  }
  \BeanovesOn
}
\makeatother
\BNVS_new:cpn { scan_for_query_then_end_return: } {
\BNVS_DEBUG_log_f:ncn { } { scan_for_query_then_end_return: } { }
  \__bnvs_seq_pop_left:ccTF { token } { token } {
    \__bnvs_tl_if_eq:cnTF { token } { ? } {
      \__bnvs_scan_require_open_then_end_return:
    } {
      \__bnvs_tl_put_right:cv { ans } { token }
\BNVS_DEBUG_tl:c { ans }
      \__bnvs_scan_for_query_then_end_return:
    }
  } {
\BNVS_DEBUG_log:n { end~of~query }
    \__bnvs_scan_end_return_true:
  }
}

\BNVS_new:cpn { scan_require_open_then_end_return: } {
\BNVS_DEBUG_log_f:ncn { } { scan_require_open_then_end_return: } { }
  \__bnvs_seq_pop_left:ccTF { token } { token } {
    \str_if_eq:VnTF \l__bnvs_token_tl { ( %)
    } {
      \__bnvs_int_set:cn { } { 1 }
      \__bnvs_tl_clear:c { query }
      \__bnvs_scan_require_close_and_return:
    } {
      \__bnvs_scan_require_open_then_end_return:
    }
  } {
\BNVS_DEBUG_log_f:ncn { } { scan_require_open_then_end_return: } { ...? }
    \BNVS_error:x {Missing~'('%---)
      ~after~a~? }
    \__bnvs_scan_end_return_true:
  }
}
\BNVS_new:cpn { scan_require_close_and_return: } {
\BNVS_DEBUG_log_f:ncn { } { scan_require_close_and_return: } { }
  \__bnvs_seq_pop_left:ccTF { token } { token } {
    \str_case:VnF \l__bnvs_token_tl {
      { ( %---)
      } {
        \__bnvs_int_incr:c { }
        \__bnvs_tl_put_right:cv { query } { token }
\BNVS_DEBUG_tl:c { query }
        \__bnvs_scan_require_close_and_return:
      }
      { %(---
        )
      } {
        \__bnvs_int_decr:c { }
        \int_compare:nNnTF { \__bnvs_int_use:c { } } = 0 {
          \__bnvs_scan_handle_query_then_end_return:
        } {
          \__bnvs_tl_put_right:cv { query } { token }
\BNVS_DEBUG_tl:c { query }
          \__bnvs_scan_require_close_and_return:
        }
      }
    } {
        \__bnvs_tl_put_right:cv { query } { token }
\BNVS_DEBUG_tl:c { query }
      \__bnvs_scan_require_close_and_return:
    }
  } {
    \BNVS_error:x { Missing~%(---
      `)' }
    \__bnvs_tl_put_right:cx { query } {
      \prg_replicate:nn { \l__bnvs_int } {%(---
      )}
    }
\BNVS_DEBUG_tl:c { query }
    \__bnvs_scan_end_return_true:
  }
}
\BNVS_new_conditional:cpnn { scan:nNc } #1 #2 #3 { T, F, TF } {
\BNVS_DEBUG_log_set:cn { scan:nNcTF } {
  \BNVS_DEBUG_log_arg:nn { WHAT } { #1 }
  \BNVS_DEBUG_log_cs:nN { CMD } #2
  \BNVS_DEBUG_log_arg:nc { IN } { #3 }
  \BNVS_DEBUG_tl:c { #3 }
}
\BNVS_DEBUG_log_scan_nNcTF:nn { } { ... }
  \BNVS_DEBUG_begin:n { scan:nNcTF }
  \BNVS_set:cpn { error:x } ##1 {
    \msg_error:nnx { beanoves } { :n }
      { \tl_to_str:n { #1 }:~##1}
  }
  \__bnvs_tl_set:cn { scan } { #1 }
  \__bnvs_tl_clear:c { ans }
  \__bnvs_seq_clear:c { token }
  \regex_split:nnN { } { #1 } \l__bnvs_token_seq
  \BNVS_set:cpn { scan_handle_query_then_end_return: } {
\BNVS_DEBUG_log_f:ncn {} { scan_handle_query_then_end_return: } { }
\BNVS_DEBUG_tl:c { query }
    \BNVS_tl_use:Nv #2 { query } { ans } {
\BNVS_DEBUG_tl:c { query }
\BNVS_DEBUG_tl:c { ans }
      \__bnvs_scan_for_query_then_end_return:
    } {
\BNVS_DEBUG_tl:c { query }
\BNVS_DEBUG_tl:c { ans }
      \BNVS_end_tl_put_right:cv { #3 } { ans }
\BNVS_DEBUG_log_scan_nNcTF:nn { ... } { ...DONE/FALSE }
      \prg_return_false:
    }
  }
  \BNVS_set:cpn { scan_end_return_true: } {
    \BNVS_end_tl_put_right:cv { #3 } { ans }
    \prg_return_true:
  }
  \BNVS_set:cpn { scan_end_return_false: } {
\BNVS_DEBUG_log_f:cn { scan_end_return_false: }
\BNVS_DEBUG_tl:c { ans }
    \BNVS_end_tl_put_right:cv { #3 } { ans }
    \prg_return_false:
  }
  \__bnvs_scan_for_query_then_end_return:
}
\BNVS_new:cpn { scan:nNc } #1 #2 #3 {
  \BNVS_use:c { scan:nNcTF } { #1 } #2 { #3 } {} {}
}
\BNVS_new_conditional:cpnn { if_Fip:ccc } #1 #2 #3 { T, F, TF } {
\BNVS_DEBUG_log_set:cn { if_Fip:ccc } {
  \BNVS_DEBUG_log_tl:c  { #1 }
  \BNVS_DEBUG_log_tl:c  { #2 }
  \BNVS_DEBUG_log_seq:c { #3 }
}
\BNVS_DEBUG_log_if_Fip_ccc:nn { } { ... }
  \BNVS_DEBUG_begin:n { if_Fip:ccc }
  \__bnvs_match_if_once:NvTF \c__bnvs_A_FQ_name_Z_regex { #1 }  {
    \__bnvs_if_match_pop_Fip:cccTF { #1 } { #2 } { #3 } {
\BNVS_DEBUG_log_if_Fip_ccc:nn { } {...ID...}
      \__bnvs_end_Fip_export:ccc { #1 } { #2 } { #3 }
\BNVS_DEBUG_log_if_Fip_ccc:nn {...} {...TRUE}
\BNVS_DEBUG_log_tl:c { path }
      \prg_return_true:
    } {
      \BNVS_end:
\BNVS_DEBUG_log_if_Fip_ccc:nn {...} {...UNREACHABLE}
      \prg_return_false:
    }
  } {
    \BNVS_end:
\BNVS_DEBUG_log_if_Fip_ccc:nn {...} {...FALSE/NOT~A~FQ~NAME}
    \prg_return_false:
  }
}
\quark_new:N \q__bnvs
\BNVS_new:cpn { end_Fip_export:ccc } #1 #2 #3 {
  \exp_args:Nnx
  \use:n {
    \BNVS_tl_use:nv {
      \BNVS_tl_use:cv { end_Fip_export:nnnccc } { #1 }
    } { #2 }
  } { \__bnvs_seq_use:cn { #3 } { \q__bnvs } } { #1 } { #2 } { #3 }
}
\BNVS_new:cpn { end_Fip_export:nnnccc } #1 #2 #3 #4 #5 #6 {
  \BNVS_end:
  \tl_if_empty:nTF { #2 } {
    \__bnvs_tl_set:cn { #4 } { #1 }
    \__bnvs_tl_put_left:cv { #4 } { #5 }
  } {
    \__bnvs_tl_set:cn { #4 } { #1 }
    \__bnvs_tl_set:cn { #5 } { #2 }
  }
  \__bnvs_seq_set_split:cnn { #6 } { \q__bnvs } { #3 }
  \__bnvs_seq_remove_all:cn { #6 } { }
}
\BNVS_new_conditional:cpnn { if_match_pop_Fip:ccc } #1 #2 #3 { TF } {
  \__bnvs_if_match_pop_left:cTF { #1 } {
    \__bnvs_if_match_pop_left:cTF { #1 } {
      \__bnvs_if_match_pop_left:cTF { #2 } {
        \__bnvs_if_match_pop_left:cTF { #3 } {
          \__bnvs_seq_set_split:cnv { #3 } { . } { #3 }
          \__bnvs_seq_remove_all:cn { #3 } { }
          \prg_return_true:
        } {
          \prg_return_false:
        }
      } {
        \prg_return_false:
      }
    } {
      \prg_return_false:
    }
  } {
    \prg_return_false:
  }
}
\BNVS_new:cpn { if_resolve_Fip_x_path:TFF } #1 #2 {
  \__bnvs_if_resolve_Fip_x_path:TF {
    \__bnvs_seq_if_empty:cTF { path } { #1 } { #2 }
  }
}
\BNVS_new:cpn { end_Fip_export: } {
  \__bnvs_end_Fip_export:ccc { FQ_name } { id } { path }
\BNVS_DEBUG_log_f:ncn {} { end_Fip_export: } {}
\BNVS_DEBUG_log_tl:c { FQ_name }
\BNVS_DEBUG_log_tl:c { id }
\BNVS_DEBUG_log_seq:c { path }
}
\BNVS_new:cpn { seq_merge:cc } #1 #2 {
  \__bnvs_seq_if_empty:cF { #2 } {
    \__bnvs_seq_set_split:cnx { #1 } { \q__bnvs } {
      \__bnvs_seq_use:cn { #1 } { \q__bnvs }
      \exp_not:n { \q__bnvs }
      \__bnvs_seq_use:cn { #2 } { \q__bnvs }
    }
    \__bnvs_seq_remove_all:cn { #1 } { }
  }
}
\BNVS_new:cpn { if_resolve_Fip_x_path:nFF } #1 #2 #3 {
  \__bnvs_if_get:nvcTF #1 { a } { b } {
\BNVS_DEBUG_log_if_resolve_Fip_x_path_TF:nn { ... } { ...RESOLUTION/#1... }
\BNVS_DEBUG_log_tl:c { a }
\BNVS_DEBUG_log_seq:c { path_head }
    \__bnvs_if_Fip:cccTF { b } { id } { path } {
      \__bnvs_tl_set_eq:cc { FQ_name } { b }
      \__bnvs_seq_merge:cc { path } { path_tail }
      \__bnvs_seq_clear:c { path_tail }
      \__bnvs_seq_set_eq:cc { path_head } { path }
      \__bnvs_if_resolve_Fip_x_path_loop_or_end_return:
    } {
      \__bnvs_seq_if_empty:cTF { path_tail } {
        \__bnvs_tl_set_eq:cc { FQ_name } { b }
        \__bnvs_seq_clear:c { path }
        \__bnvs_seq_clear:c { path_head }
        \__bnvs_if_resolve_Fip_x_path_loop_or_end_return:
      } {
        #2
      }
    }
  } {
    #3
  }
}
\BNVS_new:cpn { if_resolve_Fip_x_path_VAL_loop_or_end_return:F } #1 {
  \__bnvs_if_resolve_Fip_x_path:nFF V { #1 } {
    \__bnvs_if_resolve_Fip_x_path:nFF A { #1 } {
      \__bnvs_if_resolve_Fip_x_path:nFF L { #1 } { #1 }
    }
  }
}
\BNVS_new:cpn { if_resolve_Fip_x_path_end_return_true: } {
  \__bnvs_seq_pop_left:ccTF { path } { a } {
    \__bnvs_seq_if_empty:cTF { path } {
      \__bnvs_tl_clear:c { b }
      \__bnvs_index_can:vTF { FQ_name } {
        \__bnvs_if_append_index:vvcTF { FQ_name } { a } { b } {
          \__bnvs_tl_set:cv { FQ_name } { b }
        } {
          \__bnvs_tl_set:cv { FQ_name } { a }
        }
      } {
        \__bnvs_tl_set:cv { FQ_name } { a }
      }
    } {
      \BNVS_error:x { Path~too~long~.\BNVS_tl_use:c { a }
        .\__bnvs_seq_use:cn { path } . }
    }
  } {
    \__bnvs_if_resolve_V:vcT { FQ_name } { FQ_name } {}
  }
  \__bnvs_end_Fip_export:ccc { FQ_name } { id } { path }
\BNVS_DEBUG_log_if_resolve_Fip_x_path_TF:nn { ... } { ...TRUE }
  \prg_return_true:
}
\BNVS_new_conditional:cpnn { if_resolve_Fip_x_path: } { T, F, TF } {
\BNVS_DEBUG_log_set:cn { if_resolve_Fip_x_path:TF } {
  \BNVS_DEBUG_log_tl:c { FQ_name }
  \BNVS_DEBUG_log_tl:c { id }
  \BNVS_DEBUG_log_seq:c { path }
}
\BNVS_DEBUG_log_if_resolve_Fip_x_path_TF:nn { } { ... }
  \BNVS_DEBUG_begin:n { if_resolve_Fip_x_path: }
  \__bnvs_seq_set_eq:cc { path_head } { path }
  \__bnvs_seq_clear:c { path_tail }
  \__bnvs_if_resolve_Fip_x_path_loop_or_end_return:
}
\BNVS_new:cpn { if_resolve_Fip_x_path_loop_or_end_return: } {
  \__bnvs_if_call:TF {
\BNVS_DEBUG_log_if_resolve_Fip_x_path_TF:nn { ... }  { ...LOOP... }
    \__bnvs_tl_set_eq:cc { a } { FQ_name }
    \__bnvs_seq_if_empty:cTF { path_head } {
      \__bnvs_if_resolve_Fip_x_path_VAL_loop_or_end_return:F {
        \__bnvs_if_resolve_Fip_x_path_end_return_true:
      }
    } {
      \__bnvs_tl_put_right:cx { a } { . \__bnvs_seq_use:cn { path_head } . }
      \__bnvs_if_resolve_Fip_x_path_VAL_loop_or_end_return:F {
        \__bnvs_seq_pop_right:ccT { path_head } { c } {
          \__bnvs_seq_put_left:cv { path_tail } { c }
        }
        \__bnvs_if_resolve_Fip_x_path_loop_or_end_return:
      }
    }
  } {
\BNVS_DEBUG_log_if_resolve_Fip_x_path_TF:nn { ... } { ...FALSE/TOO~MANY~CALLS }
    \BNVS_end:
    \prg_return_false:
  }
}
\BNVS_new:cpn { if_resolve_Fip_n_path_or_end_return:nF } #1 #2 {
\BNVS_DEBUG_log_if_resolve_Fip_n_path_TF:nn { ... } { ...RESOLUTION/#1... }
\BNVS_DEBUG_log_tl:c { a }
\BNVS_DEBUG_log_seq:c { path_head }
  \__bnvs_if_get:nvcTF { #1 } { a } { b } {
    \__bnvs_if_Fip:cccTF { b } { id } { path } {
      \__bnvs_tl_set_eq:cc { FQ_name } { b }
      \__bnvs_seq_merge:cc { path } { path_tail }
      \__bnvs_seq_set_eq:cc { path_head } { path }
      \__bnvs_seq_clear:c { path_tail }
      \__bnvs_if_resolve_Fip_n_path_loop_or_end_return:
    } {
      \__bnvs_seq_pop_right:ccTF { path_head } { c } {
        \__bnvs_seq_put_left:cv { path_tail } { c }
\BNVS_DEBUG_log_if_resolve_Fip_n_path_TF:nn { ... } { ...next~trial... }
\BNVS_DEBUG_log_seq:c { path_head }
\BNVS_DEBUG_log_seq:c { path_tail }
        \__bnvs_if_resolve_Fip_n_path_loop_or_end_return:
      } {
\BNVS_DEBUG_log_if_resolve_Fip_n_path_TF:nn { ... } { ...Unknown~FQ~name~... }
\BNVS_DEBUG_log_tl:c { a }
\BNVS_DEBUG_log_seq:c { path_head }
        \__bnvs_if_resolve_Fip_n_path_end_return_true:
      }
    }
  } {
    #2
  }
}
\BNVS_new:cpn { if_resolve_Fip_n_path_VAL_loop_or_end_return: } {
\BNVS_DEBUG_log_if_resolve_Fip_n_path_TF:nn { ... } { ...VAL... }
\BNVS_DEBUG_log_tl:c { b }
\BNVS_DEBUG_log_seq:c { path_tail }
\BNVS_DEBUG_log_tl:c { a }
\BNVS_DEBUG_log_seq:c { path_head }
  \__bnvs_if_resolve_Fip_n_path_or_end_return:nF V {
    \__bnvs_if_resolve_Fip_n_path_or_end_return:nF A {
      \__bnvs_if_resolve_Fip_n_path_or_end_return:nF L {
        \__bnvs_seq_pop_right:ccTF { path_head } { c } {
          \__bnvs_seq_put_left:cv { path_tail } { c }
          \__bnvs_if_resolve_Fip_n_path_loop_or_end_return:
        } {
\BNVS_DEBUG_log_if_resolve_Fip_n_path_TF:nn { ... } { ...Unknown~name... }
          \__bnvs_if_resolve_Fip_n_path_end_return_true:
        }
      }
    }
  }
}
\BNVS_new:cpn { if_resolve_Fip_n_path_end_return_false: } {
  \BNVS_end:
\BNVS_DEBUG_log_if_resolve_Fip_n_path_TF:nn { ... } { ...FALSE }
  \prg_return_false:
}
\BNVS_new:cpn { if_resolve_Fip_n_path_end_return_true: } {
\BNVS_DEBUG_log_if_resolve_Fip_n_path_TF:nn { ... } { ...TRUE }
  \__bnvs_end_Fip_export:ccc { FQ_name } { id } { path }
  \prg_return_true:
}

\BNVS_new:cpn { if_resolve_Fip_n_path_loop_or_end_return: } {
  \__bnvs_if_call:TF {
\BNVS_DEBUG_log_if_resolve_Fip_n_path_TF:nn { ... } { ...LOOP... }
    \__bnvs_tl_set_eq:cc { a } { FQ_name }
    \__bnvs_seq_if_empty:cTF { path_head } {
      \__bnvs_seq_if_empty:cTF { path_tail } {
        \__bnvs_if_resolve_Fip_n_path_end_return_true:
      } {
        \__bnvs_if_resolve_Fip_n_path_VAL_loop_or_end_return:
      }
    } {
      \__bnvs_tl_put_right:cx { a } { . \__bnvs_seq_use:cn { path_head } . }
      \__bnvs_if_resolve_Fip_n_path_VAL_loop_or_end_return:
    }
  } {
    \BNVS_end:
\BNVS_DEBUG_log_if_resolve_Fip_n_path_TF:nn { ... } { ...FALSE/TOO~MANY~CALLS }
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { if_resolve_Fip_n_path: } { TF } {
\BNVS_DEBUG_log_set:cn { if_resolve_Fip_n_path:TF } {
  \BNVS_DEBUG_tl:c { FQ_name }
  \BNVS_DEBUG_tl:c { id }
  \BNVS_DEBUG_log_seq:c { path }
  \BNVS_DEBUG_tl:c { path }
}
\BNVS_DEBUG_log_if_resolve_Fip_n_path_TF:nn { } { ... }
  \BNVS_DEBUG_begin:n { if_resolve_Fip_n_path: }
  \__bnvs_seq_set_eq:cc { path_head } { path }
  \__bnvs_seq_clear:c { path_tail }
  \__bnvs_tl_clear:c { a }
  \__bnvs_if_resolve_Fip_n_path_loop_or_end_return:
}
\BNVS_new:cpn { round_ans:n } #1 {
\BNVS_DEBUG_log_f:ncn { } { round_ans:n } { }
\BNVS_DEBUG_log_arg:nn { IN } { #1 }
  \tl_if_empty:nTF { #1 } {
    \__bnvs_tl_put_right:cn { ans } { 0 }
\BNVS_DEBUG_log:x { EMPTY }
  } {
    \__bnvs_tl_put_right:cx { ans } { \fp_eval:n { round(#1) } }
  }
\BNVS_DEBUG_log_tl:nc { OUT } { ans }
}
\BNVS_new:cpn { round:N } #1 {
\BNVS_DEBUG_log_f:ncn { } { round:N } { }
\BNVS_DEBUG_log:x { \token_to_str:N #1 -> / \tl_to_str:V #1 / }
  \tl_if_empty:NTF #1 {
    \tl_set:Nn #1 { 0 }
\BNVS_DEBUG_log:n { EMPTY }
  } {
    \tl_set:Nx #1 { \fp_eval:n { round(#1) } }
  }
\BNVS_DEBUG_log:x { OUT -> / \tl_to_str:V #1 / }
}
\BNVS_new:cpn { round:c } {
  \BNVS_tl_use:Nc \__bnvs_round:N
}
\cs_new:Npn \BNVS_end_return_false: {
  \BNVS_end:
  \prg_return_false:
}
\cs_new:Npn \BNVS_end_return_false:x #1 {
  \BNVS_error:x { #1 }
  \BNVS_end_return_false:
}
\BNVS_new_conditional:cpnn { if_assign_value:nn } #1 #2 { T, F, TF } {
\BNVS_DEBUG_log_set:cnnc { if_assign_value:nn } { FQ_NAME } { #1 } { #2 }
\BNVS_DEBUG_log_if_assign_value_nn:nn { } { ... }
  \BNVS_DEBUG_begin:n { if_assign_value:nnTF }
  \__bnvs_if_resolve:ncTF { #2 } { a } {
    \__bnvs_gclear_all:n { #1 }
    \__bnvs_gput:nnv V { #1 } { a }
    \BNVS_end:
    \prg_return_true:
  } {
    \BNVS_end:
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { if_assign_value:nv } #1 #2 { T, F, TF } {
\BNVS_tl_use:nv {
  \BNVS_use:c { if_assign_value:nnTF } { #1 }
} { #2 } {
  \prg_return_true:
} {
  \prg_return_false:
}
}
\BNVS_new_conditional:cpnn { if_assign_value:vv } #1 #2 { T, F, TF } {
\BNVS_tl_use:nv {
  \BNVS_tl_use:cv { if_assign_value:nnTF } { #1 }
} { #2 } {
  \prg_return_true:
} {
  \prg_return_false:
}
}
\BNVS_new:cpn { if_resolve_V_return:nnnT } #1 #2 #3 #4 {
  \__bnvs_tl_if_empty:cTF { #3 } {
\BNVS_DEBUG_log_if_resolve_V_ncTF:nn { ... } { ...FALSE/CACHED }
    \prg_return_false:
  } {
    \__bnvs_cache_gput:nnv V { #2 } { #3 }
    #4
\BNVS_DEBUG_log_if_resolve_V_ncTF:nn { ... } { ...TRUE/#1 }
    \prg_return_true:
  }
}
\BNVS_new_conditional:cpnn { quark_if_nil:c } #1 { T, F, TF } {
  \BNVS_tl_use:Nc \quark_if_nil:NTF { #1 } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { quark_if_no_value:c } #1 { T, F, TF } {
  \BNVS_tl_use:Nc \quark_if_no_value:NTF { #1 } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\makeatletter
\BNVS_new_conditional:cpnn { if_resolve_V:nc } #1 #2 { T, F, TF } {
\BNVS_DEBUG_log_set:cnnc { if_resolve_V:ncTF } { FQ_NAME } { #1 } { #2 }
\BNVS_DEBUG_log_if_resolve_V_ncTF:nn { } { ... }
  \__bnvs_cache_if_get:nncTF V { #1 } { #2 } {
\BNVS_DEBUG_log_if_resolve_V_ncTF:nn { ... } { ...TRUE/CACHED }
    \prg_return_true:
  } {
    \__bnvs_if_get:nncTF V { #1 } { #2 } {
      \__bnvs_quark_if_nil:cTF { #2 } {
        \__bnvs_gput:nnn V { #1 } { \q_no_value }
        \__bnvs_if_resolve_first:ncTF { #1 } { #2 } {
          \__bnvs_if_resolve_V_return:nnnT A { #1 } { #2 } {
            \__bnvs_gput:nnn V { #1 } { \q_nil }
          }
        } {
          \__bnvs_if_resolve_last:ncTF { #1 } { #2 } {
            \__bnvs_if_resolve_V_return:nnnT Z { #1 } { #2 } {
              \__bnvs_gput:nnn V { #1 } { \q_nil }
            }
          } {
\BNVS_DEBUG_log_if_resolve_V_ncTF:nn { ... } { ...FALSE/#1 }
            \__bnvs_gput:nnn V { #1 } { \q_nil }
            \prg_return_false:
          }
        }
      } {
        \__bnvs_quark_if_no_value:cTF { #2 } {
          \BNVS_fatal:n {Circular~definition:~#1}
        } {
          \__bnvs_if_resolve:vcTF { #2 } { #2 } {
            \__bnvs_if_resolve_V_return:nnnT V { #1 } { #2 } {
              \__bnvs_gput:nnn V { #1 } { \q_nil }
            }
          } {
\BNVS_DEBUG_log_if_resolve_V_ncTF:nn { ... } { ...FALSE/RESOLVE }
            \__bnvs_gput:nnn V { #1 } { \q_nil }
            \prg_return_false:
          }
        }
      }
    } {
      \str_if_eq:nnTF { #1 } { ?!pauses } {
        \cs_if_exist:NTF \c@beamerpauses {
          \exp_args:Nnx \__bnvs_tl_set:cn { #2 } { \the\c@beamerpauses }
          \prg_return_true:
        } {
\BNVS_DEBUG_log_f:ncn { ... } { if_resolve_V:ncTF } { ...NO~PAUSES }
          \prg_return_false:
        }
      } {
\BeanovesLogGProp
\BNVS_DEBUG_log_f:ncn { ... } { if_resolve_V:ncTF } { ...FALSE/RESOLVE }
\BNVS_DEBUG_log_arg:nnnc { UNKNOWN~KEY } { #1 } { IN } { #2 }
        \prg_return_false:
      }
    }
  }
}
\makeatother
\BNVS_new_conditional_vc:cn { if_resolve_V } { T, F, TF }
\BNVS_new:cpn { end_put_right:vc } #1 #2 {
  \BNVS_tl_use:nv {
    \BNVS_end:
    \__bnvs_tl_put_right:cn { #2 }
  } { #1 }
}
\BNVS_new_conditional:cpnn { if_append_V:nc } #1 #2 { T, F, TF } {
\BNVS_DEBUG_log_set:cnnc { if_append_V:ncTF } { QUERY } { #1 } { #2 }
\BNVS_DEBUG_log_if_append_V_ncTF:nn { } { ... }
  \BNVS_DEBUG_begin:n { if_append_V:nc }
  \__bnvs_if_resolve_V:ncTF { #1 } { #2 } {
    \BNVS_end_tl_put_right:cv { #2 } { #2 }
\BNVS_DEBUG_log_if_append_V_ncTF:nn { ... } { ...TRUE }
    \prg_return_true:
  } {
\BNVS_DEBUG_log_if_append_V_ncTF:nn { ... } { ...TRUE(FAILED) }
    \BNVS_end:
    \prg_return_true:
  }
}
\BNVS_new_conditional_vc:cn { if_append_V } { T, F, TF }
\BNVS_new_conditional:cpnn { if_resolve_first:nc } #1 #2 { T, F, TF } {
\BNVS_DEBUG_log_set:cnnc { if_resolve_first:ncTF } { FQ_NAME } { #1 } { #2 }
\BNVS_DEBUG_log_if_resolve_first_ncTF:nn { } { ... }
  \__bnvs_cache_if_get:nncTF A { #1 } { #2 } {
\BNVS_DEBUG_log_if_resolve_first_ncTF:nn { ... } { ...TRUE/CACHED }
    \prg_return_true:
  } {
    \__bnvs_if_get:nncTF A { #1 } { #2 } {
      \__bnvs_quark_if_nil:cTF { #2 } {
        \__bnvs_gput:nnn A { #1 } { \q_no_value }
\BNVS_DEBUG_log_if_resolve_first_ncTF:nn { ... } { ...BUILD... }
        \__bnvs_if_resolve_last:ncTF { #1 } { #2 } {
          \__bnvs_tl_put_right:cn { #2 } { - }
          \__bnvs_if_append_length:ncTF { #1 } { #2 } {
            \__bnvs_tl_put_right:cn { #2 } { + 1 }
            \__bnvs_round:c { #2 }
            \__bnvs_tl_if_empty:cTF { #2 } {
\BNVS_DEBUG_log_if_resolve_first_ncTF:nn { ... } { ...FALSE/A }
              \__bnvs_gput:nnn A { #1 } { \q_nil }
              \prg_return_false:
            } {
\BNVS_DEBUG_log_if_resolve_first_ncTF:nn { ... } { ...TRUE }
              \__bnvs_gput:nnn A { #1 } { \q_nil }
              \__bnvs_cache_gput:nnv A { #1 } { #2 }
              \prg_return_true:
            }
          } {
            \BNVS_error:n {
Unavailable~length~for~#1~(\token_to_str:N\__bnvs_if_resolve_first:ncTF/2) }
            \__bnvs_gput:nnn A { #1 } { \q_nil }
            \prg_return_false:
          }
        } {
          \BNVS_error:n {
Unavailable~last~for~#1~(\token_to_str:N\__bnvs_if_resolve_first:ncTF/1) }
          \__bnvs_gput:nnn A { #1 } { \q_nil }
          \prg_return_false:
        }
      } {
        \__bnvs_quark_if_no_value:cTF { a } {
          \BNVS_fatal:n {Circular~definition:~#1}
        } {
          \__bnvs_if_resolve:vcTF { #2 } { #2 } {
            \__bnvs_cache_gput:nnv A { #1 } { #2 }
\BNVS_DEBUG_log_if_resolve_first_ncTF:nn { ... } { ...TRUE }
            \prg_return_true:
          } {
\BNVS_DEBUG_log_if_resolve_first_ncTF:nn { ... } { ...FALSE/B }
            \prg_return_false:
          }
        }
      }
    } {
\BeanovesLogGProp
\BNVS_DEBUG_log_if_resolve_first_ncTF:nn { ... } { ...FALSE/C^^J Unknown~KEY = / #1 / A / }
      \prg_return_false:
    }
  }
}
\BNVS_new_conditional_vc:cn { if_resolve_first } { T, F, TF }
\BNVS_new_conditional:cpnn { if_append_first:nc } #1 #2 { T, F, TF } {
\BNVS_DEBUG_log_set:cnnc { if_append_first:ncTF } { FQ_NAME } { #1 } { #2 }
\BNVS_DEBUG_log_if_append_first_ncTF:nn { } { ... }
  \BNVS_DEBUG_begin:n { if_append_first:nc }
  \__bnvs_if_resolve_first:ncTF { #1 } { #2 } {
    \BNVS_end_tl_put_right:cv { #2 } { #2 }
\BNVS_DEBUG_log_if_append_first_ncTF:nn { ... } { ...TRUE }
    \prg_return_true:
  } {
\BNVS_DEBUG_log_if_append_first_ncTF:nn { ... } { ...FALSE }
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { if_resolve_last:nc } #1 #2 { T, F, TF } {
\BNVS_DEBUG_log_set:cnnc { if_resolve_last:ncTF } { FQ_NAME } { #1 } { #2 }
\BNVS_DEBUG_log_if_resolve_last_ncTF:nn { } { ... }
  \__bnvs_cache_if_get:nncTF Z { #1 } { #2 } {
\BNVS_DEBUG_log_if_resolve_last_ncTF:nn { ... } { ...TRUE/CACHED }
    \prg_return_true:
  }  {
    \__bnvs_if_get:nncTF Z { #1 } { #2 } {
      \__bnvs_quark_if_nil:cTF { #2 } {
        \__bnvs_gput:nnn Z { #1 } { \q_no_value }
\BNVS_DEBUG_log_if_resolve_last_ncTF:nn { ... } { ...A+L... }
        \__bnvs_if_resolve_first:ncTF { #1 } { #2 } {
          \__bnvs_tl_put_right:cn { #2 } { + }
          \__bnvs_if_append_length:ncTF { #1 } { #2 } {
            \__bnvs_tl_put_right:cn { #2 } { - 1 }
            \__bnvs_round:c { #2 }
            \__bnvs_cache_gput:nnv Z { #1 } { #2 }
\BNVS_DEBUG_log_if_resolve_last_ncTF:nn { ... } { ...TRUE/A }
            \__bnvs_gput:nnn Z { #1 } { \q_nil }
            \prg_return_true:
          } {
            \BNVS_error:x {
 Unavailable~length~for~#1~(\token_to_str:N \__bnvs_if_resolve_last:ncTF/1) }
            \__bnvs_gput:nnn Z { #1 } { \q_nil }
            \prg_return_false:
          }
        } {
          \BNVS_error:x {
Unavailable~first~for~#1~(\token_to_str:N \__bnvs_if_resolve_last:ncTF/1) }
          \__bnvs_gput:nnn Z { #1 } { \q_nil }
          \prg_return_false:
        }
      } {
        \__bnvs_quark_if_no_value:cTF { #2 } {
          \BNVS_fatal:n {Circular~definition:~#1}
        } {
          \__bnvs_if_resolve:vcTF { #2 } { #2 } {
            \__bnvs_cache_gput:nnv Z { #1 } { #2 }
\BNVS_DEBUG_log_if_resolve_last_ncTF:nn { ... } { ...TRUE/B }
            \prg_return_true:
          } {
\BNVS_DEBUG_log_if_resolve_last_ncTF:nn { ... } { ...FALSE/A }
            \prg_return_false:
          }
        }
      }
    } {
\BNVS_DEBUG_log_if_resolve_last_ncTF:nn { ... } { ...FALSE/B }
\BNVS_DEBUG_log_tl:c { #2 }
\BNVS_DEBUG_log_gprop:n {}
      \prg_return_false:
    }
  }
}
\BNVS_new_conditional_vc:cn { if_resolve_last } { T, F, TF }
\BNVS_new_conditional:cpnn { if_append_last:nc } #1 #2 { T, F, TF } {
\BNVS_DEBUG_log_set:cnnc { if_append_last:ncTF } { FQ_NAME } { #1 } { #2 }
\BNVS_DEBUG_log_if_append_last_ncTF:nn { } { ... }
  \BNVS_DEBUG_begin:n { if_append_last:ncTF }
  \__bnvs_if_resolve_last:ncTF { #1 } { #2 } {
    \BNVS_end_tl_put_right:cv { #2 } { #2 }
\BNVS_DEBUG_log_if_append_last_ncTF:nn { ... } { ...TRUE }
    \prg_return_true:
  } {
\BNVS_DEBUG_log_if_append_last_ncTF:nn { ... } { ...FALSE }
    \BNVS_end:
    \prg_return_false:
  }
}
\BNVS_new_conditional_vc:cn { if_append_last } { T, F, TF }
\BNVS_new_conditional:cpnn { if_resolve_length:nc } #1 #2 { T, F, TF } {
\BNVS_DEBUG_log_set:cnnc { if_resolve_length:ncTF } { FQ_NAME } { #1 } { #2 }
\BNVS_DEBUG_log_if_resolve_length_ncTF:nn { } { ... }
  \__bnvs_cache_if_get:nncTF L { #1 } { #2 } {
\BNVS_DEBUG_log_if_resolve_length_ncTF:nn { } { ...TRUE/CACHED }
    \prg_return_true:
  } {
    \__bnvs_if_get:nncTF L { #1 } { #2 } {
      \__bnvs_quark_if_nil:cTF { #2 } {
        \__bnvs_gput:nnn L { #1 } { \q_no_value }
\BNVS_DEBUG_log_if_resolve_length_ncTF:nn { ... } { ...BUILD... }
        \__bnvs_if_resolve_last:ncTF { #1 } { #2 } {
          \__bnvs_tl_put_right:cn { #2 } { - }
          \__bnvs_if_append_first:ncTF { #1 } { #2 } {
            \__bnvs_tl_put_right:cn { #2 } { + 1 }
            \__bnvs_round:c { #2 }
            \__bnvs_gput:nnn L { #1 } { \q_nil }
            \__bnvs_cache_gput:nnv L { #1 } { #2 }
\BNVS_DEBUG_log_if_resolve_length_ncTF:nn { ... } { ...TRUE }
            \prg_return_true:
          } {
            \BNVS_error:n {
Unavailable~first~for~#1~(\__bnvs_if_resolve_length:ncTF/2) }
            \return_false:
          }
        } {
          \BNVS_error:n {
Unavailable~last~for~#1~(\__bnvs_if_resolve_length:ncTF/1) }
          \return_false:
        }
      } {
        \__bnvs_quark_if_no_value:cTF { #2 } {
          \BNVS_fatal:n {Circular~definition:~#1}
        } {
          \__bnvs_if_resolve:vcTF { #2 } { #2 } {
            \__bnvs_cache_gput:nnv L { #1 } { #2 }
\BNVS_DEBUG_log_if_resolve_length_ncTF:nn { ... } { ...TRUE }
            \prg_return_true:
          } {
\BNVS_DEBUG_log_if_resolve_length_ncTF:nn { ... } { ...FALSE/A }
            \prg_return_false:
          }
        }
      }
    } {
\BNVS_DEBUG_log_if_resolve_length_ncTF:nn { ... } { ...FALSE/B }
      \prg_return_false:
    }
  }
}
\BNVS_new_conditional_vc:cn { if_resolve_length } { T, F, TF }
\BNVS_new_conditional:cpnn { if_append_length:nc } #1 #2 { T, F, TF } {
\BNVS_DEBUG_log_set:cnnc { if_append_length:ncTF } { FQ_NAME } { #1 } { #2 }
\BNVS_DEBUG_log_if_append_length_ncTF:nn { } { ... }
  \BNVS_DEBUG_begin:n { if_append_length:nc }
  \__bnvs_if_resolve_length:ncTF { #1 } { #2 } {
    \BNVS_end_tl_put_right:cv { #2 } { #2 }
\BNVS_DEBUG_log_if_append_length_ncTF:nn { ... } { ...TRUE/CACHED }
    \prg_return_true:
  } {
\BNVS_DEBUG_log_if_append_length_ncTF:nn { ... } { ...FALSE }
    \prg_return_false:
  }
}
\BNVS_new_conditional_vc:cn { if_append_length } { T, F, TF }
\BNVS_new_conditional:cpnn { if_append_range:nc } #1 #2 { T, F, TF } {
\BNVS_DEBUG_log_set:cnnc { if_append_range:ncTF } { FQ_NAME } { #1 } { #2 }
\BNVS_DEBUG_log_if_append_range_ncTF:nn { } { ... }
  \BNVS_DEBUG_begin:n { if_append_range:nc }
  \__bnvs_if_resolve_first:ncTF { #1 } { a } {
    \BNVS_tl_use:Nv \int_compare:nNnT { a } < 0 {
      \__bnvs_tl_set:cn { a } { 0 }
    }
    \__bnvs_if_resolve_last:ncTF { #1 } { b } {
      \BNVS_tl_use:Nv \int_compare:nNnT { b } < 0 {
        \__bnvs_tl_set:cn { b } { 0 }
      }
      \__bnvs_tl_put_right:cn { a } { - }
      \__bnvs_tl_put_right:cv { a } { b }
      \BNVS_end_tl_put_right:cv { #2 } { a }
\BNVS_DEBUG_log_if_append_range_ncTF:nn { ... } { ...TRUE/A-Z }
      \prg_return_true:
    } {
      \BNVS_end_tl_put_right:cv { #2 } { a }
      \__bnvs_tl_put_right:cn { #2 } { - }
\BNVS_DEBUG_log_if_append_range_ncTF:nn { ... } { ...TRUE/A- }
      \prg_return_true:
    }
  } {
    \__bnvs_if_resolve_last:ncTF { #1 } { b } {
      \BNVS_tl_use:Nv \int_compare:nNnT { b } < 0 {
        \__bnvs_tl_set:cn { b } { 0 }
      }
      \__bnvs_tl_put_left:cn { b } { - }
      \BNVS_end_tl_put_right:cv { #2 } { b }
\BNVS_DEBUG_log_if_append_range_ncTF:nn { ... } { ...TRUE/-Z }
      \prg_return_true:
    } {
      \__bnvs_if_resolve_V:ncTF { #1 } { b } {
      \BNVS_tl_use:Nv \int_compare:nNnT { b } < 0 {
        \__bnvs_tl_set:cn { b } { 0 }
      }
        \BNVS_end_tl_put_right:cv { #2 } { b }
        \__bnvs_tl_put_right:cn { #2 } { - }
\BNVS_DEBUG_log_if_append_range_ncTF:nn { ... } { ...TRUE/V }
        \prg_return_true:
      } {
\BNVS_DEBUG_log_if_append_range_ncTF:nn { ... } { ...FALSE }
        \BNVS_end:
        \prg_return_false:
      }
    }
  }
}
\BNVS_new_conditional_vc:cn { if_append_range } { T, F, TF }
\BNVS_new_conditional:cpnn { if_resolve_range:nc } #1 #2 { T, F, TF } {
\BNVS_DEBUG_log_set:cnnc { if_resolve_range_ncTF } { FQ_NAME } { #1 } { #2 }
\BNVS_DEBUG_log_if_resolve_range_ncTF:nn { } { ... }
  \__bnvs_tl_clear:c { #2 }
  \__bnvs_if_append_range:ncTF { #1 } { #2 } {
\BNVS_DEBUG_log_if_resolve_range_ncTF:nn { ... } { ...TRUE }
    \prg_return_true:
  } {
\BNVS_DEBUG_log_if_resolve_range_ncTF:nn { ... } { ...FALSE }
    \prg_return_false:
  }
}
\BNVS_new_conditional_vc:cn { if_resolve_range } { T, F, TF }
\BNVS_new_conditional:cpnn { if_resolve_previous:nc } #1 #2 { T, F, TF } {
\BNVS_DEBUG_log_set:cnnc { if_resolve_previous:ncTF } { FQ_NAME } { #1 } { #2 }
\BNVS_DEBUG_log_if_resolve_previous_ncTF:nn { } { ... }
  \__bnvs_cache_if_get:nncTF P { #1 } { #2 } {
\BNVS_DEBUG_log_if_resolve_previous_ncTF:nn { ... } { ...TRUE/CACHED }
    \prg_return_true:
  } {
    \__bnvs_if_resolve_first:ncTF { #1 } { #2 } {
      \__bnvs_tl_put_right:cn { #2 } { -1 }
      \__bnvs_round:c { #2 }
      \__bnvs_cache_gput:nnv P { #1 } { #2 }
\BNVS_DEBUG_log_if_resolve_previous_ncTF:nn { ... } { ...TRUE }
      \prg_return_true:
    } {
\BNVS_DEBUG_log_if_resolve_previous_ncTF:nn { ... } { ...FALSE }
      \prg_return_false:
    }
  }
}
\BNVS_new_conditional_vc:cn { if_resolve_previous } { T, F, TF }
\BNVS_new_conditional:cpnn { if_append_previous:nc } #1 #2 { T, F, TF } {
\BNVS_DEBUG_log_set:cnnc { if_append_previous:ncTF } { FQ_NAME } { #1 } { #2 }
\BNVS_DEBUG_log_if_append_previous_ncTF:nn { } { ... }
  \BNVS_DEBUG_begin:n { if_append_previous:nc }
  \__bnvs_if_resolve_previous:ncTF { #1 } { #2 } {
    \BNVS_end_tl_put_right:cv { #2 } { #2 }
\BNVS_DEBUG_log_if_append_previous_ncTF:nn { ... } { ...TRUE }
    \prg_return_true:
  } {
\BNVS_DEBUG_log_if_append_previous_ncTF:nn { ... } { ...FALSE }
    \BNVS_end:
    \prg_return_false:
  }
}
\BNVS_new_conditional_vc:cn { if_append_previous } { T, F, TF }
\BNVS_new_conditional:cpnn { if_resolve_next:nc } #1 #2 { T, F, TF } {
\BNVS_DEBUG_log_set:cnnc { if_resolve_next:ncTF } { FQ_NAME } { #1 } { #2 }
\BNVS_DEBUG_log_if_resolve_next_ncTF:nn { } { ... }
  \__bnvs_cache_if_get:nncTF N { #1 } { #2 } {
\BNVS_DEBUG_log_if_resolve_next_ncTF:nn { ... } { ...TRUE/CACHED }
    \prg_return_true:
  } {
    \__bnvs_if_resolve_last:ncTF { #1 } { #2 } {
      \__bnvs_tl_put_right:cn { #2 } { +1 }
      \__bnvs_round:c { #2 }
      \__bnvs_cache_gput:nnv N { #1 } { #2 }
\BNVS_DEBUG_log_if_resolve_next_ncTF:nn { ... } { ...TRUE }
      \prg_return_true:
    } {
\BNVS_DEBUG_log_if_resolve_next_ncTF:nn { ... } { ...FALSE }
      \prg_return_false:
    }
  }
}
\BNVS_new_conditional_vc:cn { if_resolve_next } { T, F, TF }
\BNVS_new_conditional:cpnn { if_append_next:nc } #1 #2 { T, F, TF } {
\BNVS_DEBUG_log_set:cnnc { if_append_next:ncTF } { FQ_NAME } { #1 } { #2 }
\BNVS_DEBUG_log_if_append_next_ncTF:nn { } { ... }
  \BNVS_DEBUG_begin:n { if_append_next:ncTF }
  \__bnvs_if_resolve_next:ncTF { #1 } { #2 } {
    \BNVS_end_tl_put_right:cv { #2 } { #2 }
\BNVS_DEBUG_log_if_append_next_ncTF:nn { ... } { ...TRUE }
    \prg_return_true:
  } {
    \BNVS_end:
\BNVS_DEBUG_log_if_append_next_ncTF:nn { ... } { ...FALSE }
    \prg_return_true:
  }
}
\BNVS_new_conditional_vc:cn { if_append_next } { T, F, TF }
\BNVS_new_conditional:cpnn { if_resolve_v:nc } #1 #2 { T, F, TF } {
\BNVS_DEBUG_log_set:cnnc { if_resolve_v:ncTF } { FQ_NAME } { #1 } { #2 }
\BNVS_DEBUG_log_if_resolve_v_ncTF:nn { } { ... }
  \__bnvs_v_if_get:ncTF { #1 } { #2 } {
    \__bnvs_quark_if_no_value:cTF { #2 } {
      \BNVS_fatal:n {Circular~definition:~#1}
      \prg_return_false:
    } {
\BNVS_DEBUG_log_if_resolve_v_ncTF:nn { ... } { ...TRUE/ALREADY }
      \prg_return_true:
    }
  } {
    \__bnvs_v_gput:nn { #1 } { \q_no_value }
    \__bnvs_if_resolve_V:ncTF { #1 } { #2 } {
\BNVS_DEBUG_log_if_resolve_v_ncTF:nn { ... } { ...TRUE/VALUE }
      \__bnvs_v_gput:nv { #1 } { #2 }
      \prg_return_true:
    } {
      \__bnvs_if_resolve_first:ncTF { #1 } { #2 } {
\BNVS_DEBUG_log_if_resolve_v_ncTF:nn { ... } { ...TRUE/A }
        \__bnvs_v_gput:nv { #1 } { #2 }
        \prg_return_true:
      } {
        \__bnvs_if_resolve_last:ncTF { #1 } { #2 } {
\BNVS_DEBUG_log_if_resolve_v_ncTF:nn { ... } { ...TRUE/Z }
        \__bnvs_v_gput:nv { #1 } { #2 }
          \prg_return_true:
        } {
\BNVS_DEBUG_log_if_resolve_v_ncTF:nn { ... } { ...FALSE/Z }
          \__bnvs_v_gremove:n { #1 }
          \prg_return_false:
        }
      }
    }
  }
}
\BNVS_new_conditional_vc:cn { if_resolve_v } { T, F, TF }
\BNVS_new_conditional:cpnn { if_append_v:nc } #1 #2 { T, F, TF } {
\BNVS_DEBUG_log_set:cnnc { if_append_v:ncTF } { FQ_NAME } { #1 } { #2 }
\BNVS_DEBUG_log_if_append_v_ncTF:nn { } { ... }
  \BNVS_DEBUG_begin:n { if_append_v:nc }
  \__bnvs_if_resolve_v:ncTF { #1 } { #2 } {
    \BNVS_end_tl_put_right:cv { #2 } { #2 }
\BNVS_DEBUG_log_if_append_v_ncTF:nn { ... } { ...TRUE }
    \prg_return_true:
  } {
\BNVS_DEBUG_log_if_append_v_ncTF:nn { ... } { ...FALSE }
    \BNVS_end:
    \prg_return_false:
  }
}
\BNVS_new_conditional_vc:cn { if_append_v } { T, F, TF }
\BNVS_new_conditional:cpnn { index_can:n } #1 { p, T, F, TF } {
  \bool_if:nTF {
       \__bnvs_if_in_p:nn V { #1 }
    || \__bnvs_if_in_p:nn A { #1 }
    || \__bnvs_if_in_p:nn Z { #1 }
  } {
\BNVS_DEBUG_log_set:cnn { index_can:nTF } { FQ_NAME } { #1 }
\BNVS_DEBUG_log_index_can_nTF:nn { } { ...TRUE}
    \prg_return_true:
  } {
\BNVS_DEBUG_log_index_can_nTF:nn { } { ...FALSE}
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { index_can:v } #1 { p, T, F, TF } {
  \BNVS_tl_use:Nv \__bnvs_index_can:nTF { #1 } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { if_resolve_index:nnc } #1 #2 #3 { T, F, TF } {
\BNVS_DEBUG_log_set:cnnnnc { if_resolve_index:nncTF } { FQ_NAME } { #1 } { INDEX } { #2 } { #3 }
\BNVS_DEBUG_log_if_resolve_index_nncTF:nn { } { ... }
  \exp_args:Nx \__bnvs_if_resolve_V:ncTF { #1.#2 } { #3 } {
\BNVS_DEBUG_log_if_resolve_index_nncTF:nn { ... } { ...TRUE/VALUE }
      \prg_return_true:
  } {
    \__bnvs_if_resolve_first:ncTF { #1 } { #3 } {
      \__bnvs_tl_put_right:cn { #3 } { + #2 - 1 }
      \__bnvs_round:c { #3 }
\BNVS_DEBUG_log_if_resolve_index_nncTF:nn { ... } { ...TRUE/FIRST }
      \prg_return_true:
    } {
      \__bnvs_if_resolve_last:ncTF { #1 } { #3 } {
        \__bnvs_tl_put_right:cn { #3 } { + #2 - 1 }
        \__bnvs_round:c { #3 }
\BNVS_DEBUG_log_if_resolve_index_nncTF:nn { ... } { ...TRUE/LAST }
        \prg_return_true:
      } {
        \__bnvs_if_resolve_V:ncTF { #1 } { #3 } {
          \__bnvs_tl_put_right:cn { #3 } { + #2 - 1 }
          \__bnvs_round:c { #3 }
\BNVS_DEBUG_log_if_resolve_index_nncTF:nn { ... } { ...TRUE/VALUE }
          \prg_return_true:
        } {
\BNVS_DEBUG_log_if_resolve_index_nncTF:nn { ... } { ...FALSE }
        \prg_return_false:
        }
      }
  }
  }
}
\BNVS_new_conditional:cpnn { if_resolve_index:nvc } #1 #2 #3 { T, F, TF } {
  \BNVS_tl_use:nv {
    \__bnvs_if_resolve_index:nncTF { #1 }
  } { #2 } { #3 } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { if_resolve_index:vvc } #1 #2 #3 { T, F, TF } {
  \BNVS_tl_use:nv {
    \BNVS_tl_use:Nv \__bnvs_if_resolve_index:nncTF { #1 }
  } { #2 } { #3 } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { if_append_index:nnc } #1 #2 #3 { T, F, TF } {
\BNVS_DEBUG_log_set:cnnnnc { if_append_index:nncTF } { FQ_NAME } { #1 } { INDEX } { #2 } { #3 }
\BNVS_DEBUG_log_if_append_index_nncTF:nn { } { ... }
  \BNVS_DEBUG_begin:n { if_append_index:nnc }
  \__bnvs_if_resolve_index:nncTF { #1 } { #2 } { #3 } {
    \BNVS_end_tl_put_right:cv { #3 } { #3 }
\BNVS_DEBUG_log_if_append_index_nncTF:nn { ... } { ...TRUE }
    \prg_return_true:
  } {
    \BNVS_end:
\BNVS_DEBUG_log_if_append_index_nncTF:nn { ... } { ...FALSE }
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { if_append_index:vvc } #1 #2 #3 { T, F, TF } {
  \BNVS_tl_use:nv {
    \BNVS_tl_use:Nv \__bnvs_if_append_index:nncTF { #1 }
  } { #2 } { #3 } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { if_resolve_n:nc } #1 #2 { T, F, TF } {
\BNVS_DEBUG_log_set:cnnc { if_resolve_n:ncTF } { FQ_NAME } { #1 } { #2 }
\BNVS_DEBUG_log_if_resolve_n_ncTF:nn { } { ... }
  \__bnvs_n_if_get:ncF { #1 } { #2 } {
    \__bnvs_tl_set:cn { #2 } { 1 }
    \__bnvs_n_gput:nn { #1 } { 1 }
  }
\BNVS_DEBUG_log_if_resolve_n_ncTF:nn { ... } { ...TRUE }
  \prg_return_true:
}
\BNVS_new_conditional:cpnn { if_append_n:nc } #1 #2 { T, F, TF } {
\BNVS_DEBUG_log_set:cnnc { if_append_n:ncTF } { FQ_NAME } { #1 } { #2 }
\BNVS_DEBUG_log_if_append_n_ncTF:nn { } { ... }
  \BNVS_DEBUG_begin:n { if_append_n:nc }
  \__bnvs_if_resolve_n:ncTF { #1 } { #2 } {
    \BNVS_end_tl_put_right:cv { #2 } { #2 }
\BNVS_DEBUG_log_if_append_n_ncTF:nn { ... } { ...TRUE }
\BNVS_DEBUG_log_tl:c { #2 }
    \prg_return_true:
  } {
    \BNVS_end:
\BNVS_DEBUG_log_if_append_n_ncTF:nn { ... } { ...FALSE }
    \prg_return_false:
  }
}
\BNVS_new_conditional_vc:cn { if_append_n } { T, F, TF }

\BNVS_new_conditional:cpnn { if_resolve_n_index:nc } #1 #2 { T, F, TF } {
\BNVS_DEBUG_log_set:cnnc { if_resolve_n_index:ncTF } { FQ_NAME } { #1 } { #2 }
\BNVS_DEBUG_log_if_resolve_n_index_ncTF:nn { } { ... }
  \__bnvs_if_resolve_n:ncTF { #1 } { #2 } {
    \__bnvs_if_resolve_index:nvcTF { #1 } { #2 } { #2 } {
\BNVS_DEBUG_log_if_resolve_n_index_ncTF:nn { ... } { ...TRUE }
      \prg_return_true:
    } {
\BNVS_DEBUG_log_if_resolve_n_index_ncTF:nn { ... } { ...FALSE/B }
      \prg_return_false:
    }
  } {
\BNVS_DEBUG_log_if_resolve_n_index_ncTF:nn { ... } { ...FALSE/B }
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { if_resolve_n_index:nnc } #1 #2 #3 { T, F, TF } {
\BNVS_DEBUG_log_set:cnnnnc { if_resolve_n_index:nncTF } { FQ_NAME } { #1 } { BASE } { #2 } { #3 }
\BNVS_DEBUG_log_if_resolve_n_index_nncTF:nn { } { ... }
  \__bnvs_if_resolve_n:ncTF { #1 } { #3 } {
    \__bnvs_tl_put_left:cn { #3 } { #2. }
    \__bnvs_if_resolve:vcTF { #3 } { #3 } {
\BNVS_DEBUG_log_if_resolve_n_index_nncTF:nn { ... } { ...TRUE }
      \prg_return_true:
    } {
\BNVS_DEBUG_log_if_resolve_n_index_nncTF:nn { ... } { ...FALSE/B }
      \prg_return_false:
    }
  } {
\BNVS_DEBUG_log_if_resolve_n_index_nncTF:nn { ... } { ...FALSE/B }
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { if_append_n_index:nc } #1 #2 { T, F, TF } {
\BNVS_DEBUG_log_set:cnnc { if_append_n_index:ncTF } { FQ_NAME } { #1 } { #2 }
\BNVS_DEBUG_log_if_append_n_index_ncTF:nn { } { ... }
  \BNVS_DEBUG_begin:n { if_append_n_index:nc }
  \__bnvs_if_resolve_n_index:ncTF { #1 } { #2 } {
    \BNVS_end_tl_put_right:cv { #2 } { #2 }
\BNVS_DEBUG_log_if_append_n_index_ncTF:nn { } { ...TRUE }
    \prg_return_true:
  } {
    \BNVS_end:
\BNVS_DEBUG_log_if_append_n_index_ncTF:nn { } { ...FALSE }
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { if_append_n_index:nnc } #1 #2 #3 { T, F, TF } {
\BNVS_DEBUG_log_set:cnnnnc { if_append_n_index:nncTF } { FQ_NAME } { #1 } { BASE } { #2 } { #3 }
\BNVS_DEBUG_log_if_append_n_index_nncTF:nn { } { ... }
  \BNVS_DEBUG_begin:n { if_append_n_index:nncTF }
  \__bnvs_if_resolve_n_index:nncTF { #1 } { #2 } { #3 } {
    \BNVS_end_tl_put_right:cv { #3 } { #3 }
\BNVS_DEBUG_log_if_append_n_index_nncTF:nn { } { ...TRUE }
    \prg_return_true:
  } {
    \BNVS_end:
\BNVS_DEBUG_log_if_append_n_index_nncTF:nn { } { ...FALSE }
    \prg_return_false:
  }
}
\BNVS_new_conditional_vc:cn { if_append_n_index } { T, F, TF }
\BNVS_new_conditional_vvc:cn { if_append_n_index } { T, F, TF }
\BNVS_new_conditional:cpnn { if_resolve_v_incr:nnc } #1 #2 #3 { T, F, TF } {
\BNVS_DEBUG_log_set:cnnnnc { if_resolve_v_incr_nncTF } { FQ_NAME } { #1 } { INCR } { #2 } { #3 }
\BNVS_DEBUG_log_if_resolve_v_incr_nncTF:nn { } { ... }
  \__bnvs_if_resolve:ncTF { #2 } { #3 } {
    \BNVS_tl_use:Nv \int_compare:nNnTF { #3 } = 0 {
      \__bnvs_if_resolve_v:ncTF { #1 } { #3 } {
\BNVS_DEBUG_log_if_resolve_v_incr_nncTF:nn { ... } { ...TRUE/0 }
\BNVS_DEBUG_log_tl:c { #3 }
        \prg_return_true:
      } {
\BNVS_DEBUG_log_if_resolve_v_incr_nncTF:nn { ... } { ...FALSE/A }
        \prg_return_false:
      }
    } {
      \__bnvs_tl_put_right:cn { #3 } { + }
      \__bnvs_if_append_v:ncTF { #1 } { #3 } {
        \__bnvs_round:c { #3 }
        \__bnvs_v_gput:nv { #1 } { #3 }
\BNVS_DEBUG_log_if_resolve_v_incr_nncTF:nn { ... } { ...TRUE/<>0 }
\BNVS_DEBUG_log_tl:c { #3 }
        \prg_return_true:
      } {
\BNVS_DEBUG_log_if_resolve_v_incr_nncTF:nn { ... } { ...FALSE/B }
        \prg_return_false:
      }
    }
  } {
\BNVS_DEBUG_log_if_resolve_v_incr_nncTF:nn { ... } { ...FALSE/C }
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { if_append_v_incr:nnc } #1 #2 #3 { T, F, TF } {
\BNVS_DEBUG_log_set:cnnnnc { if_append_v_incr_nncTF } { FQ_NAME } { #1 } { INCR } { #2 } { #3 }
\BNVS_DEBUG_log_if_append_v_incr_nncTF:nn { } { ... }
  \BNVS_DEBUG_begin:n { if_append_v_incr:nnc }
  \__bnvs_if_resolve_v_incr:nncTF { #1 } { #2 } { #3 } {
    \BNVS_end_tl_put_right:cv { #3 } { #3 }
\BNVS_DEBUG_log_if_append_v_incr_nncTF:nn { ... } { ...TRUE }
    \prg_return_true:
  } {
\BNVS_DEBUG_log_if_append_v_incr_nncTF:nn { } { ...FALSE }
  \BNVS_end:
    \prg_return_false:
  }
}
\BNVS_new_conditional_vnc:cn { if_append_v_incr } { T, F, TF }
\BNVS_new_conditional_vvc:cn { if_append_v_incr } { T, F, TF }
\BNVS_new_conditional:cpnn { if_resolve_v_post:nnc } #1 #2 #3 { T, F, TF } {
\BNVS_DEBUG_log_set:cnnnnc { if_resolve_v_post:nncTF } { FQ_NAME } { #1 } { INCR } { #2 } { #3 }
\BNVS_DEBUG_log_if_resolve_v_post_nncTF:nn { } { ... }
  \__bnvs_if_resolve_v:ncTF { #1 } { #3 } {
    \BNVS_DEBUG_begin:n { if_resolve_v_post:nnc }
    \__bnvs_if_resolve:ncTF { #2 } { a } {
      \BNVS_tl_use:Nv \int_compare:nNnTF { a } = 0 {
        \BNVS_end:
\BNVS_DEBUG_log_if_resolve_v_post_nncTF:nn { ... } { ...TRUE/0 }
\BNVS_DEBUG_log_tl:c { #3 }
        \prg_return_true:
      } {
        \__bnvs_tl_put_right:cn { a } { + }
        \__bnvs_tl_put_right:cv { a } { #3 }
        \__bnvs_round:c { a }
        \BNVS_end_v_gput:nv { #1 } { a }
\BNVS_DEBUG_log_if_resolve_v_post_nncTF:nn { ... } { ...TRUE/<>0 }
\BNVS_DEBUG_log_tl:c { #3 }
        \prg_return_true:
      }
    } {
\BNVS_DEBUG_log_if_resolve_v_post_nncTF:nn { ... } { ...FALSE/A }
      \BNVS_end:
      \prg_return_false:
    }
  } {
\BNVS_DEBUG_log_if_resolve_v_post_nncTF:nn { ... } { ...FALSE/B }
      \prg_return_false:
  }
}
\BNVS_new_conditional_vvc:cn { if_resolve_v_post } { T, F, TF }
\BNVS_new_conditional:cpnn { if_append_v_post:nnc } #1 #2 #3 { T, F, TF } {
\BNVS_DEBUG_log_set:cnnnnc { if_append_v_post:nncTF } { FQ_NAME } { #1 } { INCR } { #2 } { #3 }
\BNVS_DEBUG_log_if_append_v_post_nncTF:nn { } { ... }
  \BNVS_DEBUG_begin:n { if_append_v_post:nnc }
  \__bnvs_if_resolve_v_post:nncTF { #1 } { #2 } { #3 } {
    \BNVS_end_tl_put_right:cv { #3 } { #3 }
\BNVS_DEBUG_log_if_append_v_post_nncTF:nn { ... } { ...TRUE }
\BNVS_DEBUG_log_tl:c { #3 }
    \prg_return_true:
  } {
\BNVS_DEBUG_log_if_append_v_post_nncTF:nn { ... } { ...FALSE }
    \prg_return_true:
  }
}
\BNVS_new_conditional_vnc:cn { if_append_v_post } { T, F, TF }
\BNVS_new_conditional_vvc:cn { if_append_v_post } { T, F, TF }
\BNVS_new_conditional:cpnn { if_resolve_n_incr:nnnc } #1 #2 #3 #4 { T, F, TF } {
\BNVS_DEBUG_log_set:cnnnnnnc { if_resolve_n_incr:nnncTF } { FQ_NAME } { #1 } { BASE } { #2 } { INCR } { #3 } { #4 }
\BNVS_DEBUG_log_if_resolve_n_incr_nnncTF:nn { } { ... }
  \__bnvs_if_resolve:ncTF { #3 } { #4 } {
    \BNVS_tl_use:Nv \int_compare:nNnTF { #4 } = 0 {
      \__bnvs_if_resolve_n:ncTF { #1 } { #4 } {
        \__bnvs_if_resolve_index:nvcTF { #1 } { #4 } { #4 } {
\BNVS_DEBUG_log_if_resolve_n_incr_nnncTF:nn { ... } { ...TRUE/0 }
\BNVS_DEBUG_log_tl:c { #4 }
          \prg_return_true:
        } {
\BNVS_DEBUG_log_if_resolve_n_incr_nnncTF:nn { ... } { ...FALSE/UNREACHABLE }
          \prg_return_false:
        }
      } {
\BNVS_DEBUG_log_if_resolve_n_incr_nnncTF:nn { ... } { ...FALSE }
        \prg_return_false:
      }
    } {
      \__bnvs_tl_put_right:cn { #4 } { + }
      \__bnvs_if_append_n:ncTF { #1 } { #4 } {
        \__bnvs_round:c { #4 }
        \__bnvs_n_gput:nv { #1 } { #4 }
        \__bnvs_if_resolve_index:nvcTF { #2 } { #4 } { #4 } {
\BNVS_DEBUG_log_if_resolve_n_incr_nnncTF:nn { ... } { ...TRUE/<>0 }
\BNVS_DEBUG_log_tl:c { #4 }
          \prg_return_true:
        } {
\BNVS_DEBUG_log_if_resolve_n_incr_nnncTF:nn { ... } { ...FALSE/INDEX }
          \prg_return_false:
        }
      } {
\BNVS_DEBUG_log_if_resolve_n_incr_nnncTF:nn { ... } { ...FALSE/APPEND }
        \prg_return_false:
      }
    }
  } {
\BNVS_DEBUG_log_if_resolve_n_incr_nnncTF:nn { ... } { ...FALSE/RESOLVE }
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { if_resolve_n_incr:nnc } #1 #2 #3 { T, F, TF } {
\BNVS_DEBUG_log_set:cnnnnc { if_resolve_n_incr_nncTF } { FQ_NAME } { #1 } { INCR } { #2 } { #3 }
\BNVS_DEBUG_log_if_resolve_n_incr_nncTF:nn { } { ... }
  \__bnvs_if_resolve:ncTF { #2 } { #3 } {
      \BNVS_tl_use:Nv \int_compare:nNnTF { #3 } = 0 {
      \__bnvs_if_resolve_n:ncTF { #1 } { #3 } {
        \__bnvs_if_resolve_index:nvcTF { #1 } { #3 } { #3 } {
\BNVS_DEBUG_log_if_resolve_n_incr_nncTF:nn { ... } { ...TRUE/0 }
\BNVS_DEBUG_log_tl:c { #3 }
          \prg_return_true:
        } {
\BNVS_DEBUG_log_if_resolve_n_incr_nncTF:nn { ... } { ...FALSE/UNREACHABLE }
          \prg_return_false:
        }
      } {
\BNVS_DEBUG_log_if_resolve_n_incr_nncTF:nn { ... } { ...FALSE }
        \prg_return_false:
      }
    } {
      \__bnvs_tl_put_right:cn { #3 } { + }
      \__bnvs_if_append_n:ncTF { #1 } { #3 } {
        \__bnvs_round:c { #3 }
        \__bnvs_n_gput:nv { #1 } { #3 }
        \__bnvs_if_resolve_index:nvcTF { #1 } { #3 } { #3 } {
\BNVS_DEBUG_log_if_resolve_n_incr_nncTF:nn { ... } { ...TRUE/<>0 }
\BNVS_DEBUG_log_tl:c { #3 }
          \prg_return_true:
        } {
\BNVS_DEBUG_log_if_resolve_n_incr_nncTF:nn { ... } { ...FALSE/INDEX }
          \prg_return_false:
        }
      } {
\BNVS_DEBUG_log_if_resolve_n_incr_nncTF:nn { ... } { ...FALSE/APPEND }
        \prg_return_false:
      }
    }
  } {
\BNVS_DEBUG_log_if_resolve_n_incr_nncTF:nn { ... } { ...FALSE/RESOLVE }
    \prg_return_false:
  }
}
\BNVS_new_conditional_vnc:cn { if_resolve_n_incr } { T, F, TF }
\BNVS_new_conditional_vvc:cn { if_resolve_n_incr } { T, F, TF }
\BNVS_new_conditional_vvnc:cn { if_resolve_n_incr } { T, F, TF }
\BNVS_new_conditional:cpnn { if_append_n_incr:nnnc } #1 #2 #3 #4 { T, F, TF } {
\BNVS_DEBUG_log_set:cnnnnnnc { if_append_n_incr:nnncTF } { FQ_NAME } { #1 } { BASE } { #2 } { INCR } { #3 } { #4 }
\BNVS_DEBUG_log_if_append_n_incr_nnncTF:nn { } { ... }
  \BNVS_DEBUG_begin:n { if_append_n_incr:nnnc }
  \__bnvs_if_resolve_n_incr:nnncTF { #1 } { #2 } { #3 } { #4 } {
    \BNVS_end_tl_put_right:cv { #4 } { #4 }
\BNVS_DEBUG_log_if_append_n_incr_nnncTF:nn { ... } { ...TRUE }
    \prg_return_true:
  } {
    \BNVS_end:
\BNVS_DEBUG_log_if_append_n_incr_nnncTF:nn { ... } { ...FALSE }
    \prg_return_false:
  }
}
\BNVS_new_conditional_vvnc:cn { if_append_n_incr } { T, F, TF }
\BNVS_new_conditional_vvvc:cn { if_append_n_incr } { T, F, TF }
\BNVS_new_conditional:cpnn { if_append_n_incr:nnc } #1 #2 #3 { T, F, TF } {
\BNVS_DEBUG_log_set:cnnnnc { if_append_n_incr:nncTF } { FQ_NAME } { #1 } { INCR } { #2 } { #3 }
\BNVS_DEBUG_log_if_append_n_incr_nncTF:nn { } { ... }
  \BNVS_DEBUG_begin:n { if_append_n_incr:nnc }
  \__bnvs_if_resolve_n_incr:nncTF { #1 } { #2 } { #3 } {
    \BNVS_end_tl_put_right:cv { #3 } { #3 }
\BNVS_DEBUG_log_if_append_n_incr_nncTF:nn { ... } { ...TRUE }
    \prg_return_true:
  } {
    \BNVS_end:
\BNVS_DEBUG_log_if_append_n_incr_nncTF:nn { ... } { ...FALSE }
    \prg_return_false:
  }
}
\BNVS_new_conditional_vnc:cn { if_append_n_incr } { T, F, TF }
\BNVS_new_conditional_vvc:cn { if_append_n_incr } { T, F, TF }
\BNVS_new_conditional:cpnn { if_resolve_n_post:nnc } #1 #2 #3 { T, F, TF } {
\BNVS_DEBUG_log_set:cnnnnc { if_resolve_n_post_nncTF } { FQ_NAME } { #1 } { INCR } { #2 } { #3 }
\BNVS_DEBUG_log_if_resolve_n_post_nncTF:nn { } { ... }
  \__bnvs_if_resolve_n:ncTF { #1 } { #3 } {
    \BNVS_DEBUG_begin:n { if_resolve_n_post:nnc }
    \__bnvs_if_resolve:ncTF { #2 } { #3 } {
      \BNVS_tl_use:Nv \int_compare:nNnTF { #3 } = 0 {
        \BNVS_end:
        \__bnvs_if_resolve_index:nvcTF { #1 } { #3 } { #3 } {
\BNVS_DEBUG_log_if_resolve_n_post_nncTF:nn { ... } { ...TRUE/0 }
\BNVS_DEBUG_log_tl:c { #3 }
          \prg_return_true:
        } {
\BNVS_DEBUG_log_if_resolve_n_post_nncTF:nn { ... } { ...FALSE/UNREACHABLE }
          \prg_return_false:
        }
      } {
        \__bnvs_tl_put_right:cn { #3 } { + }
        \__bnvs_if_append_n:ncTF { #1 } { #3 } {
          \__bnvs_round:c { #3 }
          \__bnvs_n_gput:nv { #1 } { #3 }
          \BNVS_end:
          \__bnvs_if_resolve_index:nvcTF { #1 } { #3 } { #3 } {
\BNVS_DEBUG_log_if_resolve_n_post_nncTF:nn { ... } { ...TRUE/<>0 }
\BNVS_DEBUG_log_tl:c { #3 }
            \prg_return_true:
          } {
\BNVS_DEBUG_log_if_resolve_n_post_nncTF:nn { ... } { ...FALSE/A }
            \prg_return_false:
          }
        } {
          \BNVS_end:
\BNVS_DEBUG_log_if_resolve_n_post_nncTF:nn { ... } { ...FALSE/B }
          \prg_return_false:
        }
      }
    } {
      \BNVS_end:
\BNVS_DEBUG_log_if_resolve_n_post_nncTF:nn { ... } { ...FALSE/C }
      \prg_return_false:
    }
  } {
\BNVS_DEBUG_log_if_resolve_n_post_nncTF:nn { ... } { ...FALSE/D }
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { if_append_n_post:nnc } #1 #2 #3 { T, F, TF } {
\BNVS_DEBUG_log_set:cnnnnc { if_append_n_post_nncTF } { FQ_NAME } { #1 } { INCR } { #2 } { #3 }
\BNVS_DEBUG_log_if_append_n_post_nncTF:nn { } { ... }
  \BNVS_DEBUG_begin:n { if_append_n_post:nnc }
  \__bnvs_if_resolve_n_post:nncTF { #1 } { #2 } { #3 } {
    \BNVS_end_tl_put_right:cv { #3 } { #3 }
\BNVS_DEBUG_log_if_append_n_post_nncTF:nn { ... } { ...TRUE }
    \prg_return_true:
  } {
    \BNVS_end:
\BNVS_DEBUG_log_if_append_n_post_nncTF:nn { ... } { ...FALSE }
    \prg_return_false:
  }
}
\BNVS_new_conditional_vnc:cn { if_append_n_post } { T, F, TF }
\BNVS_new_conditional_vvc:cn { if_append_n_post } { T, F, TF }
\BNVS_set:cpn { round_ans: } {
  \__bnvs_round:c { ans }
}
\BNVS_new:cpn { if_resolve_path_n:TFF } #1 #2 {
  \__bnvs_if_resolve_Fip_n_path:TF {
    \__bnvs_seq_if_empty:cTF { path } { #1 } { #2 }
  }
}
\BNVS_new:cpn { if_resolve_path:TFF } #1 #2 {
  \__bnvs_if_resolve_Fip_path:TF {
    \__bnvs_seq_if_empty:cTF { path } { #1 } { #2 }
  }
}
\BNVS_new:cpn { if_resolve_end_return_false:n } #1 {
\BNVS_DEBUG_log_if_resolve_ncTF:nn { ... } { ...#1 }
  \BNVS_end:
  \prg_return_false:
}
\BNVS_new:cpn { if_resolve_path_n_end_return_false_or:T } #1 {
  \__bnvs_if_resolve_path_n:TFF {
    #1
  } {
    \__bnvs_if_resolve_end_return_false:n {
      Too~many~dotted~components
    }
  } {
    \__bnvs_if_resolve_end_return_false:n {
      Unknown~dotted~path
    }
  }
}
\BNVS_set:cpn { resolve_x:T } #1 {
  \__bnvs_if_resolve_Fip_x_path:TFF {
    #1
  } {
    \__bnvs_if_resolve_end_return_false:n {
      Too~many~dotted~components
    }
  } {
    \__bnvs_if_resolve_end_return_false:n {
      Unknown~dotted~path
    }
  }
}
\BNVS_new_conditional:cpnn { if_path_pop_right_n:c } #1 { T, F, TF } {
  \__bnvs_seq_pop_right:ccTF { path } { #1 }
    { \prg_return_true: } { \prg_return_false: }
}
\BNVS_new:cpn { if_resolve_pop_Fip:TTF } #1 #2 #3 {
\BNVS_DEBUG_log_if_resolve_ncTF:nn { ... } { ...POP... }
  \__bnvs_split_if_pop_left:cTF { FQ_name } {
    \__bnvs_split_if_pop_left:cTF { id } {
      \__bnvs_split_if_pop_left:cTF { path } {
\BNVS_DEBUG_log_if_resolve_ncTF:nn { ... } { ...POP_FIP... }
\BNVS_DEBUG_log_seq:c { split }
        \__bnvs_tl_if_blank:vTF { FQ_name } {
          #1
        } {
          \__bnvs_tl_if_blank:vTF { id } {
            \__bnvs_tl_put_left:cv { FQ_name } { id_last }
            \__bnvs_tl_set:cv { id } { id_last }
          } {
            \__bnvs_tl_set:cv { id_last } { id }
          }
          \__bnvs_tl_if_blank:vTF { path } {
            \__bnvs_seq_clear:c { path }
          } {
            \__bnvs_seq_set_split:cnv { path } { . } { path }
            \__bnvs_seq_remove_all:cn { path } { }
          }
          \__bnvs_tl_set_eq:cc { FQ_name_base } { FQ_name }
          \__bnvs_seq_set_eq:cc { path_base } { path }
\BNVS_DEBUG_log_if_resolve_ncTF:nn { ... } { ...COMPLETE/2... }
\BNVS_DEBUG_log_tl:c { FQ_name }
\BNVS_DEBUG_log_tl:c { id }
\BNVS_DEBUG_log_seq:xc { \BNVS_tl_use:c { path } } { path }
\BNVS_DEBUG_log_tl:c { FQ_name_base }
\BNVS_DEBUG_log_seq:c { path_base }
          #2
        }
      } {
\__bnvs_end_unreachable_return_false:n { if_resolve_pop_Fip:TTF/2 }
      }
    } {
\__bnvs_end_unreachable_return_false:n { if_resolve_pop_Fip:TTF/1 }
    }
  } { #3 }
}
\BNVS_new:cpn { if_resolve_return_or_pop_complete_white:T } #1 {
  \__bnvs_split_if_pop_left:cTF { n_incr } {
    \__bnvs_split_if_pop_left:cTF { plus } {
      \__bnvs_split_if_pop_left:cTF { rhs } {
        \__bnvs_split_if_pop_left:cTF { post } {
\BNVS_DEBUG_log_if_resolve_ncTF:nn { } { return_or_pop_complete_white:T }
\BNVS_DEBUG_log_seq:c { split }
          #1
        } {
\__bnvs_end_unreachable_return_false:n { if_resolve_return_or_pop_complete_white:T/4 }
        }
      } {
\__bnvs_end_unreachable_return_false:n { if_resolve_return_or_pop_complete_white:T/3 }
      }
    } {
\__bnvs_end_unreachable_return_false:n { if_resolve_return_or_pop_complete_white:T/2 }
    }
  } {
\__bnvs_end_unreachable_return_false:n { if_resolve_return_or_pop_complete_white:T/1 }
  }
}
\BNVS_new:cpn { if_resolve_pop_complete_black:T } #1 {
  \__bnvs_split_if_pop_left:cTF { a } {
    \__bnvs_split_if_pop_left:cTF { a } {
      \__bnvs_split_if_pop_left:cTF { a } {
        \__bnvs_split_if_pop_left:cTF { a } {
          \__bnvs_split_if_pop_left:cTF { a } {
            \__bnvs_split_if_pop_left:cTF { a } {
              \__bnvs_split_if_pop_left:cTF { a } {
\BNVS_DEBUG_log_if_resolve_ncTF:nn { } { if_resolve_pop_complete_black:T }
\BNVS_DEBUG_log_seq:c { split }
                #1
              } {
\__bnvs_end_unreachable_return_false:n { if_resolve_pop_complete_black:T/7 }
              }
            } {
\__bnvs_end_unreachable_return_false:n { if_resolve_pop_complete_black:T/6 }
            }
          } {
\__bnvs_end_unreachable_return_false:n { if_resolve_pop_complete_black:T/5 }
          }
        } {
\__bnvs_end_unreachable_return_false:n { if_resolve_pop_complete_black:T/4 }
        }
      } {
\__bnvs_end_unreachable_return_false:n { if_resolve_pop_complete_black:T/3 }
      }
    } {
\__bnvs_end_unreachable_return_false:n { if_resolve_pop_complete_black:T/2 }
    }
  } {
\__bnvs_end_unreachable_return_false:n { if_resolve_pop_complete_black:T/1 }
  }
}
\BNVS_int_new:c { split }
\BNVS_new:cpn { if_resolve_Fip_x_path_or_end_return_false:nT } #1 #2 {
  \__bnvs_if_resolve_Fip_x_path:TFF {
    #2
  } {
    \BNVS_end_return_false:x { Too~many~dotted~components:~#1 }
  } {
    \BNVS_end_return_false:x { Unknown~dotted~path:~#1 }
  }
}
\BNVS_new_conditional:cpnn { if_append:nc } #1 #2 { T, F, TF } {
\BNVS_DEBUG_log_set:cnnc { if_append:ncTF } { QUERY } { #1 } { #2 }
\BNVS_DEBUG_log_if_append_ncTF:nn { } { ... }
  \BNVS_DEBUG_begin:n { if_append:nc }
  \__bnvs_if_resolve:ncTF { #1 } { #2 } {
    \BNVS_end_tl_put_right:cv { #2 } { #2 }
\BNVS_DEBUG_log_if_append_ncTF:nn { ... } { ...TRUE }
    \prg_return_true:
  } {
    \BNVS_end:
\BNVS_DEBUG_log_if_append_ncTF:nn { ... } { ...FALSE }
    \prg_return_false:
  }
}
\BNVS_new:cpn { end_unreachable_return_false:n } #1 {
  \BNVS_error:x { UNREACHABLE/#1 }
  \BNVS_end:
  \prg_return_false:
}
\BNVS_new_conditional:cpnn { if_resolve:nc } #1 #2 { T, F, TF } {
\BNVS_DEBUG_log_set:cnnc { if_resolve:ncTF } { QUERY } { #1 } { #2 }
\BNVS_DEBUG_log_if_resolve_ncTF:nn { } { ... }
  \__bnvs_if_call:TF {
    \BNVS_DEBUG_begin:n { if_resolve:nc }
    \BNVS_set:cpn { if_resolve_warning:n } ##1 {
      \__bnvs_warning:n { #1:~##1 }
      \BNVS_set:cpn { if_resolve_warning:n } {
        \use_none:n
      }
    }
\BNVS_DEBUG_log_if_resolve_ncTF:nn { ... } { ... }
  \__bnvs_if_regex_split:cnTF { split } { #1 } {
\BNVS_DEBUG_log_if_resolve_ncTF:nn { ... } { ...SPLIT... }
\BNVS_DEBUG_log_seq:c { split }
      \BNVS_set:cpn { if_resolve_end_return_true: } {
        \__bnvs_if_resolve_round_ans:
        \BNVS_end_tl_set:cv { #2 } { ans }
\BNVS_DEBUG_log_if_resolve_ncTF:nn { ... } { ...FINAL_TRUE }
        \prg_return_true:
      }
      \BNVS_set:cpn { if_resolve_round_ans: } { \__bnvs_round_ans: }
      \__bnvs_tl_clear:c { ans }
      \__bnvs_if_resolve_loop_or_end_return:
    } {
\BNVS_DEBUG_log_if_resolve_ncTF:nn { } { ...TRUE/DIRECT }
      \__bnvs_tl_clear:c { ans }
      \__bnvs_round_ans:n { #1 }
      \BNVS_end_tl_set:cv { #2 } { ans }
\BNVS_DEBUG_log_tl:c { ans }
      \prg_return_true:
    }
  } {
    \BNVS_error:n { TOO_MANY_NESTED_CALLS/Resolution }
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { if_append:vc } #1 #2 { T, F, TF } {
  \BNVS_tl_use:Nv \__bnvs_if_append:ncTF { #1 } { #2 } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { if_resolve:vc } #1 #2 { T, F, TF } {
  \BNVS_tl_use:Nv \__bnvs_if_resolve:ncTF { #1 } { #2 } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\BNVS_new:cpn { if_resolve_loop_or_end_return: } {
\BNVS_DEBUG_log_if_resolve_ncTF:nn { ... } { ...LOOP... }
\BNVS_DEBUG_log_seq:c { split }
  \__bnvs_split_if_pop_left:cTF { a } {
    \__bnvs_tl_put_right:cv { ans } { a }
    \__bnvs_if_resolve_pop_Fip:TTF {
      \__bnvs_if_resolve_pop_Fip:TTF {
\__bnvs_end_unreachable_return_false:n { if_resolve_loop_or_end_return:/3 }
      } {
        \__bnvs_if_resolve_return_or_pop_complete_white:T {
          \__bnvs_tl_if_blank:vTF { n_incr } {
            \__bnvs_tl_if_blank:vTF { plus } {
              \__bnvs_tl_if_blank:vTF { rhs } {
                \__bnvs_tl_if_blank:vTF { post } {
                  \__bnvs_if_resolve_V_loop_or_end_return_true:F {
                    \__bnvs_seq_pop_right:ccTF { path } { a } {
                      \BNVS_tl_use:Nv \str_case:nnF { a } {
{ n         } { \BNVS_use:c { if_resolve_loop_or_end_return[...n]: } }
{ length    } { \BNVS_use:c { if_resolve_loop_or_end_return[.length]: } }
{ last      } { \BNVS_use:c { if_resolve_loop_or_end_return[.last]:  } }
{ range     } { \BNVS_use:c { if_resolve_loop_or_end_return[.range]: } }
{ previous  } { \BNVS_use:c { if_resolve_loop_or_end_return[.previous]: } }
{ next      } { \BNVS_use:c { if_resolve_loop_or_end_return[.next]:  } }
{ reset     } { \BNVS_use:c { if_resolve_loop_or_end_return[.reset]: } }
{ reset_all } { \BNVS_use:c { if_resolve_loop_or_end_return[.reset_all]: } }
                      } {
\BNVS_use:c { if_resolve_loop_or_end_return[...<integer>]: }
                      }
                    } {
\BNVS_use:c { if_resolve_loop_or_end_return[...]: }
                    }
                  }
                } {
\BNVS_use:c { if_resolve_loop_or_end_return[...++]: }
                }
              } {
                \__bnvs_if_path_suffix:nTF { n } {
\BNVS_use:c { if_resolve_loop_or_end_return[...n=...]: }
                } {
\BNVS_use:c { if_resolve_loop_or_end_return[...=...]: }
                }
              }
            } {
              \__bnvs_if_path_suffix:nTF { n } {
\BNVS_use:c { if_resolve_loop_or_end_return[...n+=...]: }
              } {
\BNVS_use:c { if_resolve_loop_or_end_return[...+=...]: }
              }
            }
          } {
\BNVS_use:c { if_resolve_loop_or_end_return[...++n]: }
          }
        }
      } {
\__bnvs_end_unreachable_return_false:n { if_resolve_loop_or_end_return:/2 }
      }
    } {
      \__bnvs_if_resolve_pop_complete_black:T {
        \__bnvs_if_path_suffix:nTF { n } {
\BNVS_use:c { if_resolve_loop_or_end_return[++...n]: }
        } {
\BNVS_use:c { if_resolve_loop_or_end_return[++...]: }
        }
      }
    } {
      \__bnvs_if_resolve_end_return_true:
    }
  } {
\__bnvs_end_unreachable_return_false:n { if_resolve_loop_or_end_return:/1 }
  }
}
\BNVS_set:cpn { if_resolve_V_loop_or_end_return_true:F } #1 {
  \__bnvs_tl_set:cx { a } {
    \BNVS_tl_use:c { FQ_name } \BNVS_tl_use:c { path }
  }
  \__bnvs_if_resolve_v:vcTF { a } { a } {
\BNVS_DEBUG_log_if_resolve_ncTF:nn { ... } { ...TRUE/DIRECT(v) }
\BNVS_DEBUG_log_tl:c { a }
    \__bnvs_tl_put_right:cv { ans } { a }
    \__bnvs_if_resolve_loop_or_end_return:
  } {
    \__bnvs_if_resolve_V:vcTF { a } { a } {
\BNVS_DEBUG_log_if_resolve_ncTF:nn { ... } { ...TRUE/DIRECT(V) }
\BNVS_DEBUG_log_tl:c { a }
      \__bnvs_tl_put_right:cv { ans } { a }
      \__bnvs_if_resolve_loop_or_end_return:
    } {
      #1
    }
  }
}
\BNVS_new:cpn { end_return_error:n } #1 {
      \BNVS_error:n { #1 }
      \BNVS_end:
      \prg_return_false:
}
\BNVS_new:cpn { if_resolve_loop_or_end_return[...n]: } {
\BNVS_DEBUG_log:x { ▃▃▃▃▃~CASE~...n }
  \__bnvs_if_resolve_path_n_end_return_false_or:T {
    \__bnvs_resolve_base_n:
    \__bnvs_if_append_n_index:vvcTF { FQ_name } { FQ_name_base } { ans } {
\BNVS_DEBUG_log_if_resolve_ncTF:nn { ... } { .../...n }
\BNVS_DEBUG_log_tl:c { b }
      \__bnvs_if_resolve_loop_or_end_return:
    } {
      \__bnvs_end_return_error:n {
        Undefined~n~index
      }
    }
  }
}
\BNVS_new_conditional:cpnn { if_path_suffix:n } #1 { T, F, TF } {
  \__bnvs_seq_get_right:ccTF { path } { suffix } {
    \__bnvs_tl_if_eq:cnTF { suffix } { #1 } {
      \__bnvs_seq_pop_right:ccT { path } { suffix } { }
      \prg_return_true:
    } {
      \prg_return_false:
    }
  } {
    \__bnvs_tl_clear:c { suffix }
    \prg_return_false:
  }
}
\BNVS_new:cpn { if_resolve_loop_or_end_return[.length]: } {
\BNVS_DEBUG_log:x { ▃▃▃▃▃~CASE~...length }
  \__bnvs_if_resolve_path_n_end_return_false_or:T {
    \__bnvs_if_append_length:vcTF { FQ_name } { ans } {
\BNVS_DEBUG_log_if_resolve_ncTF:nn { ... } { .../length }
      \__bnvs_if_resolve_loop_or_end_return:
    } {
      \__bnvs_if_resolve_end_return_false:n { NO~length }
    }
  }
}
\BNVS_new:cpn { if_resolve_loop_or_end_return[.last]: } {
\BNVS_DEBUG_log:x { ▃▃▃▃▃~CASE~...last }
  \__bnvs_if_resolve_path_n_end_return_false_or:T {
    \__bnvs_if_append_last:vcTF { FQ_name } { ans } {
\BNVS_DEBUG_log_if_resolve_ncTF:nn { ... } { .../last }
      \__bnvs_if_resolve_loop_or_end_return:
    } {
      \BNVS_end_return_false:x { NO~last }
    }
  }
}
\BNVS_new:cpn { if_resolve_loop_or_end_return[.range]: } {
\BNVS_DEBUG_log:x { ▃▃▃▃▃~CASE~...range }
  \__bnvs_if_resolve_path_n_end_return_false_or:T {
    \__bnvs_if_append_range:vcTF { FQ_name } { ans } {
      \BNVS_set:cpn { if_resolve_round_ans: } { \prg_do_nothing: }
\BNVS_DEBUG_log_if_resolve_ncTF:nn { ... } { .../range }
      \__bnvs_if_resolve_loop_or_end_return:
    } {
      \__bnvs_if_resolve_end_return_false:n { NO~range }
    }
  }
}
\BNVS_new:cpn { if_resolve_loop_or_end_return[.previous]: } {
\BNVS_DEBUG_log:x { ▃▃▃▃▃~CASE~...previous }
  \__bnvs_if_resolve_path_n_end_return_false_or:T {
    \__bnvs_if_append_previous:vcTF { FQ_name } { ans } {
\BNVS_DEBUG_log_if_resolve_ncTF:nn { ... } { .../previous }
      \__bnvs_if_resolve_loop_or_end_return:
    } {
      \__bnvs_if_resolve_end_return_false:n { NO~previous }
    }
  }
}
\BNVS_new:cpn { if_resolve_loop_or_end_return[.next]: } {
\BNVS_DEBUG_log:x { ▃▃▃▃▃~CASE~...next }
  \__bnvs_if_resolve_path_n_end_return_false_or:T {
    \__bnvs_if_append_next:vcTF { FQ_name } { ans } {
\BNVS_DEBUG_log_if_resolve_ncTF:nn { ... } { .../next }
      \__bnvs_if_resolve_loop_or_end_return:
    } {
      \__bnvs_if_resolve_end_return_false:n { NO~next }
    }
  }
}
\BNVS_new:cpn { if_resolve_loop_or_end_return[.reset]: } {
\BNVS_DEBUG_log:x { ▃▃▃▃▃~CASE~...reset }
  \__bnvs_if_resolve_path_n_end_return_false_or:T {
    \__bnvs_v_if_greset:vnT { FQ_name } { } { }
    \__bnvs_if_append_V:vcTF { FQ_name } { ans } {
\BNVS_DEBUG_log_if_resolve_ncTF:nn { ... } { .../reset }
      \__bnvs_if_resolve_loop_or_end_return:
    } {
      \__bnvs_if_resolve_end_return_false:n { NO~reset }
    }
  }
}
\BNVS_new:cpn { if_resolve_loop_or_end_return[.reset_all]: } {
\BNVS_DEBUG_log:x { ▃▃▃▃▃~CASE~...reset_all }
  \__bnvs_if_resolve_path_n_end_return_false_or:T {
    \__bnvs_if_greset_all:vnT { FQ_name } { } { }
    \__bnvs_if_append_V:vcTF { FQ_name } { ans } {
\BNVS_DEBUG_log_if_resolve_ncTF:nn { ... } { .../reset }
      \__bnvs_if_resolve_loop_or_end_return:
    } {
      \__bnvs_if_resolve_end_return_false:n { NO~reset }
    }
  }
}
\BNVS_set:cpn { if_resolve_loop_or_end_return[...<integer>]: } {
\BNVS_DEBUG_log:x { ▃▃▃▃▃~CASE~...<integer> }
\BNVS_DEBUG_log_tl:c { a }
  \__bnvs_if_resolve_path_n_end_return_false_or:T {
    \__bnvs_if_append_index:vvcTF { FQ_name } { a } { ans } {
\BNVS_DEBUG_log_if_resolve_ncTF:nn { ... } { .../<integer> }
      \__bnvs_if_resolve_loop_or_end_return:
    } {
      \__bnvs_if_resolve_end_return_false:n { NO~integer }
    }
  }
}
\BNVS_set:cpn { if_resolve_loop_or_end_return[...]: } {
\BNVS_DEBUG_log:x { ▃▃▃▃▃~CASE~... }
  \__bnvs_if_resolve_path_n_end_return_false_or:T {
    \__bnvs_if_append_V:vcTF { FQ_name } { ans } {
\BNVS_DEBUG_log_if_resolve_ncTF:nn { ... } { .../... }
      \__bnvs_if_resolve_loop_or_end_return:
    } {
      \__bnvs_if_resolve_end_return_false:n { NO~value }
    }
  }
}
\BNVS_set:cpn { if_resolve_loop_or_end_return[...++]: } {
\BNVS_DEBUG_log:x { ▃▃▃▃▃~CASE~...++ }
  \__bnvs_if_path_suffix:nTF { reset } {
\BNVS_DEBUG_log_if_resolve_ncTF:nn { ... } { .../...reset++ }
    \__bnvs_if_resolve_path_n_end_return_false_or:T {
      \__bnvs_v_if_greset:vnT { FQ_name } { } { }
      \__bnvs_if_append_v_post:vncTF { FQ_name } { 1 }  { ans } {
        \__bnvs_if_resolve_loop_or_end_return:
      } {
        \__bnvs_if_resolve_end_return_false:n { NO~post }
      }
    }
  } {
    \__bnvs_if_path_suffix:nTF { reset_all } {
\BNVS_DEBUG_log_if_resolve_ncTF:nn { ... } { .../...reset_all++ }
      \__bnvs_if_resolve_path_n_end_return_false_or:T {
        \__bnvs_if_greset_all:vnT { FQ_name } { } { }
        \__bnvs_if_append_v_post:vncTF { FQ_name } { 1 }  { ans } {
          \__bnvs_if_resolve_loop_or_end_return:
        } {
          \__bnvs_if_resolve_end_return_false:n { NO~post }
        }
      }
    } {
\BNVS_DEBUG_log_if_resolve_ncTF:nn { ... } { .../...++ }
      \__bnvs_if_resolve_path_n_end_return_false_or:T {
        \__bnvs_if_append_v_post:vncTF { FQ_name } { 1 }  { ans } {
          \__bnvs_if_resolve_loop_or_end_return:
        } {
          \__bnvs_if_resolve_end_return_false:n { NO~post }
        }
      }
    }
  }
}
\BNVS_set:cpn { if_resolve_loop_or_end_return[...n=...]: } {
\BNVS_DEBUG_log:x { ▃▃▃▃▃~CASE~...n=... }
  \__bnvs_if_resolve_path_n_end_return_false_or:T {
    \__bnvs_resolve_base_n:
    \__bnvs_if_assign_value:vvTF { FQ_name_base }  { rhs } {
      \__bnvs_if_resolve_n_incr:vvncTF { FQ_name } { FQ_name_base } { 0 } { ans } {
\BNVS_DEBUG_log_if_resolve_ncTF:nn { ... } { .../...n=... }
        \__bnvs_if_resolve_loop_or_end_return:
      } {
        \__bnvs_if_resolve_end_return_false:n {
          NO~n~assignment
        }
      }
    } {
      \__bnvs_if_resolve_end_return_false:n {
        NO~n~assignment
      }
    }
  }
}
\BNVS_set:cpn { if_resolve_loop_or_end_return[...n+=...]: } {
\BNVS_DEBUG_log:x { ▃▃▃▃▃~CASE~...n+=... }
  \__bnvs_if_resolve_path_n_end_return_false_or:T {
    \__bnvs_resolve_base_n:
    \__bnvs_if_append_n_incr:vvvcTF { FQ_name } { FQ_name_base }  { rhs }  { ans } {
\BNVS_DEBUG_log_if_resolve_ncTF:nn { ... } { .../...n+=... }
      \__bnvs_if_resolve_loop_or_end_return:
    } {
      \__bnvs_if_resolve_end_return_false:n {
        NO~n~incrementation
      }
    }
  }
}
\BNVS_set:cpn { if_resolve_loop_or_end_return[...=...]: } {
\BNVS_DEBUG_log:x { ▃▃▃▃▃~CASE~...=... }
%%
  \__bnvs_if_resolve_path_n_end_return_false_or:T {
    \__bnvs_if_assign_value:vvTF { FQ_name } { rhs } {
      \__bnvs_if_resolve:vcTF { FQ_name } { ans } {
\BNVS_DEBUG_log_if_resolve_ncTF:nn { ... } { ...=... }
        \__bnvs_if_resolve_loop_or_end_return:
      } {
        \__bnvs_if_resolve_end_return_false:n {
          NO~assignment
        }
      }
    } {
      \__bnvs_if_resolve_end_return_false:n {
        NO~assignment
      }
    }
  }
}
\BNVS_set:cpn { if_resolve_loop_or_end_return[...+=...]: } {
\BNVS_DEBUG_log:x { ▃▃▃▃▃~CASE~...+=... }
  \__bnvs_if_resolve_path_n_end_return_false_or:T {
    \__bnvs_if_append_v_incr:vvcTF { FQ_name } { rhs } { ans } {
\BNVS_DEBUG_log_if_resolve_ncTF:nn { ... } { ...+=... }
      \__bnvs_if_resolve_loop_or_end_return:
    } {
      \__bnvs_if_resolve_end_return_false:n {
        NO~incremented~value
      }
    }
  }
}
\BNVS_new:cpn { resolve_base: } {
\BNVS_DEBUG_log_f:ncn { } { resolve_base: } { }
  \__bnvs_seq_if_empty:cF { path_base } {
    \__bnvs_tl_put_right:cx { FQ_name_base } {
      . \__bnvs_seq_use:cn { path_base } { . }
    }
  }
\BNVS_DEBUG_log_if_resolve_ncTF:nn { ... } { ...BASE~n... }
\BNVS_DEBUG_log_tl:c { FQ_name }
\BNVS_DEBUG_log_tl:c { id }
\BNVS_DEBUG_log_seq:xc { /\BNVS_tl_use:c { path }/ } { path }
\BNVS_DEBUG_log_tl:c { FQ_name_base }
\BNVS_DEBUG_log_seq:c { path_base }
\BNVS_DEBUG_log_tl:c { ans }
}
\BNVS_new:cpn { resolve_base_n: } {
\BNVS_DEBUG_log_f:ncn { } { resolve_base_n: } { }
\BNVS_DEBUG_log_seq:c { path_base }
  \__bnvs_seq_if_empty:cF { path_base } {
    \__bnvs_seq_pop_right:cc { path_base } { a }
    \__bnvs_seq_if_empty:cF { path_base } {
      \__bnvs_tl_put_right:cx { FQ_name_base } {
        . \__bnvs_seq_use:cn { path_base } { . }
      }
    }
  }
\BNVS_DEBUG_log_if_resolve_ncTF:nn { ... } { ...BASE~n... }
\BNVS_DEBUG_log_tl:c { FQ_name }
\BNVS_DEBUG_log_tl:c { id }
\BNVS_DEBUG_log_seq:xc { /\BNVS_tl_use:c { path }/ } { path }
\BNVS_DEBUG_log_tl:c { FQ_name_base }
\BNVS_DEBUG_log_seq:c { path_base }
\BNVS_DEBUG_log_tl:c { ans }
}
\BNVS_new:cpn { if_resolve_loop_or_end_return[...++n]: } {
\BNVS_DEBUG_log:x { ▃▃▃▃▃~CASE~...++n }
\BNVS_DEBUG_log_tl:c { path }
\BNVS_DEBUG_log_seq:c { path }
  \__bnvs_if_resolve_path_n_end_return_false_or:T {
\BNVS_DEBUG_log_tl:c { path }
\BNVS_DEBUG_log_seq:c { path }
    \__bnvs_resolve_base:
    \__bnvs_if_append_n_incr:vvncTF { FQ_name } { FQ_name_base } { 1 }  { ans } {
\BNVS_DEBUG_log_if_resolve_ncTF:nn { ... } { .../...++n }
      \__bnvs_if_resolve_loop_or_end_return:
    } {
      \__bnvs_if_resolve_end_return_false:n { NO/...++n }
    }
  }
}
\BNVS_set:cpn { if_resolve_loop_or_end_return[++...n]: } {
\BNVS_DEBUG_log:x { ▃▃▃▃▃~CASE~++...n }
  \__bnvs_if_resolve_path_n_end_return_false_or:T {
    \__bnvs_resolve_base_n:
    \__bnvs_if_append_n_incr:vvncTF { FQ_name } { FQ_name_base } { 1 }  { ans } {
\BNVS_DEBUG_log_if_resolve_ncTF:nn { ... } { .../++...n }
      \__bnvs_if_resolve_loop_or_end_return:
    } {
      \__bnvs_if_resolve_end_return_false:n { NO~++...n }
    }
  }
}
\BNVS_new:cpn { if_resolve_loop_or_end_return[++...]: } {
\BNVS_DEBUG_log:n { ▃▃▃▃▃~CASE~++... }
\BNVS_DEBUG_log_seq:c { split }
  \__bnvs_if_path_suffix:nTF { reset } {
    \__bnvs_if_resolve_path_n_end_return_false_or:T {
      \__bnvs_if_append_v_incr:vncTF { FQ_name } { 1 } { ans } {
\BNVS_DEBUG_log_if_resolve_ncTF:nn { ... } { .../++...reset }
        \__bnvs_v_if_greset:vnT { FQ_name } { } { }
        \__bnvs_if_resolve_loop_or_end_return:
      } {
        \__bnvs_v_if_greset:vnT { FQ_name } { } { }
        \__bnvs_if_resolve_end_return_false:n { No~increment }
      }
    }
  } {
    \__bnvs_if_path_suffix:nTF { reset_all } {
      \__bnvs_if_resolve_path_n_end_return_false_or:T {
        \__bnvs_if_append_v_incr:vncTF { FQ_name } { 1 } { ans } {
\BNVS_DEBUG_log_if_resolve_ncTF:nn { ... } { .../++...reset_all }
          \__bnvs_if_greset_all:vnT { FQ_name } { } { }
          \__bnvs_if_resolve_loop_or_end_return:
        } {
          \__bnvs_if_greset_all:vnT { FQ_name } { } { }
          \__bnvs_if_resolve_end_return_false:n { No~increment }
        }
      }
    } {
      \__bnvs_if_resolve_path_n_end_return_false_or:T {
        \__bnvs_if_append_v_incr:vncTF { FQ_name } { 1 } { ans } {
\BNVS_DEBUG_log_if_resolve_ncTF:nn { ... } { .../++... }
\BNVS_DEBUG_log_seq:c { split }
          \__bnvs_if_resolve_loop_or_end_return:
        } {
          \__bnvs_if_resolve_end_return_false:n { No~increment }
        }
      }
    }
  }
}
\regex_const:Nn \c__bnvs_A_cln_Z_regex {
  \A \s* (?:
    ( [^:]+? )
    | (?: ( [^:]+? ) \s* : (?: \s* ( [^:]*? ) | : \s* ( [^:]*? ) ) )
    | (?: :: \s* (?: ( [^:]+? ) \s* : \s* ( [^:]+? ) )? )
    | (?: : \s* (?: ( [^:]+? ) \s* :: \s* ( [^:]*? ) )? )
  )
  \s* \Z
}
\BNVS_set:cpn { resolve_query_end_return_true: } {
\BNVS_DEBUG_log_if_resolve_query_ncTF:nn { ... } { ...TRUE }
  \BNVS_end:
  \prg_return_true:
}
\BNVS_new:cpn { resolve_query_end_return_false: } {
\BNVS_DEBUG_log_if_resolve_query_ncTF:nn { ... } { ...FALSE }
  \BNVS_end:
  \prg_return_false:
}
\BNVS_new:cpn { resolve_query_end_return_false:n } #1 {
\BNVS_DEBUG_log_if_resolve_query_ncTF:nn { ... } { ...FALSE }
  \BNVS_end:
  \prg_return_false:
}
\BNVS_new:cpn { if_resolve_query_return_false:n } #1 {
\BNVS_DEBUG_log_if_resolve_query_ncTF:nn { ... } { ...FALSE }
  \prg_return_false:
}
\BNVS_new:cpn { resolve_query_error_return_false:n } #1 {
  \BNVS_error:x { #1 }
  \__bnvs_if_resolve_query_return_false:
}
\BNVS_new:cpn { if_resolve_query_return_unreachable: } {
  \__bnvs_resolve_query_error_return_false:n { UNREACHABLE }
}
\BNVS_new:cpn { if_blank:cTF } #1 {
  \BNVS_tl_use:Nc \tl_if_blank:VTF { #1 }
}
\BNVS_new_conditional:cpnn { if_match_pop_left:c } #1 { T, F, TF } {
  \BNVS_tl_use:nc {
    \BNVS_seq_use:Nc \seq_pop_left:NNTF { match }
  } { #1 } {
\BNVS_DEBUG_log_f:ncn { } { if_match_pop_left:cTF } { ...TRUE }
\BNVS_DEBUG_log_tl:c { #1 }
    \prg_return_true:
  } {
\BNVS_DEBUG_log_f:ncn { } { if_match_pop_left:cTF } { ...FALSE }
    \prg_return_false:
  }
}
\BNVS_set:cpn { if_match_pop_left:cT } #1 #2 {
  \BNVS_use:c { if_match_pop_left:cTF }
    { #1 } { #2 } { \__bnvs_if_resolve_query_return_unreachable: }
}
\BNVS_new_conditional:cpnn { if_resolve_query_branch: } { T, F, TF } {
\BNVS_DEBUG_log_if_resolve_query_ncTF:nn { ... } { ...MATCH~BRANCH... }
  \__bnvs_if_match_pop_left:cT V {
    \__bnvs_if_match_pop_left:cT V {
      \__bnvs_if_blank:cTF V {
        \__bnvs_if_match_pop_left:cT A {
          \__bnvs_if_match_pop_left:cT Z {
            \__bnvs_if_match_pop_left:cT L {
              \__bnvs_if_blank:cTF A {
                \__bnvs_if_match_pop_left:cT L {
                  \__bnvs_if_match_pop_left:cT Z {
                    \__bnvs_if_blank:cTF L {
                      \__bnvs_if_match_pop_left:cT Z {
                        \__bnvs_if_match_pop_left:cT L {
                          \__bnvs_if_blank:cTF L {
                            \BNVS_use:c { if_resolve_query_return[:Z]: }
                          } {
                            \BNVS_use:c { if_resolve_query_return[:Z::L]: }
                          }
                        }
                      }
                    } {
                      \__bnvs_if_blank:cTF Z {
\__bnvs_resolve_query_error_return_false:n { Missing~first~or~last }
                      } {
                        \BNVS_use:c { if_resolve_query_return[:Z::L]: }
                      }
                    }
                  }
                }
              } {
                \__bnvs_if_blank:cTF Z {
                  \__bnvs_if_blank:cTF L {
                    \BNVS_use:c { if_resolve_query_return[A:]: }
                  } {
                    \BNVS_use:c { if_resolve_query_return[A::L]: }
                  }
                } {
                  \__bnvs_if_blank:cTF L {
                    \BNVS_use:c { if_resolve_query_return[A:Z]: }
                  } {
                    \__bnvs_if_resolve_query_return_unreachable:
                  }
                }
              }
            }
          }
        }
      } {
        \BNVS_use:c { if_resolve_query_return[V]: }
      }
    }
  }
}
\BNVS_new:cpn { if_resolve_query_return[V]: } {
  \__bnvs_if_resolve:vcTF { V } { ans } {
\BNVS_DEBUG_log_if_resolve_query_ncTF:nn { ... } { ...[V]...TRUE }
    \prg_return_true:
  } {
\BNVS_DEBUG_log_if_resolve_query_ncTF:nn { ... } { ...[V]...FALSE }
    \prg_return_false:
  }
}
\BNVS_new:cpn { if_resolve_query_return[A:Z]: } {
  \__bnvs_if_resolve:vcTF { A } { ans } {
    \__bnvs_tl_put_right:cn { ans } { - }
    \__bnvs_if_append:vcTF { Z } { ans } {
\BNVS_DEBUG_log_if_resolve_query_ncTF:nn { ... } { ...[A:Z]...TRUE }
      \prg_return_true:
    } {
\BNVS_DEBUG_log_if_resolve_query_ncTF:nn { ... } { ...[A:Z]...FALSE/A }
      \prg_return_false:
    }
  } {
\BNVS_DEBUG_log_if_resolve_query_ncTF:nn { ... } { ...[A:Z]...FALSE/A }
    \prg_return_false:
  }
}
\BNVS_new:cpn { if_resolve_query_return[A::L]: } {
  \__bnvs_if_resolve:vcTF { A } { A } {
    \__bnvs_if_resolve:vcTF { L } { ans } {
      \__bnvs_tl_put_right:cn { ans } { + }
      \__bnvs_tl_put_right:cv { ans } { A }
      \__bnvs_tl_put_right:cn { ans } { -1 }
      \__bnvs_round_ans:
      \__bnvs_tl_put_left:cn { ans } { - }
      \__bnvs_tl_put_left:cv { ans } { A }
      \prg_return_true:
    } {
      \prg_return_false:
    }
  } {
    \prg_return_false:
  }
}
\BNVS_new:cpn { if_resolve_query_return[A:]: } {
  \__bnvs_if_resolve:vcTF { A } { ans } {
    \__bnvs_tl_put_right:cn { ans } { - }
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\BNVS_new:cpn { if_resolve_query_return[:Z::L]: } {
  \__bnvs_if_resolve:vcTF { Z } { Z } {
    \__bnvs_if_resolve:vcTF { L } { ans } {
      \__bnvs_tl_put_left:cn  { ans } { 1-}
      \__bnvs_tl_put_right:cn { ans } { + }
      \__bnvs_tl_put_right:cv { ans } { Z }
      \__bnvs_round_ans:
      \__bnvs_tl_put_right:cn { ans } { - }
      \__bnvs_tl_put_right:cv { ans } { Z }
      \prg_return_true:
    } {
      \prg_return_false:
    }
  } {
    \prg_return_false:
  }
}
\BNVS_new:cpn { if_resolve_query_return[:]: } {
  \__bnvs_tl_set:cn { ans } { - }
  \prg_return_true:
}
\BNVS_new:cpn { if_resolve_query_return[:Z]: } {
  \__bnvs_tl_set:cn { ans } { - }
  \__bnvs_if_append:vcTF { Z } { ans } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\BNVS_new_conditional:cpnn { if_resolve_query:nc } #1 #2 { T, F, TF } {
\BNVS_DEBUG_log_set:cnnc { if_resolve_query:ncTF } { QUERY } { #1 } { #2 }
\BNVS_DEBUG_log_if_resolve_query_ncTF:nn { } { ... }
\BNVS_set:cpn { error:n } ##1 {
  \BNVS_error:n { #1 / ##1 }
}
  \__bnvs_call_greset:
  \__bnvs_match_if_once:NnTF \c__bnvs_A_cln_Z_regex { #1 } {
\BNVS_DEBUG_log_if_resolve_query_ncTF:nn { ... } { ...MATCH... }
\BNVS_DEBUG_log_seq:c { match }
    \BNVS_DEBUG_begin:n { if_resolve_query:nc }
    \__bnvs_if_resolve_query_branch:TF {
      \BNVS_tl_set_after:ncv {
        \BNVS_end:
      } { #2 } { ans }
\BNVS_DEBUG_log_if_resolve_query_ncTF:nn { ... } { ...TRUE }
\BNVS_DEBUG_log_tl:c { #2 }
      \prg_return_true:
    } {
\BNVS_DEBUG_log_if_resolve_query_ncTF:nn { ... } { ...FALSE }
    \BNVS_end:
      \prg_return_false:
    }
  } {
    \BNVS_error:n { Syntax~error:~#1 }
    \BNVS_end:
    \prg_return_false:
  }
}
\regex_const:Nn \c__bnvs_comma_regex { \s* , \s* }
\BNVS_new_conditional:cpnn { if_resolve_queries:nc } #1 #2 { TF } {
\BNVS_DEBUG_log_set:cnnc { if_resolve_queries:ncTF } { IN } { #1 } { #2 }
\BNVS_DEBUG_log_if_resolve_queries_ncTF:nn { } { ... }
  \BNVS_DEBUG_begin:n { if_resolve_queries:ncTF }
  \__bnvs_seq_clear:c { ans }
  \regex_split:NnN \c__bnvs_comma_regex { #1 } \l__bnvs_query_seq
  \BNVS_set:cpn { end_return: } {
    \__bnvs_seq_if_empty:cTF { ans } {
      \BNVS_end:
\BNVS_DEBUG_log_if_resolve_queries_ncTF:nn { } { ...DONE/Empty }
    } {
\BNVS_DEBUG_log_if_resolve_queries_ncTF:nn { } { ...DONE/Empty }
\BNVS_DEBUG_log_seq:c { ans }
      \exp_args:Nnx
      \use:n {
        \BNVS_end:
        \__bnvs_tl_put_right:cn { #2 }
      } { \__bnvs_seq_use:cn { ans } , }
    }
    \prg_return_true:
  }
  \__bnvs_seq_map_inline:cn { query } {
    \__bnvs_tl_clear:c { ans }
    \__bnvs_if_resolve_query:ncTF { ##1 } { ans } {
      \__bnvs_tl_if_empty:cF { ans } {
        \__bnvs_seq_put_right:cv { ans } { ans }
      }
    } {
      \seq_map_break:n {
        \BNVS_set:cpn { end_return: } {
          \BNVS_end:
          \BNVS_error:n { Circular/Undefined~dependency~in~#1}
          \exp_args:Nnx
          \use:n {
            \BNVS_end:
            \__bnvs_tl_put_right:cn { #2 }
          } { \__bnvs_seq_use:cn { ans } , }
          \prg_return_false:
        }
      }
    }
  }
  \__bnvs_end_return:
}
\BNVS_new:cpn { resolve_queries:nc } #1 #2 {
\BNVS_DEBUG_log_set:cnnc { resolve_queries:nc } { IN } { #1 } { #2 }
\BNVS_DEBUG_log_resolve_queries_nc:nn { } { ... }
  \BNVS_DEBUG_begin:n { resolve_queries:nc }
  \__bnvs_seq_clear:c { ans }
  \regex_split:NnN \c__bnvs_comma_regex { #1 } \l__bnvs_query_seq
  \__bnvs_seq_map_inline:cn { query } {
    \__bnvs_tl_clear:c { ans }
    \__bnvs_if_resolve_query:ncTF { ##1 } { ans } {
      \__bnvs_seq_put_right:cv { ans } { ans }
    } {
      \seq_map_break:n {
\BNVS_DEBUG_on:
\BNVS_DEBUG_log_gprop:n {}
        \BNVS_error:n { Circular/Undefined~dependency~in~#1}
      }
    }
  }
  \exp_args:Nnx
  \use:n {
    \BNVS_end:
    \__bnvs_tl_put_right:cn { #2 }
  } { \__bnvs_seq_use:cn { ans } , }
}
\NewDocumentCommand \BeanovesResolve { O{} m } {
  \BNVS_DEBUG_begin:n { BeanovesResolve }
  \keys_define:nn { BeanovesResolve } {
    in:N .tl_set:N = \l__bnvs_resolve_in_tl,
    in:N .initial:n = { },
    show .bool_set:N = \l__bnvs_resolve_show_bool,
    show .default:n = true,
    show .initial:n = false,
  }
  \keys_set:nn { BeanovesResolve } { #1 }
  \__bnvs_tl_clear:c { ans }
  \__bnvs_if_resolve_queries:ncTF { #2 } { ans } {
    \__bnvs_tl_if_empty:cTF { resolve_in } {
      \bool_if:nTF { \l__bnvs_resolve_show_bool } {
        \BNVS_tl_use:Nv \BNVS_end: { ans }
      } {
        \BNVS_end:
      }
    } {
      \bool_if:nTF { \l__bnvs_resolve_show_bool } {
        \cs_set:Npn \BNVS_end:Nn ##1 ##2 {
          \BNVS_end:
          \tl_set:Nn ##1 { ##2 }
          ##2
        }
        \BNVS_tl_use:nv {
          \exp_last_unbraced:NV \BNVS_end:Nn \l__bnvs_resolve_in_tl
        } { ans }
      } {
        \cs_set:Npn \BNVS_end:Nn ##1 ##2 {
          \BNVS_end:
          \tl_set:Nn ##1 { ##2 }
        }
        \BNVS_tl_use:nv {
          \exp_last_unbraced:NV \BNVS_end:Nn \l__bnvs_resolve_in_tl
        } { ans }
      }
    }
  } {}
}
\NewDocumentCommand \BeanovesReset { s O{} m } {
  \__bnvs_if_id_FQ_name_n_get:nTF { #3 } {
    \BNVS_tl_use:nv {
      \IfBooleanTF { #1 } {
        \__bnvs_if_greset_all:nnF
      } {
        \__bnvs_v_if_greset:nnF
      }
    } { FQ_name } { #2 } {
    }
  } {
    \__bnvs_warning:n { Bad~name:~#3 }
  }
  \ignorespaces
}
\NewDocumentCommand \BeanovesSavePauses { m } {
  \__bnvs_save:n { #1 }
}
\makeatletter
\BNVS_new:cpn { save:n } #1 {
  \cs_if_exist:NT \c@beamerpauses {
    \exp_args:Nnx \__bnvs_parse:nn { #1 } { \the\c@beamerpauses }
  }
}
\makeatother
\BNVS_DEBUG_off:
\ExplSyntaxOff
%% 
%% beanoves --- beamer named overlay specifications
%% 
%% Copyright (C) 2024 by Jérôme LAURENS <jerome.laurens@u-bourgogne.fr>
%% 
%% This work may be distributed and/or modified under the
%% conditions of the LaTeX Project Public License (LPPL), either
%% version 1.3c of this license or (at your option) any later
%% version.  The latest version of this license is in the file:
%% 
%% https://www.latex-project.org/lppl.txt
%% 
%% This work is "maintained" (as per LPPL maintenance status) by
%% Jérôme LAURENS.
%% 
%% This work consists of the file  beanoves.dtx
%% and the derived files           beanoves.ins,
%%                                 beanoves.pdf,
%%                                 beanoves.sty and
%%                                 beanoves-debug.sty.
%% 
%%
%% End of file `beanoves-debug.sty'.
